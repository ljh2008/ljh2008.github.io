<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：java | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2014-04-14T15:07:57+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java安全那些事之二（base64,des）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/14/security2/"/>
    <updated>2014-04-14T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/14/security2</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;和Hash的不可逆相比，还有一些算法是可逆的，也就是数据在发送方经过加密后，再传输至接收方，接收方对收到的信息后进行解密得到明文。</p>

<p>&emsp;&emsp;我们先来看可逆算法中最简单的一种：Base64，请先看代码。</p>

<p><code>java
String b64result = new String(Base64.encodeBase64("刘江华".getBytes()));
System.out.println("base64加密后密文是：" + b64result);
String orgStr = new String(Base64.decodeBase64(b64result.getBytes()));
System.out.println("base64解密为明文是：" + orgStr);
</code></p>

<p>&emsp;&emsp;上面代码的输出是：</p>

<p><code>
base64加密后密文是：5YiY5rGf5Y2O
base64解密为明文是：刘江华
</code></p>

<p>&emsp;&emsp;由此可见，base64加密算法会把明文加密后变成我们看不明白的密文，但我们也可以通过base64算法很快解密得到明文，这也就是说，如果信息在传输过程中被第三方截获，对方又知道你采用的是base64算法，那么你的密文也就无秘密可言。</p>

<p>&emsp;&emsp;既然如此，是不是说base64就完全无用了呢？当然不是！如果我们仔细观察会发现，该算法输出的内容都是数字和字母之类的ascii可显示字符，而无论你的输入是中文还是特殊字符。这一特点对于信息传输过程中，明文中包含特殊字符而可能产生乱码的情况非常有用。比如：对要传输的内容进行base64编码，再通过http协议传输到接收方，接收方再按base64解码得到明文。base64还有其它的一些用处，比方说将byte[] 转换为可显示字符等等，我不再多说。base64运行示意图如下：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/base64.jpg' width='' height='' title='base64加密解密示意图'><span class='caption-text'>base64加密解密示意图</span></span></p>

<p>&emsp;&emsp;接下来，我们再来看看另外一种加密强度更好的方法：DES加密算法。DES属于对称加密算法，信息发送者通过一个私钥来加密信息后再传输，而信息接收者也使用同样的一个私钥完成信息的解密。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/des.jpg' width='' height='' title='des加密解密示意图'><span class='caption-text'>des加密解密示意图</span></span></p>

<p>&emsp;&emsp;之所以称DES为对称加密算法，主要原因是信息发送方和信息接收方使用的是相同的密钥，上图中的private key就是。代码写出来就是下面这样的：<!-- more--></p>

<p>``` java</p>

<pre><code>/**
 * des加密示例代码
 * @param orgData
 * @param privateKey
 * @return
 * @throws Exception
 */
public static byte[] desEncode(byte[] orgData, String privateKey) throws Exception {

    KeyGenerator kgenerator = KeyGenerator.getInstance("DES");
    kgenerator.init(new SecureRandom(privateKey.getBytes()));

    Cipher cipher = Cipher.getInstance("DES");
    cipher.init(Cipher.ENCRYPT_MODE, kgenerator.generateKey());

    return cipher.doFinal(orgData);
}

/**
 * des解密示例代码
 * @param passedData
 * @param privateKey
 * @return
 * @throws Exception
 */
public static byte[] desDecode(byte[] passedData, String privateKey) throws Exception {

    KeyGenerator kgenerator = KeyGenerator.getInstance("DES");
    kgenerator.init(new SecureRandom(privateKey.getBytes()));

    Cipher cipher = Cipher.getInstance("DES");
    cipher.init(Cipher.DECRYPT_MODE, kgenerator.generateKey());

    return cipher.doFinal(passedData);
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;上面的加密和解密方法中，均传入了一个desPrivateKey，这个key是两方共用的，调用示例代码如下，其中的desPrivateKey是随机生成的一个私钥，两方共同持有：</p>

<p>``` java</p>

<pre><code>    String orgStr = "hello,刘江华";

    String desPrivateKey = "3c9909afec25354d551dae21590bb26e3";

    byte[] en_bytes = desEncode(orgStr.getBytes(), desPrivateKey);

    System.out.println("DES加密后的内容是：" + new BASE64Encoder().encode(en_bytes));

    byte[] de_bytes = desDecode(en_bytes, desPrivateKey);
    System.out.println("DES解密后的内容是：" + new String(de_bytes));
</code></pre>

<p>```</p>

<p>&emsp;&emsp;代码执行后的输出如下：</p>

<p><code>
DES加密后的内容是：VExT39v/M504pQY/L+d84w==
DES解密后的内容是：hello,刘江华
</code></p>

<p>&emsp;&emsp;由此我们可以得出结论，DES算法的关键在于私钥的安全保管，如果信息发送方和接收方中的任何一个泄露了私钥，双方的通讯过程也就无法保密了，因此，密钥的保密是一个关键。</p>

<p>&emsp;&emsp;下一篇文章，我继续给大家讲解RSA算法，RSA这是一种非对称加密算法，请大家随时关注我的博客。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java安全那些事之一(md5、sha)]]></title>
    <link href="http://yanyaner.com/blog/2014/04/13/security1/"/>
    <updated>2014-04-13T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/13/security1</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;安全攻防的世界，永远是道高一尺魔高一丈的世界，再强的安全防护在FBI面前几乎无密码可言，如果你去看看美国的楞镜门事件相关新闻就知道了。我并不是安全密码方面的专家，本文不想研究算法，只是从应用角度给大家普及些许web应用系统中安全相关的一些知识，希望对大家开发普通的企业级应用及互联网应用有帮助。</p>

<p>&emsp;&emsp;先来看看加密及解密。</p>

<p>&emsp;&emsp;登录是任何一个系统都有的功能，在登录的过程中需要对用户提供的密码进行验证以检测其身份合法性，这点对于我们应用开发者而言，就是如何持久化用户的密码。如果仅仅以明文方式将用户密码保存在数据库中，那未免有些太“瓜西西”了，这就像CSDN所犯错一样低级。因此，我们一定要对用户密码进行相应的处理后再保存，即使被黑客拖库也可以防止用户密码的泄露。</p>

<p>&emsp;&emsp;Hash是常用的方法。Hash一般翻译为"散列"或直接音译为"哈希"，就是把任意长度的输入变换成固定长度的散列输出。这种转换是一种压缩映射，也就是散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值，简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要。</p>

<p>&emsp;&emsp;Hash常用的算法有md5、sha等，比如下面的代码：</p>

<p>``` java
System.out.println(DigestUtils.md5Hex(&ldquo;ljh&rdquo;));
System.out.println(DigestUtils.sha256Hex(&ldquo;ljh&rdquo;));
System.out.println(DigestUtils.sha384Hex(&ldquo;ljh&rdquo;));
System.out.println(DigestUtils.sha512Hex(&ldquo;ljh&rdquo;));</p>

<p><code>
&amp;emsp;&amp;emsp;大家要注意上面这4行代码的输出结果长度分别是：32，64，96，128位长，如何你决定采用其中的一种hash来处理用户密码的消息接要并持久化，一定要注意数据库字段的长度设定哦。
</code>
67f87c9b32834504b4ddf432055d88bd
871ca93f9e215997cc2d65b4a6924c706b69b09c4d419f89c24746d3ae04727b
d24d011e9d67511deea2f1296adaa65db2c161f8537ed48d5893c06d712abdf4a229c98f8d0fd2776fd8119248949a72
1def79cd9d613a9ceefa285902cd1eb2397b176fd16a09525f52947518c196e8e3349d017182b12726e6a74a0f553af2b6991034f0a9361671176c5f96c5a21b5YiY5rGf5Y2O
```</p>

<!-- more-->


<p>&emsp;&emsp;上面我用到了MD5与SHA1 Hash算法，这两种算法的区别在于：MD5比SHA1运算速度快，但SHA1比MD5强度高，其中，hash输出结果长度越长代表保密强度越好。Hash算法理论上是不可逆的，这意味着你不可能通过hash值反向计算出原始信息，因此，如果你的数据库中保存的是用户密码的hash值，将无人能够知道用户的原始密码是什么了，就好比你的银行密码遗忘了，只有带有效证件去银行重新设置密码，而老的密码将夫人知晓，包括DBA、开发人员。</p>

<p>&emsp;&emsp;那么，对于程序员来说，如何通过用户输入的密码来验证用户的身份呢？非常简单，基本流程是：得到用户输入的用户名及密码&mdash;>对输入的密码进行hash运算&mdash;>根据用户名到数据库中查询出这个用户&mdash;>取得数据库中保存的用户曾经的密码hash值&mdash;>比对两个hash值得出结论。</p>

<p>&emsp;&emsp;既然Hash加密密码有这么多的好处，那Hash保存密码真的可以高枕无忧了么？非也。hash是可以进行暴力破解的（虽然代价非常大的，一般情况下不会采用，但也不能排除），现在比较流行的做法是反向hash查询，就是预先在一张巨大的表中保存事先计算出来的hash值，通过询这个表就可以得到明文了。因此，如果用户的密码足够简单而常见，通过一次hash计算出来的结果几乎无秘密可言。另外，你也可以到网上了解一下“彩虹表”RainbowCrack相关的内容<a href="http://my.oschina.net/jgy/blog/38252">彩虹表-破解哈希算法 MD5加密法</a>，以空间换时间。</p>

<p>&emsp;&emsp;既然一次hash计算出来的保密性不好，那就多计算几次效果如何？比如：md5(md5(pwd))，答案是,这样的计算结果也是不安全，互联网上已经有多次hash计算结果的查询（有的是要收费的）。</p>

<p>&emsp;&emsp;其中，最好的一种办法是，加“随机盐”，也就是为每个用户保存一个足够长的随机字符串，使用这个salt参与计算，再进行多次hash计算。比如：md5(md5(pwd + salt))，这种做法相对来说就安全多了。在具体的项目中，你可以再改进一下这个算法，增加些复杂性（比如:md5(username.hashcode() + sha384Hex(salt + md5(pwd + slat)))），并且，程序在生成每个用户的salt时，要足够随机、足够长，这种方式对付hash反向查询就十分有效了。</p>

<p>&emsp;&emsp;hash算法除了用于密码的安全性外，还经常用于数据签名，这一块的应用我在随后的文章中会提到。</p>

<p>&emsp;&emsp;好了，这一部分先简单介绍到这，下一篇我们来看看Base64,DES,RSA等与加密解决信息有关的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[监控系统中的异步消息使用实例（二）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/09/async_message_architect2/"/>
    <updated>2014-04-09T12:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/09/async_message_architect2</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;接上节，再次贴出架构图，我们接下来要讲的是图中黄色部分的配置。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/monitor_jms1.jpg' width='' height='' title='业务方法监控架构'><span class='caption-text'>业务方法监控架构</span></span></p>

<p>&emsp;&emsp;先将spy程序导成一个jar包，加入到需要监控的目标服务器lib目录，monitor_spy.jar结构如下所示：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/jarinfo.jpg' width='' height='' title='monitor_spy.jar结构'><span class='caption-text'>monitor_spy.jar结构</span></span></p>

<p>&emsp;&emsp;为了能够实现对目标系统业务方法执行情况进行监控，需要将我们已经写好的拦截器配置到目标系统中去，下面是我的一个配置示例：</p>

<p>``` xml spring-spy.xml</p>

<pre><code>&lt;!-- jms连接工厂 --&gt;         
&lt;bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactoryBean"&gt;
    &lt;property name="connectionFactory"&gt;
        &lt;bean class="org.apache.activemq.ActiveMQConnectionFactory"&gt;
            &lt;property name="brokerURL" value="tcp://localhost:61616"&gt;&lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;!-- 配置池中最大连接数据以及最大活动连接数 --&gt;
    &lt;property name="maxConnections" value="100"&gt;&lt;/property&gt;
    &lt;property name="maximumActive" value="100"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- jms模板方法 --&gt;    
&lt;bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"&gt;
    &lt;constructor-arg ref="jmsFactory"&gt;
    &lt;/constructor-arg&gt;
    &lt;!-- 默认会创建queue类型的目标
    &lt;property name="defaultDestinationName" value="queue/methodSpyLogger"&gt;&lt;/property&gt; --&gt;
    &lt;property name="defaultDestination" ref="destinationQueue1"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 发送消息的目的地 --&gt;
&lt;bean id="destinationQueue1" class="org.apache.activemq.command.ActiveMQQueue"&gt;
    &lt;!-- 设置消息队列的名字 --&gt;
    &lt;constructor-arg  value="queue/methodSpyLogger" /&gt;
&lt;/bean&gt;


&lt;!-- 配置Spring和方法相关的监控 --&gt;
&lt;bean id="method-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"&gt;
    &lt;property name="patterns"&gt;
        &lt;list&gt;
            &lt;value&gt;com.lovo.mis.xjgl.service.impl.*&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 方法AOP拦截器 --&gt;
&lt;bean id="spy-method-interceptor"
      class="com.monitor.client.spy.SpyMethodIntercepter"&gt;
      &lt;property name="messageDao"&gt;
        &lt;bean class="com.monitor.client.dao.JMSMessageDaoImpl"&gt;
            &lt;property name="jmsTemplate" ref="jmsTemplate"&gt;&lt;/property&gt;
        &lt;/bean&gt;
      &lt;/property&gt;
      &lt;property name="userNameSessionKey" value="loginUserName"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 将切面应用到通知上 --&gt;
&lt;aop:config proxy-target-class="true"&gt;
    &lt;aop:advisor advice-ref="spy-method-interceptor"
                 pointcut-ref="method-pointcut" /&gt;
&lt;/aop:config&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;配置文件中有几个地方需要进行说明：<!-- more --></p>

<p>&emsp;&emsp;1、目标机器要修改的部分是JdkRegexpMethodPointcut中的patterns，由patterns指定需要监控的业务类所在的位置。</p>

<p>&emsp;&emsp;2、jmsFactory部分配置你的异步消息服务器连接信息，比如brokerURL等。</p>

<p>&emsp;&emsp;3、jmsTemplate中，通过defaultDestination指定一个Destination，因为一个消息服务器上存在多个Destination。也可以通过defaultDestinationName直接指定消息Destination的名称，系统默认创建的是queue，也就是说，如果你要使用topic类型的消息，就必须通过defaultDestination指定一个Destination。</p>

<p>&emsp;&emsp;4、messageDao可自由替换为其它实现类，比如你可以写一个mongoDB版本的实现以提供更好的性性，支持更大数据量。</p>

<p>&emsp;&emsp;最后来看看消费者代码，是直接使用ActiveMQ驱动实现的。</p>

<p>``` java</p>

<pre><code>    ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");

    Connection connection = factory.createConnection();

    //尝试真正建立连接，这里可以catch Exception
    connection.start();

    //得到一个会话，只有得到会话后，才可进行后续的操作
    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

    //创建一个目标队列
    Destination queue = session.createQueue("queue/methodSpyLogger"); 

    MessageConsumer consumer = session.createConsumer(queue);

    //可通过其它一些机制，来改变flag为false，以退出处理
    boolean flag = true;

    while (flag) {
        ObjectMessage msg = (ObjectMessage)consumer.receive();
        MethodLoggerMessage myMsg = (MethodLoggerMessage)msg.getObject();

        System.out.println(myMsg);
        //这里，可调用dao或service，向关系数据库(或nosql)中保存msg中的内容");

    }

    session.close();

    connection.close();
</code></pre>

<p>```</p>

<p>&emsp;&emsp;注意，如果队列中已经没有消息了，代码中的consumer.receive()会阻塞，直到有新的消息后再处理。我们也可以采用监听器的方式来处理消息服务器中的消息，比如下面的代码：</p>

<p>``` java</p>

<pre><code>    //处理消息者
    MessageConsumer consumer = session.createConsumer(queue);

    //处理多条消息
    consumer.setMessageListener(new MessageListener() {
        public void onMessage(Message msg) {
           //转换，这可以对类型进行检测，使用instance of
            TextMessage txtMsg = (TextMessage)msg;
            try {
                System.out.println("得到消息内容："+txtMsg.getText());
                System.out.println("处理完一条消息！！");
                //如果开启了事务，请session.commit();
            } catch (JMSException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    });
</code></pre>

<p>```</p>

<p>&emsp;&emsp;当目标程序运行时，我们可以打开ActiveMQ的管理界面，即可发现这个queue及上面的消费者。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/active_mq_admin.jpg' width='' height='' title='ActiveMQ的管理界面'><span class='caption-text'>ActiveMQ的管理界面</span></span></p>

<p>&emsp;&emsp;大家还要注意的是，我们的AOP通知中，还获取了调用者的ip，访问者姓名等信息，这些和web环境相关的信息是通过类似于下面的代码实现的：</p>

<p>``` java</p>

<p>ServletRequestAttributes sas = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
HttpServletRequest req = sas.getRequest();</p>

<p>logger.setIp(req.getLocalAddr());
logger.setSessionId(sas.getSessionId());</p>

<p>if (req.getSession() != null) {</p>

<pre><code>logger.setOperater((String)req.getSession().getAttribute(userNameSessionKey));
</code></pre>

<p>}</p>

<p>```
 &emsp;&emsp;其中的RequestContextHolder是由spring封装，具体做法是将用户web相关的信息通过filter或listener放入ThreadLocal对象中，在需要的地方通过RequestContextHolder从ThreadLocal中取得，因此，你想让上面的代码正常工作，要记得在web.xml中添加一个spring已经写好的RequestContextListener监听器哦。</p>

<p>``` xml  web.xml</p>

<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;
        org.springframework.web.context.request.RequestContextListener
    &lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>

<p>```</p>

<p> &emsp;&emsp;当然，本例中所使用的消息服务器是ActiveMQ，这个服务器实现了JMS规范，在企业级应用场景中不会存在问题。如果在互联网行业中，由于会面临高并发、大流量等情况，ActiveMQ不能保证高可用性、稳定性及性能要求，这个时候我们可以考虑其它的第三方消息服务器，比如淘宝的taobao-metaq，alibaba-rocketmq等，这些服务器是经过实际考验的开源产品，值得在互联网场景中使用。当然，这些MQ服务器和JMS规范没有任何关系，JMS企业级要求中并没有考虑过多的并发、大数据量的需求。</p>

<p> &emsp;&emsp;另外，kafka，rabbitmq等消息服务器也具有不错的性能，都可以进入架构的技术方案选型范围。比如，下面是一段rabbitmq的调用示例代码(注：rabbitmq需要er_lang并发程序包支持哦)，和JMS的调用相当类似。</p>

<p>``` java
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;</p>

<p>&hellip;&hellip;.//略去代码</p>

<pre><code>@Test
public void testSendMessage() throws Exception {
    SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");

    Connection connection = factory.newConnection();
    Channel channel = connection.createChannel();

    String message = sf.format(new Date()) + ":Hello!!!";
    channel.basicPublish("", "queue/sendEmail", null, message.getBytes());


    channel.close();
    connection.close();

    System.out.println("send message ok!");



}


@Test
public void testReciveMessage() throws Exception {

    System.out.println("recever starting.....");

    String QUEUE_NAME = "queue/sendEmail";

    SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

    ConnectionFactory factory = new ConnectionFactory();
    factory.setHost("localhost");

    Connection connection = factory.newConnection();
    Channel channel = connection.createChannel();

    channel.queueDeclare(QUEUE_NAME, false, false, false, null);

    QueueingConsumer consumer = new QueueingConsumer(channel);
    channel.basicConsume(QUEUE_NAME, false, consumer);

    QueueingConsumer.Delivery delivery = consumer.nextDelivery();

    String msg = new String(delivery.getBody());

    System.out.println(msg);

    System.out.println("rec end!!!");
}
</code></pre>

<p>```</p>

<p> &emsp;&emsp;先说到这吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[监控系统中的异步消息使用实例（一）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/08/async_message_architect1/"/>
    <updated>2014-04-08T12:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/08/async_message_architect1</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;以后的文章要尽量做到通俗，让非技术人员都读得懂，道理就跟艺术作品一样，一件好的作品，不需要配任何文字说明就足以打动普通观众，做到雅俗共赏而且有深度和内涵，其实，这需要作者相当的功力。</p>

<p>&emsp;&emsp;近期一些童鞋在实现一个监控系统，其中的一个功能是：对监控平台上布署的第三方应用业务方法执行细节进行监控，比如：方法调用者，调用者ip，应用系统名称，子系统名称，方法名称，执行耗时等信息。如何能够让监控系统得到目标机器上需要监控的业务方法执行情况呢？如何保证在监控的过程中不影响对方的业务的正常执行？下面我给出一种参考架构实现，这也是在概要设计的时候就应该明确的东西（专业名词叫架构原型）。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/monitor_jms1.jpg' width='' height='' title='业务方法监控架构'><span class='caption-text'>业务方法监控架构</span></span></p>

<p>&emsp;&emsp;首先，MonitorPlatform是我们的监控平台（图中青色部分），targetServer上运行着需要监控的系统hotel project（图中黄色部分）,如果我们想要获得目标机器上的我们需要的信息，最简单的办法是运行一个spy程序在对方的机器上，图中的spy app是起这个作用的（当然你也可以使用jmx规范来实现类似功能），举个不恰当的例子，就好比你在某人的机器上安装了一个木马程序，通过远程控制端你就可以得到对方机器上你感兴趣的任何东西，甚至包括控制摄像头哦。</p>

<p>&emsp;&emsp;其次，监控平台同时要监控多个目标系统，就我们例子中监控业务方法执行情况而言，就需要把监控得到的信息加以持久化以备后查，如果目标系统业务繁忙，而我们的spy app又要将取到的信息进行数据库持久化，数据库很可能会成为性能瓶颈从而造成性能问题，因此，我在这里采用了异步消息系统的设计，以缓解持久化压力。正如图所示，spy app将采集到的业务方法执行数据直接写入异步消息服务器的queue中，而monitor platform中的处理程序将从queue中取出消息，再进行后续的持久化处理。这种异步的消息设计方式可以有效缓解系统的压力，在很多项目中都可以采用（互联网项目中可用这种方式来"削峰"，缓解高并发压力）。</p>

<p>&emsp;&emsp;最后一个问题,spy如何采集到目标机器业务方法的执行情况呢。最佳答案当然是AOP。大家可以参考我的另一篇文章<a href="/blog/2013/03/26/logger/">一种日志记录解决方案</a>。</p>

<p>&emsp;&emsp;下面，我们一起来看看架构原型中的原代码实现吧。MethodLoggerMessage是需要持久化的消息对象，请注意实现Serializable接口。<!-- more --></p>

<p>``` java MethodLoggerMessage.java</p>

<p>package com.monitor.client.commons;</p>

<p>import java.io.Serializable;
import java.util.Date;</p>

<p>/<em>*
 * 需要持久化的对象消息
 * @author ljh
 *
 </em>/
public class MethodLoggerMessage implements Serializable {</p>

<pre><code>//方法执行时间，单位：毫秒
private double howLong;
//方法名
private String methodName;
//执行者ip地址
private String ip;
//执行者session会话id
private String sessionId;
//执行者
private String operater = "";
//执行时间
private Date execTimer;

public double getHowLong() {
    return howLong;
}
public void setHowLong(double howLong) {
    this.howLong = howLong;
}
public String getMethodName() {
    return methodName;
}
public void setMethodName(String methodName) {
    this.methodName = methodName;
}
public String getIp() {
    return ip;
}
public void setIp(String ip) {
    this.ip = ip;
}
public String getOperater() {
    return operater;
}
public void setOperater(String operater) {
    this.operater = operater;
}
public String getSessionId() {
    return sessionId;
}
public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
}
public Date getExecTimer() {
    return execTimer;
}
public void setExecTimer(Date execTimer) {
    this.execTimer = execTimer;
}
@Override
public String toString() {
    return "MethodLoggerMessage [howLong=" + howLong + ", methodName="
            + methodName + ", ip=" + ip + ", sessionId=" + sessionId
            + ", operater=" + operater + ", execTimer=" + execTimer + "]";
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;IMessageDao接口用来定义消息持久化行为，可以有很同种不同的实现版本，如基于消息的，关系数据库的或nosql的等等，有了这个接口，我们在intercepter中就可以做到拦截代码和持久化代码的解耦。</p>

<p>``` java IMessageDao.java
package com.monitor.client.dao;</p>

<p>import java.io.Serializable;</p>

<p>/<em>*
 * 持久化消息服务
 * @author ljh
 *
 </em>/
public interface IMessageDao {</p>

<pre><code>public void persist(Serializable msg);
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;接下来是消息持久化实现类源代码。因为采用了jms，因此我直接使用了spring对jms封装的模板方法实现。</p>

<p>``` java JMSMessageDaoImpl.java
package com.monitor.client.dao;</p>

<p>import java.io.Serializable;</p>

<p>import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.ObjectMessage;
import javax.jms.Session;</p>

<p>import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;</p>

<p>/<em>*
 * jms消息处理实现
 * @author ljh
 *
 </em>/
public class JMSMessageDaoImpl implements IMessageDao {</p>

<pre><code>//jms模板
private JmsTemplate jmsTemplate;
//目标队列名称
private String destinationName;

@Override
public void persist(final Serializable msg) {

    MessageCreator mc = new MessageCreator() {

        @Override
        public Message createMessage(Session session) throws JMSException {
            //创建对象消息，并发送之
            ObjectMessage objMsg = session.createObjectMessage();   
            objMsg.setObject(msg);

            return objMsg;
        }
    };

    if (destinationName == null) {
        jmsTemplate.send(mc);
    } else {
        //发送到指定的目标
        jmsTemplate.send(destinationName, mc);
    }


}

public void setJmsTemplate(JmsTemplate jmsTemplate) {
    this.jmsTemplate = jmsTemplate;
}

public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;最重要的就是这个拦截器实现了。环绕拦截器，功能最为强大。</p>

<p>``` java SpyMethodIntercepter.java
package com.monitor.client.spy;</p>

<p>import java.util.Date;</p>

<p>import javax.servlet.http.HttpServletRequest;</p>

<p>import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;</p>

<p>import com.monitor.client.commons.MethodLoggerMessage;
import com.monitor.client.dao.IMessageDao;
/<em>*
 * 目标服务器方法拦截器，调用信息可以通过异步消息机制持久化，具体要看IMessageDao实现
 * @author ljh
 *
 </em>/
public class SpyMethodIntercepter implements MethodInterceptor{</p>

<pre><code>public static final Logger LOG = LoggerFactory.getLogger(SpyMethodIntercepter.class);

//消息处理dao
private IMessageDao messageDao;
//当前登录者在目标系统中的登录用户名之key,在配置第三方程序时注入
private String userNameSessionKey = "loginedUserName";

@Override
public Object invoke(MethodInvocation method) throws Throwable {

    //取方法执行时的开始时间
    long start = System.nanoTime();

    try {
        return method.proceed();
    } catch (Exception ex) {
        throw ex;
    } finally {

        try {
            //为了不影响目标方法的运行，这里再次try
            //得到访问者request对象
            ServletRequestAttributes sas = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
            HttpServletRequest req = sas.getRequest();

            //取方法执行后的时间
            long end = System.nanoTime();

            //方法执行时间
            long howLong = end - start;
            String methodName = method.getMethod().getName();

            //持久化方法调用日志
            MethodLoggerMessage logger = new MethodLoggerMessage();

            logger.setMethodName(methodName);

            //方法执行时间，单位：毫秒
            logger.setHowLong((double)howLong/(1000*1000));

            logger.setIp(req.getLocalAddr());
            logger.setSessionId(sas.getSessionId());

            if (req.getSession() != null) {
                logger.setOperater((String)req.getSession().getAttribute(userNameSessionKey));
            }

            logger.setExecTimer(new Date());

            messageDao.persist(logger);
        } catch (Exception exc) {
            //do nothing or LOG.debug(ex.getMessage());
            LOG.warn("Error in spy: {}", exc);
        }

    }

}

public void setMessageDao(IMessageDao messageDao) {
    this.messageDao = messageDao;
}

public void setUserNameSessionKey(String userNameSessionKey) {
    this.userNameSessionKey = userNameSessionKey;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;至此，spy程序这边基本开发完成了。目标服务器上，该如何配置呢？监控平台的消息处理者又该如何实现呢？</p>

<p>&emsp;&emsp;且听下回分解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缓存之redis]]></title>
    <link href="http://yanyaner.com/blog/2014/03/27/cache-redis/"/>
    <updated>2014-03-27T12:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/03/27/cache-redis</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/03/redis.jpg' width='' height='' title=''><span class='caption-text'></span></span></p>

<p>&emsp;&emsp;缓存在软件系统中有着不可替代的作用，特别是访问量巨大的网站，我们对系统热点数据的缓存将会降低数据库的压力，提高系统性能。目前常用的缓存大致分为本地缓存和独立的缓存服务，本地缓存常用的有ehcached,oscached等，而独立的服务器缓存常用的有memcached、redis等。</p>

<p>&emsp;&emsp;Redis is an open source, BSD licensed, advanced key-value store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets and sorted sets.</p>

<p>&emsp;&emsp;这是redis官网<a href="http://redis.io/">redis.io</a>对redis的描述，我们从中可以看出，它是一个高性能的、更加高级的key-value缓存服务器。其中的更加高级，可能是相对于memcached这种简单的缓存服务器而言。比如redis可以在不取回缓存对象的情况下，通过指令直接对缓存的数字类型进行加、减操作，也可以对缓存的list中的内容进行修改操作，还可以对缓存的字符串进行直接的修改操作等等，这些操作都不需要取回缓存中的数据，因此没有序列化、反序列化的开销，性能会更高。另外，redis对一些复杂数据结构的支持，可以满足一些特定场景下的需求，比如sorted sets。</p>

<p>&emsp;&emsp;当然更高级、先进的redis，在功能强大的同时也增加了自身的复杂性。复杂可不是什么好事情，复杂的东西可能会给我们带来烦恼，实践证明，真正能够解决问题的方案一般都是简单的。因此，就redis和memcached而言，后者功能简单也更容易使用，这就造成了memcached在当前依然是缓存服务器中的老大（当然任何事都不能太绝对，我们在实际项目中可以根据不同的需求应用场景选择不同的缓存方案）。</p>

<p>&emsp;&emsp;本文是入门级文章，我在讲解redis的同时，也会顺便提到memcached，以便于大家对比。<!-- more --></p>

<p>&emsp;&emsp;先来安装redis，同样以windows系统为例（因为更多同鞋没有安装linux环境）。winodws的安装很简单，下载redis for windows的编译版本（地址在：<a href="http://code.google.com/p/servicestack/downloads/list">http://code.google.com/p/servicestack/downloads/list</a>），这是一个zip压缩包，将这个包解压到某个目录下，运行其中的redis-server.exe即可启动服务器。</p>

<p>&emsp;&emsp;如果你要指定一些额外的配置参数，可以在运行cmd中指定redis的配置文件，比如：</p>

<p>```
redis-server.exe conf/myredis.conf，</p>

<p>```</p>

<p>&emsp;&emsp;这样就可以在myredis.conf中配置更多的信息了。比如：daemonize，logfile，database，dbfilename，slaveof,loglevel等等，其中有两个参数我要说一下。</p>

<p>&emsp;&emsp;dbfilename参数，这个参数可以指定持久化文件名，默认是dump.rdb。这个参数说明redis可以将内存中缓存的东西进行持久化，如果您缓存服务器宕机重启了，redis下次重启时可以自动从这个文件中读取数据并恢复至内存中。这个功能在memcached中是没有的，memcached如果重新启动，缓存的数据将全部丢失。话又说回来，缓存的数据一般是来自数据库的，完全可以重新加载，系统在经过一段时间的运行后自然会重新填充到缓存服务器中的。当然，丢失缓存数据这对于一些大数据高并发发的网站来说，也许并不可接受，因为可能在瞬间造成数据库的极大访问压力而造成系统崩溃。</p>

<p>&emsp;&emsp;另一个参数是slaveof，这个参数可以指定redis主服务器，也就是说redis可以做成主从结构的，通过这种架构来保证系统的高可用性。当然，memcached也可以做成主从结构，但memcache需要第三方的插件支持（可以下载memcached-repcached并安装）。主从结构可以做到当主服务器发生故障的时候，从服务器可以升级以继续提供服务。</p>

<p>&emsp;&emsp;说到高可用性，另一个问题不得不提出，那就是分布式（即集群），因为缓存的东西都是在内在中的，一台服务器的内在毕竟有限，那我们就得搭建一个服务器集群在多台服务器上保存缓存的数据（即分片保存）。如何根据客户端的数据key找到集群中的正确的缓存服务器呢(实际项目中更有某台缓存服务器故障下线，或添加新的缓存服务器)？目前的做法是一致性hash，具体算法大家可以去查一下哦。</p>

<p>&emsp;&emsp;对分布式的Redis的访问，java客户端程序Jedis中已有实现，具体代码如下：</p>

<p>``` java</p>

<p>List<JedisShardInfo> jdsInfoList =new ArrayList<JedisShardInfo>();
//集群中的A服务器
JedisShardInfo infoA = new JedisShardInfo(hostA, portA);
//集群中的B服务器
JedisShardInfo infoB = new JedisShardInfo(hostB, portB);</p>

<p>//加入可用结点中
jdsInfoList.add(infoA);
jdsInfoList.add(infoB);</p>

<p>//下面的Hashing.MURMUR_HASH就是由Jedis提供的分布式的hash key算法
ShardedJedisPool pool =new ShardedJedisPool(config, jdsInfoList, Hashing.MURMUR_HASH, Sharded.DEFAULT_KEY_TAG_PATTERN);</p>

<p>ShardedJedis jedis = pool.getResource();</p>

<p>//下面就可以进行操作了哦</p>

<p>```</p>

<p>&emsp;&emsp;下面简单说一下，在java中如何访问redis。现在常用的客户端是jedis,具体的操作我也不想再写了，大家可以从这些方面去体验Redis的独特之处，我贴出网址。</p>

<p>&emsp;&emsp;一、丰富数据类型的支持。<a href="http://www.open-open.com/lib/view/open1385173126448.html">redis中各种数据类型对应的jedis操作命令 </a>.</p>

<p>&emsp;&emsp;二、对字符串的操作。<a href="http://blog.csdn.net/java2000_wl/article/details/8535486">redis &ndash; String字符串操作 </a>.</p>

<p>&emsp;&emsp;三、事务等特性。<a href="http://www.blogways.net/blog/2013/06/02/jedis-demo.html">Redis的Java客户端Jedis的八种调用方式(事务、管道、分布式…)介绍</a>.</p>

<p>&emsp;&emsp;四、其它的一些特殊用途，比如跨jvm主键生成器等。<a href="http://www.blogjava.net/masfay/archive/2012/07/03/382080.html">Jedis使用总结【pipeline】【分布式的id生成器】【分布式锁【watch】【multi】】【redis分布式】</a>.</p>

<p>&emsp;&emsp;大家要注意的是，大部分Jedis api的操作上传入的参数都是String或byte[],如果我们需要把对象放入redis中去，必须对对象进行序列化，而从redis中读出来又得反序列化，比如下面的代码：</p>

<p>``` java</p>

<p>tx.set(&ldquo;key_user1&rdquo;.getBytes(), SerializationUtils.serialize(u));</p>

<p>User u = (User)SerializationUtils.deserialize(jedis.get(&ldquo;key_user1&rdquo;.getBytes()));</p>

<p>```</p>

<p>&emsp;&emsp;其中SerializationUtils是由spring core提供的，你也可以使用apache工具包中提供的类似功能类，或都自己用对象流实现也是一样的。</p>

<p>&emsp;&emsp;另外，如果您的项目中使用spring框架，您可以使用<a href="http://projects.spring.io/spring-data-redis/#quick-start">spring-data-redis</a>，spring data redis提供了几个常用的redis客户端的封装，以在高层面抽像出统一的使用接口（其实相当于适配器），建议在spring项目中采用这种方式。</p>

<p>&emsp;&emsp;同时，taobao也开源了自己redis客户端<a href="https://github.com/taobao/tedis">tedis</a>，据说具有更好的性能和可用性，tedis还提供了object的高层api，使用起来更为方便。另外，taobao开源了很多的软件系统，对于中国的开源界来说是一件很好的事，相比腾讯这些自私的公司，品质自然不在一个档次，但阿里系统的开源源代码中似乎都不写什么注释说明的（比如druid连接池开源代码），也许是这些公司的牛人太忙了，也许是认为写了注释也没人会去看吧，呵呵。</p>

<p>&emsp;&emsp;好,redis的内容先简单介绍到这吧。</p>
]]></content>
  </entry>
  
</feed>
