<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javaEE | 刘江华的博客]]></title>
  <link href="http://yoursite.com/blog/categories/javaee/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-11-16T08:42:11+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一种报表实现设计方案]]></title>
    <link href="http://yoursite.com/blog/2011/09/15/report/"/>
    <updated>2011-09-15T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2011/09/15/report</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;报表是每一个MIS系统中的必有功能，我们可以通过一个软件产品中查询统计、报表功能是否丰富来评判一个软件产品的成熟度。报表数据对于客户的日常工作、决策有非常重要的作用，报表也是我们程序员必定要遇到的问题。</p>

<p>&emsp;&emsp;中国式的报表样式复杂，实现起来难度也比较大，而对于系统设计者来说，客户的某些特殊报表可能会影响到我们的系统设计（说具体点就是表结构、加余字段等方面）。</p>

<p>&emsp;&emsp;请看下面的这张报表，这张表的特点是表头、数据行全部是动态生成。表头是一个嵌套结构，由树状考评类别组成（动态生成），而第一列的单位也由参与本考评方案的单位得分生成，每一个类别的得分，是由该类别下所有的考评项最终得分累积得到（当然，上面的是我描述的一个简化流程，具体业务打分过程比这个要复杂）。</p>

<p><img src="/uploads/2011/09/1.jpg" title="系统报表样式一" alt="" /></p>

<p>&emsp;&emsp;上面这种类型的报表，相信很多人都碰到过，如何快捷地实现它呢？最常用的办法就是拼装出符合样式要求的html表格，比如说表头的生成，我们先调用业务方法，生成符合表头的数据结构（自关联的树状结构），使用页面语言（如JSTL，EL）生成出来，最终显示给用户，但问题在于每一行数据体要和表头上的每一列对应起来的代码实现比较复杂，这个过程相当考究一个程序员的逻辑思维能力，特别是跨行、跨列、以及行、列数据对应问题。</p>

<p>&emsp;&emsp;上面我所描述的实现方案是可行的，很多人也是这么在做，但存在的问题也是非常明显：报表的实现代码不好维护，页面上的展示更是复杂，如果要实现另一张样式差不多的报表，我们又得copy头一张报表的代码，进行相应的调整、修改，很多人也是这么在做。</p>

<p>&emsp;&emsp;一种改进的设计是以面向对象的思想来进行封装，比如下面的这张类图，就是上面这种类型报表的一种设计方案：我们将报表拆分成了表头与表行，表头由表头项组成，表行由数据单元格组成，我们把这些抽象成接口，并提供HTML版本的实现类。我们抽取出来的表格、表头、行对象都具有生成自身html代码的功能，并且还有很多辅助方法，这使得最终的代码很容易理解。</p>

<p><img src="/uploads/2011/09/2.jpg" title="报表类图设计" alt="" /></p>

<p>&emsp;&emsp;我们接下来的工作就是在service中，查询相应的业务数据来生成这个Report对象，你会发现生成Report的代码非常清晰、好理解。而façade中，页面中的实现就变得非常的简单，只需要调用service中的方法得到Report对象，之后通过generateReportCode()方法就得到了页面要显示的html代码。</p>

<p>&emsp;&emsp;分析上面的类图我们可以发现，报表对象就是一个聚合根（当然也是值对象），而下面的每一个子对象负责自身显示代码的生成，通过service，业务逻辑也得到了很好封装，这就是面向对象带来的好处。只不过，我们要设计很多的小对象来承担各自的职责。这让我想到delphi，pb中报表的超强设计能力，也不禁有些怀念那个年代。</p>

<p>&emsp;&emsp;当然，不同的报表风格会有不同的设计对象设计方案，不同的报表框加也会有不同的设计方案（比如：jFreeChart，jsperReport这种服务器端的报表生成框架，Highcharts、fusioncharts这类客户端报表框架户端的报表生成框架在设计上都会有所不同）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈富血模型]]></title>
    <link href="http://yoursite.com/blog/2011/08/31/domain/"/>
    <updated>2011-08-31T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2011/08/31/domain</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;省质监局考评系统二期工程已经启动，当前处于编码实现阶段，预计在一个半月内完成核心功能。</p>

<p>&emsp;&emsp;相对一期项目比较而言，二期业务需求比一期项目要复杂，因此，在概要设计阶段我就决定按照领域模型方式来实现代码。本文将对富血领域模型的设计、实现谈谈我个人的理解与看法，实际开发中出现的问题及经验，我会在二期工程结束后进行总结。</p>

<p>&emsp;&emsp;综观当前软件开发的潮流，失血模型仍是主流，至少90%以上的公司都采用失血模型。有句话叫“存在即是合理”，采用失血模型进行项目开发，有下面的一些好处：</p>

<p>&emsp;&emsp;1、项目的设计要求大大降低，只要找出实体对象就可以了（更有甚者直接将表结构拿来当对象用，对象中充斥着很多int型外键，这个有点太极端了）；</p>

<p>&emsp;&emsp;2、项目按照service，domain value object，dao分层，出service接口中的操作方法可以依照界面原型直接映射得到，设计变得很简单（更有甚者不进行这块的设计，由程序员在实现时自行添加，这种方式也未尝不可）；</p>

<p>&emsp;&emsp;3、 代码实现人员容易理解，上面提到的分层方式已经被大家所熟悉。新员工入职后，只需要讲明白ER模型、表结构，再结合界面、需求文档就可以立即投入开发，培训投入少，上手很快。</p>

<p>&emsp;&emsp;失血模型可以减少项目在设计阶段所花费的时间，降低开发难度及风险，缩短开发周期，失血模型似乎有很多优点，被业界广泛使用也不足为奇了。</p>

<p>&emsp;&emsp;但是，如果你做过项目的维护，你一定会深刻体会到这种方式带来的苦恼，毕竟一个项目80~90%时间都是在进行后期维护，最吃成本、最耗精力的也是维护。维护期可以把“曾经”的盈利“吃”回去，也可以把一个公司拖死。</p>

<p>&emsp;&emsp;因此，失血模型的缺点会在软件维护期暴露出来，越是业务复杂的项目越明显，其根本在于业务逻辑的封装上，主要有下面几点，看你是否有同感：</p>

<p>&emsp;&emsp;1、  没有一个更好的业务逻辑封装地点。业务可以封装到service中，也可以在controller中实现部分业务逻辑（如果项目是按模块分配给程序员实现，还没法约束程序员把业务逻辑代码写在什么地方）。业务逻辑“散落”在各个分层中，存在于代码中的各个脚落，自然是不好维护了。</p>

<p>&emsp;&emsp;2、  业务逻辑是采用面向过程的方式来实现。面向过程方式实现的程序代码不利于阅读和理解（当然可以通过重构出更小的方法缓解，但这不能从根本上解决问题），自然是代码后期不好维护了。</p>

<p>&emsp;&emsp;业务逻辑的面向过程化实现、业务职责不在相应的领域对象中，而软件在维护期又要反复阅读以前的代码以添加、修改功能，代码的可读性、可理解性不高，封装度不也不高，维护会变得非常的困难了。我曾经经过过一些这样的项目，后期的需求修改、功能添加，我只能硬着头皮理解前人的代码，在copy以前代码的基础上修改，吃尽了苦头，用“每天都在救火”来形容非常合适，我也在不断的思考：是否有一种更好的解决方案？</p>

<p>&emsp;&emsp;2004年前后，我在jdon上闲逛，看到“板桥里人”极力推荐的《领域驱动设计.软件核心复杂性应对之道》（简称DDD）一书，当时网上只有英文版本，迫不及待地download下来后读了几个章节，由于理论性太强，当时无法理解书中的内容。后来我又买了中文版的书，还是没能悟出更多的东西，这本书扔在角落里两年，最后将该书给了刘宁。</p>

<p>&emsp;&emsp;近两年来，我静下心来梳理以前的项目经验，使我的技术得到了很好的沉淀，再次翻开DDD电子版本，这次阅读的体会已经截然不同，很多地方深有同感。后来看了老大强力推荐的《pojo in action》一书，我的疑问都得到了解决，有种“豁然开朗”的感觉，也坚定了我以前的一些想法：领域驱动方式确实是一种非常好的项目开发方式（注：我现在还看到一些初学都跟风看《DDD》，《pojo in action》，我敢断言，收获甚微），业务逻辑写在领域对象中是最好、最自然的地方。</p>

<p>&emsp;&emsp;我画了一个简单的示意图，供大家参考：</p>

<p><img src="/uploads/2011/08/1.jpg" title="富血模型实现示意图" alt="" /></p>

<p>&emsp;&emsp;当然，使用DDD富血模型方式开发，会面临一些挑战，我们不可回避下面的一些问题，这许从失血、贫血模型的转给转型，这些问题会给你带来的不适应感：</p>

<p>&emsp;&emsp;1、  按DDD开发，首先是要根据对客户的需求、业务的了解，提炼并不断修正领域对象。对于每一个对象的取名，都要反复斟酌，努力做到和业务保持一致，并且通俗易懂（特别是在详细设计阶段翻译成英文时更是要注意，多查询英汉字典，选择最合适的翻译，当然，属性的取名也是一样）。</p>

<p>&emsp;&emsp;2、  根据对业务的理解，正确分配领域对象职责。每个对象做自己分内的工作，有些行为无法明确地分配到对象中时，就建立服务(service)对象，这点是和失血模型的本质区别，这里的service类不是失血模型中的service接口哦，大家要注意。</p>

<p>&emsp;&emsp;3、  仓储对象是用来分担领域对象的持久化职责的，是根据面向对象职责单一原则产生。仓储对象就是DAO对象，如果使用用通用DAO的话，会省去仓储设计的过程（但这样会在领域逻辑实现代码中暴露SQL相关的东西）。</p>

<p>&emsp;&emsp;4、  富血模型中事务边界的确定比较麻烦，我们引入了façade外观，调用者（比如：controller或远程客户）一律通过façade门面完成业务调用，事务边界就在façade中控制。Façade在这里有两个非常重要的作用：</p>

<p>&emsp;&emsp;一是事务边界就是这里，具体代码实现时通过spring aop管理事务，二是处理领域对象与持久层脱钩。如果领域对象不与持久层脱钩，调用者得到的是带有行为的对象，可能会误调用了里面的行为，脱钩后就不存在这个问题，因为调用行为已经无法持久化到数据库中（这似乎和我们在失血模型中广泛使用的openSessionInView有冲突哈）。</p>

<p>&emsp;&emsp;6、领域逻辑实现过程中需要使用仓储对象，因为我们使用了通用dao，所以可以声明一个领域对象超类，其中包含通用dao对象，通过spring的ApplicationContextAware接口完成注入，这样，无论是从数据库中实例化出来的对象，还是程序员new的领域对象，都可以访问仓储对象（如果是每个领域实体对象都有自己的仓储对象，则需要在每一个领域方法中传入仓储对象，设计起来有些麻烦，POJO In Action中就是采用的这种做法）。</p>

<p>&emsp;&emsp;7、想办法简化对象之间的关系，对象关系越简单越有利于系统的理解和实现，可以通过约束和抽取领域service方法来简化一对多、多对多关系。</p>

<p>&emsp;&emsp;8、用聚合根减少系统的复杂性，将领域对象划分到合适的逻辑包中，进一步增强系统的表达力，因些，在包的结构划分上，也和贫血模型有所不同，它不再是贫血模型中的service,vo,dao这样的扁平结构。下面是质监局二期中核心领域对象部分设计图，每个对象都有自己的行为职责，并建立了良好的包结构：</p>

<p><img src="/uploads/2011/08/2.jpg" title="质监局二期项目核心域对象分包图" alt="" /></p>

<p>&emsp;&emsp;9、DDD对设计人员和开发人员都有较高要求，如果设计人员没有理解到需求的核心、本质，将很难做出好的设计方案；如果开发人员没有理解领域对象，也无法进行开发。</p>

<p>&emsp;&emsp;DDD的设计与开发远远不止上面我提到的这些，并且这一块的水很“深”，我们只有通过在不同的项目中实践，把理论恰当地应用在合适的项目当中，切实为项目带来好处，这个是我们追求的终极目标。</p>

<p>&emsp;&emsp;“会道者一缕发丝牵大象，盲修者千钧铁棒打苍蝇”，应对软件核心复杂性之“道”，DDD是不二的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈解耦合在项目中的配置方式]]></title>
    <link href="http://yoursite.com/blog/2011/07/04/config/"/>
    <updated>2011-07-04T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2011/07/04/config</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;“高耦合、低内聚”是评判一个系统优劣的标准之一，作为一名合格的程序员，如何在实际的开发过程中让系统向这个标准靠拢，是我们要思考的问题。在系统的设计中“开闭原则”非常的重要，它是OOD的第一原则，在这个原则的实现中，我们一般会将系统中变化的部分进行抽象，将不变的东西与可能变化的东西分离开，这样，在不久的将来，系统发生变化，这个变化将不会对系统中设计为不变部分产生影响，系统相对来说是稳定的。</p>

<p>&emsp;&emsp;话又说回来，“变化”与“不变”只是相对的，不能“刻舟求剑”，也不能“杞人忧天”，“变化”与“不变”的把握，在需求分析和设计上都要依据项目经验来找到一个“平衡点”。</p>

<h2>一、设计上的考虑</h2>

<p>&emsp;&emsp;在设计上，我们将变化的部分会抽取出来放到接口（或抽象类）中，由具体的实现类负责实现，这样做最直接的好处是：软件系统中各个模块、层次之间不再依赖于具体而是依赖抽象，而抽象是稳定的。另一个原因是：代码实现会从AOP中获益（想想代理模式中必须要抽象接口哦），我曾经见过有些设计人员认为DAO（或 Service）的实现在某个特定项目中不再改变而将DAO（或 Service）的接口全部省去，让层次间直接依赖于实现类，这种方式不值得推荐，因为他忽略了AOP在项目中的作用。</p>

<h2>二、代码实现上的考虑</h2>

<p>&emsp;&emsp;在设计上做到了模块、层次间的解耦合，但是代码实现上往往会和具体实现产生依赖。比如代码：IUserService userService = new UserServiceImpl()将在代码级别产生和具体实现的依赖，而且是编译期依赖，如果我们更换实现类就得重新编译代码，当然，这种依赖对eclipse这种保存时即时编译的工具来说产生的影响可能不大，但对于c、c++这些语言来说可能非常的“恼火”（我还记得当年Delphi的“闪电编译”是如何捍卫Borland在编程领域的地位）。因此，我们希望在代码级别，最好不要产生对具体实现类的依赖。做法倒是很简单，我们把这种依赖关系放到外部的元数类型文件中描述，在程序运行时由第三方（一般是容器）读取配置信息并依据这些信息来维护、生成正确的对象依赖关系，这就是IOC/DI，有效果地解除了编译期依赖（耦合）问题。</p>

<h2>三、配置方式</h2>

<p><strong>1、xml文件</strong></p>

<p>&emsp;&emsp;将依赖信息写到第三方的配置文件中，xml文件肯定是首选。j2ee开源框架通常都是把配置文件写到 xml文件中，当依赖关系发生改变时，我们要做的仅仅是修改配置文件，这种方式已经被广大开发人员接受。</p>

<p>&emsp;&emsp;但经过众多的项目实践我们发现，当某项需求变更发生时，我们要修改代码，但往往要修改多处代码，比如在SSH项目中：一个需求更，带来领域对象的改变，紧接着是hbm文件的修改，再下来是业务代码修改，可能又会对spring配置文件中bean配置的修改，再接着对action代码修改，对struts的映射文件修改，又会引发action在spring中配置信息的修改。从这个修改“链式反应”中可以看出，项目在开发和维护期，程序员会反复对实现代码、配置文件进行修改，维护二者一致性以满足项目业务需求。“解耦合”是做到了，但程序员工作量没有减少，生产率并没有得到提高。</p>

<p><strong>2、注解</strong></p>

<p>&emsp;&emsp;以xml（properties）配置方式已遭到程序员的“反感”，相反，Anotation注解方式逐渐变得流行起来。Anotation方式是将配置信息直接写入源代码中，在编译时由编译器将这些信息写入class字节码文件（当然也可以选择不编译到class中），系统在运行时，框架通过反射机制获得配置信息，进行相应的行为控制。</p>

<p>&emsp;&emsp;我们可以看到，无论是xml配置方式还是Anotation配置方式，对于框架系统而言，只是配置信息存放的位置不一样而已，只要读到这些配置信息，框架的后续操作都是相同的。但对于程序员来说就很不一样了：首先是项目开发与维护时，只需要在一个地方进行修改（即源代码中），其次，配置的信息量至少减少了一半（这点你可以思考一下：注解在源代码中的位置是不是已经代表了注解所作用的对象）。</p>

<p>&emsp;&emsp;可能有人要提出反对意见了：“需求更改了，要改配置，还得修改源代码中的注解，还得重新编译，我们似乎又回到了以前的老路上”。确实如此，不过我们再想想，难道把配置信息写到xml文件中，需求改变了，你的项目不重新编译，系统不重新启动？你真的见过能够提供7*24小时不间断服务的系统？恐怕中国最赚钱的网游都还要在固定时段停机维护！</p>

<p>&emsp;&emsp;当然，注解用得过头了会“适得其反”，带来降低源代码可读性的弊端，我们可以看到mybatis中加入了注解功能，在dao源代码中通过注解嵌入大量的sql语句，看起来让人心里“发毛”（注：mybatis是ibatis的升级版本，核心类名和api都改了，但功能并没见得增强，最新版本spring都不支持mybatis，看来这种升级会流失用户的。另，想了解ibtaits的，可以查看我的《<a href="/blog/2011/06/30/ibatis/">ibatis使用荟萃</a>》一文）。</p>

<p>&emsp;&emsp;也许，生活就像走钢丝，我们不停的在寻找一个平衡点，重心时而偏左时而偏右，但我们都在会回归平衡，又走向下一个不平衡。前几年网页游戏逐渐受到网民的欢迎，这就是人们厌恶了庞大的客户端游戏的安装、更新之苦，网页游戏流行过为，大家又发现网页游戏的效果又大打折扣，现在，大家似乎又要回归到大客户端游戏中去了。项目开发也是如此，“开发效率”是不断追求的平衡点，项目配置方式的变化如此，架构、技术的选择也如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ibatis使用荟萃]]></title>
    <link href="http://yoursite.com/blog/2011/06/30/ibatis/"/>
    <updated>2011-06-30T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2011/06/30/ibatis</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;ibatis相对hibernate来说，是一个半自动化的ORM映射框架，它是在jdbc的基础上进行了有限的封装，网上有很多关于ibatis与hibernate的讨论、争议，我在这就不再去论述二者之间的优劣，下面，我从程序员开发的角度来看看ibatis的使用。</p>

<p>&emsp;&emsp;ibatis已经改名至mybatis，mybaits在动态sql配置、N+1查询方面有比大改进，其它方面改进不多，我觉得ibatis的老用户没有必要升级至mybaits，而且spring尚不支持mybaits（目前mybatis不得不自己提供spring插件）。</p>

<p>&emsp;&emsp;<strong>一、开发sql日志输出</strong></p>

<p>&emsp;&emsp;ibatis中配置日志输入，需要在log4j的properties文件中进行配置。
开发阶段我们将下面两个参数在日志文件中设置为 debug，即可看到详细的sql语句：</p>

<p><code>
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
</code></p>

<p>&emsp;&emsp;如果想看到参数和结果集中的具体数据，可将：</p>

<p><code>
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG
</code></p>

<p>&emsp;&emsp;在日志输出上，ibatis没有hibernate来得方便。</p>

<p>&emsp;&emsp;<strong>二、命名空间要启动</strong></p>

<p>&emsp;&emsp;在ibatis的配置文件中，我们一般都会把useStatementNamespaces=”true”（默认是没有启动的），对于大中型项目一定得这么做，大项目中sql语句块(statement)的重名将不可避免（注：mybatis中已经强制启动）。</p>

<p>&emsp;&emsp;<strong>三、关系映射</strong></p>

<p>&emsp;&emsp;对于领域对象来说关系映射是重点，这也是每一个ORM框架需要解决的问题，我们一起来看ibatis中的关系映射示例：</p>

<p>&emsp;&emsp;1、<strong> 一对一关系</strong>（配置片段为：老公和老婆）</p>

<p>``` xml
<typeAlias alias="Husbnad" type="com.my.domain.one2one.Husband"/>
<typeAlias alias="Wife" type="com.my.domain.one2one.Wife"/></p>

<p>  <resultMap id="HusbandResult" class="Husbnad"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;result property="age" column="f_age"/&gt;
&lt;result property="wife" column="pk_id" select="one2one.selectWifeByHusbandId"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>  <resultMap id="WifeResult" class="Wife"></p>

<pre><code>&lt;result property="id" column="pk_husband_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;result property="age" column="f_age"/&gt;
&lt;result property="husband" column="pk_husband_id" select="one2one.selectHusbandByWifeId"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>   <select id="selectHusbandById" parameterClass="int" resultMap="HusbandResult"></p>

<pre><code>select
 *
from t_husband
where pk_id = #id#
</code></pre>

<p>  </select></p>

<p>  <select id="selectHusbandByWifeId" parameterClass="int" resultMap="HusbandResult"></p>

<pre><code>select
 *
from t_husband
where pk_id = #id#
</code></pre>

<p>  </select></p>

<p>  <select id="selectWifeByHusbandId" parameterClass="int" resultMap="WifeResult"></p>

<pre><code>select
 *
from t_wife
where pk_husband_id = #id#
</code></pre>

<p>  </select>
```</p>

<p>&emsp;&emsp;2、<strong> 一对多关系</strong>（配置片段为：客户和订单）</p>

<p>``` xml
 <resultMap id="CustomerResult" class="Customer"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;result property="phone" column="f_phone"/&gt;
</code></pre>

<p>   <result property="orders" column="pk_id" select="one2many.selectOrderByCustomerId"/>
  </resultMap></p>

<p><select id="selectOrderByCustomerId" parameterClass="int" resultMap="OrderResult"></p>

<pre><code>select
  *
from t_order
where fk_customer_id = #customerId#
</code></pre>

<p></select>
```</p>

<p>&emsp;&emsp;3、<strong>多对多</strong>（配置片段为用户、用户组关系）：</p>

<p>``` xml
<typeAlias alias="Group" type="com.my.domain.many2many.Group"/>
  <typeAlias alias="User" type="com.my.domain.many2many.User"/></p>

<p>  <resultMap id="GroupResult" class="Group"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="groupName" column="f_name"/&gt;
&lt;result property="users" column="pk_id" select="many2many.getUsersByGroupId"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>  <resultMap id="UserResult" class="User"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="userName" column="f_name"/&gt;
&lt;result property="groups" column="pk_id" select="many2many.getGroupsByUserId"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>   <select id="selectGroupById" parameterClass="int" resultMap="GroupResult"></p>

<pre><code>select *
from t_group where pk_id = #id#
</code></pre>

<p>  </select></p>

<p>   <select id="getUsersByGroupId" parameterClass="int" resultMap="UserResult"></p>

<pre><code>select *
from t_user u left join  t_user_group ug
on u.pk_id = ug.fk_user_id where ug.fk_group_id =  #gid# 
</code></pre>

<p>  </select></p>

<p>  <select id="selectUserById" parameterClass="int" resultMap="UserResult"></p>

<pre><code>select *
from t_user where pk_id = #id#
</code></pre>

<p>  </select></p>

<p>   <select id="getGroupsByUserId" parameterClass="int" resultMap="GroupResult"></p>

<pre><code>select *
from t_group g left join  t_user_group ug
on g.pk_id = ug.fk_group_id where ug.fk_user_id =  #uid# 
</code></pre>

<p>  </select>
```</p>

<p>&emsp;&emsp;4、 <strong>继承映射</strong>（配置片段为动物父类，猫、狗子类）</p>

<p>``` xml
  <resultMap id="AnimalResult" class="Animal" ></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;discriminator column="f_type" javaType="int"&gt;
        &lt;subMap resultMap="CatResult" value="1"/&gt;
    &lt;subMap resultMap="DogResult" value="2"/&gt;
&lt;/discriminator&gt;
</code></pre>

<p>  </resultMap>
  <resultMap id="DogResult" class="Dog" extends="AnimalResult"></p>

<pre><code>&lt;result property="boneCount" column="f_bone"/&gt;
</code></pre>

<p>  </resultMap>
   <resultMap id="CatResult" class="Cat" extends="AnimalResult"></p>

<pre><code>&lt;result property="mouseCount" column="f_mouse"/&gt;
</code></pre>

<p>  </resultMap>
  <select id="selectAnimalById" parameterClass="int" resultMap="AnimalResult">
  select * from t_animal
  where pk_id = #id#
  </select>
```</p>

<p>&emsp;&emsp;selectAnimalById会根据f_type（1：猫、2：狗）的取值正确实例化子类类型。</p>

<p>&emsp;&emsp;5、<strong>多对一关系</strong>，自关联关系映射可以参照上面的写出，我不再贴出示例代码。</p>

<p>&emsp;&emsp;<strong>四、解决N+1查询问题</strong></p>

<p>&emsp;&emsp;ibatis中的一对一、一对多映射配置代码都存在查询N+1问题，何为N+1？比如一对一关系中：有10条老公数据，在执行selectAllHusabnds时，将会产生11条sql，一条是取husbnad集合的，另10条是加载husbnad中的wife对象的。</p>

<p>&emsp;&emsp;如果在业务中取到husbnad后不使用其中的wife对象，将造成不必要的加载（当然可以用延迟加载解决），如果用到wife系统将额外产生10条查询sql，在系统性能上也存在问题，因此，我们来看看ibatis 中如何解决这个问题。</p>

<p>&emsp;&emsp;1、<strong>一对一的N+1问题</strong>，可以用下面的配置代码解决：</p>

<p>``` xml
<resultMap id="HusbandResult" class="Husbnad"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;result property="age" column="f_age"/&gt;
&lt;result property="wife.id" column="pk_husband_id" /&gt;
&lt;result property="wife.name" column="w_name" /&gt;
&lt;result property="wife.age" column="w_age" /&gt;
</code></pre>

<p>  </resultMap></p>

<p>  <select id="selectHusbandById" parameterClass="int" resultMap="HusbandResult"></p>

<pre><code>select
 *, w.f_name as w_name, w.f_age as w_age
from t_husband  h, t_wife  w
where h.pk_id = w.pk_husband_id and h.pk_id = #id#
</code></pre>

<p>  </select>
```
&emsp;&emsp;我们把两张表关联查询后产生的结果集映射到resultMap中，减少了sql的查询，从而提高了系统性能。</p>

<p>&emsp;&emsp;2<strong>、一对多N+1</strong>也可采用类似的方法实现。</p>

<p>&emsp;&emsp;比如，客户和订单一对多关系的N+1方案的配置代码如下，使用了groupBy来指定按什么属性（注意是属性名，而非列名）分组：</p>

<p>``` xml
  <typeAlias alias="Customer" type="com.my.domain.one2many.Customer"/>
  <typeAlias alias="Order" type="com.my.domain.one2many.Order"/>
  <resultMap id="CustomerResult" class="Customer" groupBy="id"></p>

<pre><code>&lt;result property="id" column="pk_id"/&gt;
&lt;result property="name" column="f_name"/&gt;
&lt;result property="phone" column="f_phone"/&gt;
&lt;result property="orders" column="pk_id" resultMap="one2many2.OrderResult"/&gt;
</code></pre>

<p>  </resultMap>
 <resultMap id="OrderResult" class="Order"></p>

<pre><code>&lt;result property="orderID" column="pk_o_id"/&gt;
&lt;result property="name" column="f_o_name"/&gt;
&lt;result property="money" column="f_money"/&gt;
</code></pre>

<p>  </resultMap>
  <select id="selectAllCustomers" resultMap="one2many2.CustomerResult"></p>

<pre><code>select c.pk_id, c.f_name, c.f_phone,
o.pk_id as pk_o_id, o.f_name as f_o_name, o.f_money
from t_customer c
left join t_order o
on o.fk_customer_id = c.pk_id
</code></pre>

<p>  </select>
```</p>

<p>&emsp;&emsp;3、<strong>多对多的N+1问题</strong>，可以通过下面的配置解决：</p>

<p>``` xml
<typeAlias alias="Group" type="com.my.domain.many2many.Group"/>
  <typeAlias alias="User" type="com.my.domain.many2many.User"/></p>

<p>  <resultMap id="GroupResult" class="Group" groupBy="id"></p>

<pre><code>&lt;result property="id" column="pk_g_id"/&gt;
&lt;result property="groupName" column="f_g_name"/&gt;
&lt;result property="users" column="pk_g_id" resultMap="many2many.UserResult"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>  <resultMap id="UserResult" class="User" groupBy="id"></p>

<pre><code>&lt;result property="id" column="pk_u_id"/&gt;
&lt;result property="userName" column="f_u_name"/&gt;
</code></pre>

<p>  </resultMap></p>

<p>  <select id="selectAllGrups" resultMap="many2many.GroupResult" >
 select g.pk_id as pk_g_id, g.f_name as f_g_name,
  u.pk_id as pk_u_id, u.f_name as f_u_name
  from t_group g
  left join t_user_group ug
  on ug.fk_group_id = g.pk_id</p>

<pre><code>left join  t_user u 
on ug.fk_user_id = u.pk_id
</code></pre>

<p>  </select>
```</p>

<p>&emsp;&emsp;但是要注意的是，上面多对多配置代码中的resultMap并没有完整表达领域对象的关系，如果我们在UserResult中加入了resultMap=”many2many.GroupResult”，ibatis中将会出现死循环错误。如果要完整表达领域对象关系，还得在配置文件上想办法，比如：另外定义一个resultMap。
ibatis在查询的N+1问题上需要程序员意识到这个问题并且进行手工配置，这点在mybatis中得到了解决，mybatis引入了collection配置节点。</p>

<p>&emsp;&emsp;如果想立即加载而又不想出现N+1查询问题，就得用我在上面提出的一些配置办法。
当然，前提是你得对sql比较熟悉才行，我写sql就是弱项，复杂sql研究研究也写得出来，但是写完来后会很快忘记，下次遇到同类型的sql我还是去“研究”，呵呵，我有点“烦”sql哦，复杂sql别找我！</p>

<p>&emsp;&emsp;<strong>五、动态查询</strong></p>

<p>&emsp;&emsp;动态查询可谓是ibatis的亮点，ibatis的实现方式也非常优雅，请看下面的配置片段：</p>

<p>``` xml
<select id="selectAllCustomers"  parameterClass="Customer" resultMap="CustomerResult"></p>

<pre><code>select * from t_customer
&lt;dynamic prepend="where"&gt;
    &lt;isNotEmpty prepend="and" property="name"&gt;
        (f_name like #name#)
    &lt;/isNotEmpty&gt;
    &lt;isNotEmpty prepend="and" property="phone"&gt;
        (f_phone like #phone#)
    &lt;/isNotEmpty&gt;
&lt;/dynamic&gt;
</code></pre>

<p>  </select>
```</p>

<p>&emsp;&emsp;ibatis会根据传入对象中的条件，组合生成相应的查询语句，其实就是QBE，hibernate虽然也有类似功能，但比较弱，比如：对象中的多个复杂对象做为example的时hibernate无法解决。而mybaits在这一块更是改进很多，使用起来也更加的方便。</p>

<p>&emsp;&emsp;<strong>六、延迟加载</strong></p>

<p>&emsp;&emsp;延迟加载是所有ORM框架提高效率必用手段之一，ibatis中设置lazyLoadingEnabled=”true”，会延迟加载集合以及复杂对象类型（默认情况下就是延迟加载的，一般字节码增强也要打开，以进一步提高效率）。</p>

<p>&emsp;&emsp;<strong>七、缓存的应用</strong></p>

<p>&emsp;&emsp;从底层来看，java通过JDBC访问数据库应该是最高效的，任何ORM框架都没有直接通过底层操作来得快，因此，ORM提速的另一个途径就是使用缓存， ibatis可以使用多种缓存框架，而且配置灵活。我们用cacheModel节点定义一个缓存区域。</p>

<p><code>xml
&lt;cacheModel type="MEMORY" id="your_cache_range_name"&gt;
&lt;/cacheModel&gt;
</code></p>

<p>&emsp;&emsp;某个sql statement 需要缓存结果时，只需用cacheModel属性指定缓存区域名称即可，例如：</p>

<p><code>xml
&lt;select id="selectDomainObjectById" parameterClass="someType" resultMap="DomainObjectResult" cacheModel=" your_cache_range_name "&gt;
</code></p>

<p>&emsp;&emsp;<strong>八、自动化生成工具</strong></p>

<p>&emsp;&emsp;1、abator插件</p>

<p>&emsp;&emsp;你可以用abator for eclipse plugin来帮助你从表生成对象、xml映射代码、 CRUD的配置代码、DAO代码（还可选择生成spring集成后风格的DAO代码），abator的配置代码不再贴出，自己上网搜一下。</p>

<p>&emsp;&emsp;另，abator生成的QBE代码可以研究一下，可用来解决多条件组合查询问题。</p>

<p>&emsp;&emsp;2、mybaits generator工具</p>

<p>&emsp;&emsp;此工具在命令行下运行，也需要预先编辑好配置文件，使用方法请google一下。</p>

<p>&emsp;&emsp;自动化生成工具会为每个对象都生成相应的dao代码，但如果你的项目中使用的是通用dao的架构（请参阅我的《<a href="/blog/2010/11/01/p4/">四种持久层设计方案比较</a>》一文），ibatis技术框架也是适用的。</p>

<p>&emsp;&emsp;<strong>九、项目中的决择</strong></p>

<p>&emsp;&emsp;ibatis是一个“半自动化”的框架，使用起来自然没有“全自动化”的方便，也正是因为“半自动化”的原因，ibatis才拥有自己独特的适用场合和表演舞台。</p>

<p>&emsp;&emsp;在项目中进行底层技术选型时，我认为有存在下面的因素可优先选择ibatis：在遗留系统现在数据基础上进行开发；公司开发人员非常熟悉且喜欢写sql （有些老程序员更习惯以数据库表为中心的开发模式）；项目的其它非功能性需求。除些之外，请选择更加OO的ＯＲＭ映射框架。</p>

<p>&emsp;&emsp;我曾经看过好几个公司ibatis开发的项目，对象和表结构都是一一对应（更有甚者把表外键都建成了对象属性），对象关系几乎不存在，也就没有了领域建模的概念。从我上面写的一些配置代码也可以看出，ibatis在处理一对一、一对多、多对多查询（主要是N+1）上都这么复杂，更不用说一对一、一对多、多对多的增、删、改操作了（请想想hibernate中的cascade，inverse带来便捷），也就是说，对象之间的所有关系要程序员手工书写sql去维护，这对于增、删、改操作还是非常麻烦的，一些级联操作还得在业务实现代码中主动调用，增加了业务的复杂性。</p>

<p>&emsp;&emsp;也许，在ibatis的项目中将对象和表结构进行一一映射是一种最方便、最快捷的方法，但对于喜欢OO建模的人来说，可能无法接受。项目中如果用表结构对象代替领域对象，只会增加项目实现复杂性和后期维护成本。</p>

<p>&emsp;&emsp;话又说回来，Hibernate、JDO这些ORM框架可以较好地支持对象透明持久化，但学习成本相对来说也要高一些，也正是这些原因让很多项目经理放弃了这些技术。还有人说hibernate性能低下，项目失败的风险很大，我认为这些人并没有全面、深入地掌握Hibernate，比如：对于性能低下的部分，你可以通过hibernate执行native sql解决，甚至存储过程。还有一个是技术转型的原因，对于从C/S转到B/S的老程序员来说，我很清楚OO思想和以表结构为中心的思想之间的冲突，但只你要突破了，你才会达到另一个认识层次，才能体会到其中的好处。</p>

<p>&emsp;&emsp;这两天在搭建省质监督局二期项目的领域模型，项目小组中的主力程序员几次让我想发火。因为我和他一谈到某项具体需要，他总是提出表结构、冗余、外键，提到后期如何操作表实现功能，而且我必须要努力说服他，毕竟后期的代码是由他们去实现的。此人是一个很执着的人，只有自己认可的、领会的才会按照方案去执行，呵呵。我就是要引导他，逐步建立起一个合理的、双方都认可的域模型。</p>

<p>&emsp;&emsp;最后，希望本文对想深入了解、学习ibatis的人有用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何处理项目中的数据验证]]></title>
    <link href="http://yoursite.com/blog/2011/06/16/validation/"/>
    <updated>2011-06-16T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2011/06/16/validation</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;有人说，所有的程序本质上都是“输入->处理->输出”，仔细想来确实如此。话又说回来，你输入的是垃圾，输出的肯定也是垃圾，你输入的是“炸 弹”，面临的将是系统崩溃、瘫痪，也就无法得到预期的结果。因此，数据的验证，在任何一个项目中，都是不可回避、不可忽视的问题。</p>

<p>&emsp;&emsp;下面，我还是按web应用程序的分层结构和大家探讨一下数据的验证实现的一些问题。</p>

<p>&emsp;&emsp;<strong>一、表现层：</strong>
表现层是接受客户数据输入的来源，第一道数据检验“关卡”应该也在这里。</p>

<p>&emsp;&emsp;<strong>A、 客户端的验证</strong>
web系统客户端采用的方法是：用js对客户在浏览器中输入的数据进行验证，这些验证通常不包括业务方面的内容，比如：字段是否已经填写，字段是否为数字，字段是否为email，字段长度是否满足要求，是否是一个合法的身份证号码，是否是合法的日期等，如果结合正则表达式，则可以实现一些更为复杂的数据验证功能。</p>

<p>&emsp;&emsp;客户端有时还得借助ajax实现一些业务验证，比哪：用户注册功能中，就可以利用ajax及时检测用户输入的登录名是否已经重复等，这类型的验证已经具有了业务逻辑的影子，类似这种情况的简单业务验证是允许在客户端验证中出现的。</p>

<p>&emsp;&emsp;客户端验证通常采用一些验证框架提高开发效率，比如jQuery中就有一些很不错的验证插件，不仅验证条件的书写很简单，而且验证没有通过的提示信息更加的友好。我推荐jQuery validate，这个插件的使用我会在另一文件中写出。</p>

<p>&emsp;&emsp;当然，客户端的js验证可以被某些不怀好意的人轻易绕过（比如禁用js或用特殊工具提交），因此，真正的验证还得在服务器上做，客户端的验证，就全当做为提高系统人机交互效率而存在。
如果你将flex，java swing这类技术应于于表现层，原理同上，我不再复述。</p>

<p>&emsp;&emsp;<strong>B、服务器端的验证</strong>
提到表现层，MVC模式肯定要说说。我们知道，几乎所有的MVC框架，都提供了数据验证实现，这种数据验证功能是在服务器端实现的（其实就是服务器端的验证了），因些它不会被恶意绕过。
validate验证框架的原理是把通用的验证逻辑代码提取出来，将应用程序界面输入字段元素的验证规则写到配置文件（xml）中去，并由框架根据配置的验证规则调用验证逻辑完成验证，如果验证不通过，将跳转到指定的出错显示页面，控制器（controller，即action）中的业务调用代码将不会被执行。</p>

<p>&emsp;&emsp;使用验证框架的优点是统一、规范，程序员手工验证代码移走后（变成了通用的验证代码），控制器中的代码将变得非常的简洁，这有利于系统维护。当然，缺点是引入了新的框架，系统和验证框架产生了耦合（不过，这点对于大型项目来说并不存在问题）。</p>

<p>&emsp;&emsp;我认为，小系统或者表单验证字段不多的情况下，没有必要引入验证框架，程序员直接在 controller中加入验证代码即可，即手工书写if else，或者你也可以把你的验证代码重构一下，提出一个工具类来。</p>

<p>&emsp;&emsp;如果一个表单中验证段过多，这种方法就不是太好。自己写验证代码还有一个缺点是数据回填问题（就是将不合法信息提示给用户的同时，用户以前在页面上输入的数据都要回填显示，以避免用户从新来过）比较麻烦，需要程序员专门来处理这种情况（其实，不同的MVC框架也是借助于自定义页面标记来实现的）。如果有了客户端的验证，数据回填显示似乎并不存在问题，呵呵。</p>

<p>&emsp;&emsp;<strong>二、业务层：</strong></p>

<p>业务层的数据验证，主要是针对输入数据在业务逻辑中是否存在问题，也就是说，表现层和业务层的数据验证，应该各自有各自的职责，表现层偏向于数据是否为空等简单的判断，几乎不会和数据库发生交互，而业务层主要是针对业务逻辑的数据合法合理性判断。</p>

<p>&emsp;&emsp;说起来简单，做起来并不容易。在实际的项目中，我们很有可能将一些业务数据合理性检测放到controller中去做了。</p>

<p>&emsp;&emsp;举个例子：新用户注册功能中，需要检测用户名是否重复，而检测用户名是否重复要和数据库交互，我看见很多人都是在controller中去调用service中一个叫checkUniqueRegUserName的方法，如果重复将直接跳转出错页面。这种做法个人认为不是太好，检测用户名是否重复属于业务范畴。</p>

<p>&emsp;&emsp;如果你把这个检测过程封装到保存注册用户方法中，通过异常机制来检测注册过程中发生的故障，也许更合理些。你可以定义这么一个方法 public void register(User user) thorws RegException。</p>

<p>&emsp;&emsp;有了这个方法，我们的程序代码结构将更加的清晰。页面表单输入的User数据合法性检测由验证框架或手写if else来向用户报告，User的名称是否重复由register方法向调用者报告，职责更加明确了，也更符合“职责单一原则”。</p>

<p>&emsp;&emsp;当然，哪些是普通合法性验证？哪些是业务逻辑验证？对这两者的划分不同，你的验证代码在服务器端写的代码将不一样，我认为只要和数据库交互或和其它领域对象协作才能得到的结果都是属业务逻辑验证。</p>

<p>&emsp;&emsp;<strong>三、持久层</strong></p>

<p>&emsp;&emsp;持久层也可以对数据进行验证，有两个验证地点，一个是在ORM框架中，二是用数据库自身的约束机制。</p>

<p>&emsp;&emsp;ORM映射框架，比如说hiberante，就可以配置column的字段类型，是否可以为空，长度是多少等，如果在保存或修改的过程中，数据不符合hbm配置要求，hibernate框架会发现这个错误。
数据库中可以通过设计字段类型，是否可以为空、外键、主键等，通过数据库自身的约束机制来拒绝非法的数据。</p>

<p>&emsp;&emsp;持久层的数据验证已经属于最终的数据验证了，我们的数据验证策略应该是：尽量提前验证。如果你可以确保前阶段数据已经经过了严格的验证，持久层这边可以安全放行，不做检测。
经常有人问我项目中数据库这边的外键约束，非空约束是否要加上，我一般采用的策略是项目开发阶段不加（给程序员开发带来方便），项目上线后根据情况来看，加上是最好的了（可访止DBA误操作引入非法数据）。</p>

<p>&emsp;&emsp;<strong>总结：</strong></p>

<p>&emsp;&emsp;1、 客户端用js框架帮助我们实现验证；</p>

<p>&emsp;&emsp;2、 服务器端通过MVC验证框架帮助我们实现（请看我的《都spring mvc了（二）》，spring mvc 是如何实现的验证的）；</p>

<p>&emsp;&emsp;3、 分清哪些由业务方法去做的验证，哪些是由普通的验证；如果前面做好了，持久层验证可以省去。</p>
]]></content>
  </entry>
  
</feed>
