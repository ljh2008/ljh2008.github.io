<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 刘江华的博客]]></title>
  <link href="http://yoursite.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-11-16T08:42:11+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[kindeditor在线编辑器使用-附上传本地图片实现方法]]></title>
    <link href="http://yoursite.com/blog/2012/11/05/king-editor/"/>
    <updated>2012-11-05T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2012/11/05/king-editor</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;在线编辑器在网站后台管理系统中比较常见，特别是内容发布系统，下面贴出一个简单demo大家参考，先看界面：</p>

<p><img src="/uploads/2012/10/4.jpg" title="在线编辑界面" alt="" /></p>

<p>&emsp;&emsp;前端代码：</p>

<p>``` html
<link rel="stylesheet" href="<%=path%>/css/skins/default.css" type=&ldquo;text/css&rdquo; media=&ldquo;screen&rdquo; /></p>

<script type="text/javascript" src="<%=path%>/js/jquery-1.8.2.js"></script>


<script type="text/javascript" src="<%=path%>/js/kindeditor-min.js"></script>


<p><script type="text/javascript">
$(function(){</p>

<pre><code>KE.show({
    id : 'content',
    imageUploadJson:"&lt;%=path%&gt;/news!uploadImg.do",
    cssPath : './index.css'
});
</code></pre>

<p>});
```</p>

<p>&emsp;&emsp;后台服务器处理代码（struts2代码）：</p>

<p>``` java</p>

<pre><code>/**
 * 上传的文件
 */

 private File imgFile;
/**
 * 文件名称
 */
private String imgFileFileName;

public void uploadImg() throws Exception {

    // 对上传的文件进行处理（重命名，保存到合适的位置）
    // 假如我们要存放在项目中的soft_upload目录下，那么，我们要先取得这个目录在实际服务器上的位置
    String upload_dir = ServletActionContext.getRequest().getSession()
            .getServletContext().getRealPath("soft_upload");

    // 取文件扩展名
    String extName = imgFileFileName.substring(imgFileFileName
            .lastIndexOf("."));
    // 随机生成新的文件名
    String newFileName = UUID.randomUUID().toString() + extName;

    FileUtils.copyFile(imgFile, new File(upload_dir + File.separator
            + newFileName));

    Map result = new HashMap();
    result.put("error", 0);
    result.put("url", "soft_upload/" + newFileName);

    HttpServletResponse resp = ServletActionContext.getResponse();

    ObjectMapper om = new ObjectMapper();
    om.writeValue(resp.getWriter(), result);

}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;其中有些参数是kindeditor约定的：</p>

<p>&emsp;&emsp;如：imgFile是上传文件的控件名称</p>

<p>&emsp;&emsp;error是json返回的错误状态码，url是服务器上的文件名称等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strut2文件下载及多文件上传示例]]></title>
    <link href="http://yoursite.com/blog/2012/10/31/struts2-fileupload-muti/"/>
    <updated>2012-10-31T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2012/10/31/struts2-fileupload-muti</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;入门级技术文章，为了避免每回都要重写演示，以后就请童鞋门自己来看吧。</p>

<p>&emsp;&emsp;先看表单：</p>

<p>``` html
<form action="<%=path%>/user!addUser.do" method=&ldquo;post&rdquo; enctype=&ldquo;multipart/form-data&rdquo;>
用户昵称:<input type="text" name="regUser.nickName"/><br/></p>

<div>选择用户照片：<input type="file" name="myphoto"/><a href="#" class="addNewPhoto">再加一张照片</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#" class="deletePhoto">删除</a></div>


<p><input type="submit" value="新增">
</form>
```</p>

<p>&emsp;&emsp;页面效果如下图：</p>

<p><img src="/uploads/2012/10/1.jpg" title="struts2多文件上传界面" alt="" /></p>

<p>&emsp;&emsp;加一个新的上传及删除一个上传选框js代码如下，请加到ready事件中：</p>

<p>``` js
$(&ldquo;.addNewPhoto&rdquo;).click(function(){</p>

<pre><code>    $(this).parent().clone(true).insertAfter($(this).parent());
});
$(".deletePhoto").click(function(){
    $(this).parent().remove();
});
</code></pre>

<p>```</p>

<p>&emsp;&emsp;服务器端处理代码：</p>

<p>``` java
public class UserAction {</p>

<pre><code>// 用于接收注册用户的属性
private RegUser regUser;
// 用于接收用户的照片
private File[] myphoto;
// 用于接收原始文件名
private String[] myphotoFileName;


public void addUser() throws Exception {

    for (File f: myphoto) {
        System.out.println(f);
    }


    for(String n : myphotoFileName) {
        System.out.println(n);
    }
</code></pre>

<p>&hellip;&hellip;</p>

<p>```
&emsp;&emsp;如果你要处理一个上传上来的文件，核心代码如下：</p>

<p>``` java</p>

<pre><code>    // 假如我们要存放在项目中的soft_upload目录下，那么，我们要先取得这个目录在实际服务器上的位置
    String upload_dir = ServletActionContext.getRequest().getSession()
            .getServletContext().getRealPath("soft_upload");

    // 取文件扩展名
    String extName = myphotoFileName.substring(myphotoFileName
            .lastIndexOf("."));
    // 随机生成新的文件名
    String newFileName = UUID.randomUUID().toString() + extName;

    FileUtils.copyFile(myphoto, new File(upload_dir + File.separator
            + newFileName));

    // 最后数据库中保存的路径是一个互联网站路径
    regUser.setPhotoPath("soft_upload/" + newFileName);


     //调用业务方法进行后续操作
</code></pre>

<p>```</p>

<p>&emsp;&emsp;文件下载部分核心代码：</p>

<p>``` java</p>

<pre><code>    // 假如我们要存放在项目中的soft_upload目录下，那么，我们要先取得这个目录在实际服务器上的位置
    String upload_dir = ServletActionContext.getRequest().getSession()
            .getServletContext().getRealPath("");

    String imageInDb = "soft_upload/b801a563-f307-4804-a7e3-4e34665af7b3.jpg";

    String fullFileName = upload_dir + File.separator + imageInDb.replace("/", File.separator);

    //把文件给用户发回去
    HttpServletResponse resp = ServletActionContext.getResponse();

    resp.addHeader("Content-Disposition","attachment;filename=" + new String("陈冠希.jpg".getBytes("gb2312"),"iso8859-1"));

    resp.getOutputStream().write(FileUtils.readFileToByteArray(new File(fullFileName)));
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动完成代码实现（jquery ui版）]]></title>
    <link href="http://yoursite.com/blog/2012/10/31/auto-complete/"/>
    <updated>2012-10-31T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2012/10/31/auto-complete</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;有人要用，写了一个演示代码，界面效果如下：</p>

<p><img src="/uploads/2012/10/2.jpg" title="struts2多文件上传界面" alt="" /></p>

<p>&emsp;&emsp;客户端代码，用jquery ui实现：</p>

<p>``` js
$( &ldquo;#myquery&rdquo; ).autocomplete({</p>

<pre><code>           source:function( request, response){
               $.ajax({
                   url:"news!autoComplete.do",
                   type:"POST",
                   data:{queryName:request.term},
                   dataType:"json",
                   success:function(data){
                       response($.map(data,function(e){
                           return {
                               label:e.title
                           }
                       } ));

                   }
               });
           }
       });
</code></pre>

<p>```</p>

<p>&emsp;&emsp;网页上：</p>

<p>``` html</p>

<p>输入查询条件：<input type="text" name="query" id="myquery"/><br/></p>

<p>```</p>

<p>&emsp;&emsp;后台：</p>

<p>``` java</p>

<p>//前端输入的查询参数</p>

<pre><code>private String queryName;

/**
 * 自动完成
 */
public void autoComplete() throws Exception {

    //得到响应
    HttpServletResponse response = ServletActionContext.getResponse();
    response.setCharacterEncoding("utf-8");

    List&lt;News&gt; news = ns.getNewsByTitle(queryName);

    ObjectMapper om = new ObjectMapper();
    String json_str = om.writeValueAsString(news);

    response.getWriter().println(json_str);

}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;业务层：</p>

<p>``` java</p>

<p>public List getNewsByTitle(String title) {</p>

<pre><code>    return baseDao.queryEntitys("from News n where n.title like ?", new Object[]{"%" + title + "%"});
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超链接传递中文参数解决之法]]></title>
    <link href="http://yoursite.com/blog/2012/10/30/url-utf8/"/>
    <updated>2012-10-30T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2012/10/30/url-utf8</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;办法很多，下面介绍一种更为通用，最有效的方式：</p>

<p>&emsp;&emsp;示例页面，其中包含post与get方式的提交：</p>

<p>``` html
<a class="need_change" href="myajax!getChineseWord.do?name=中文">中文测试</a></p>

<pre><code>&lt;form action="&lt;%=path%&gt;/myajax!getChineseWord.do" method="post"&gt;
    姓名：&lt;input type='text' name="name" value="中文"&gt;&lt;br&gt;
    &lt;input type="submit" value="post中文" id="login_btn"&gt;
&lt;/form&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;对于超链接中的中文，使用encodeURI编码，我们在jquery的ready中去做这件事：</p>

<p>``` js
$(document).ready(function(){</p>

<pre><code>  $(".need_change").each(function(){
      $(this).attr("href", encodeURI($(this).attr("href")));
  });
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;服务器端action中，需要进行转码：</p>

<p>``` java
if (&ldquo;ISO-8859-1&rdquo;.equals(StringUtil.getEncoding(name))) {</p>

<pre><code>     name = new String(name.getBytes("ISO-8859-1"),"UTF-8");
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;注：StringUtil.getEncoding这个方法将返回字符串的编码集格式，代码是网上copy的，现贴出该方法：</p>

<p>``` java
/**</p>

<pre><code> * 判断字符串的编码
 * 
 * @param str
 * @return
 */
public static String getEncoding(String str) {
    String encode = "GB2312";
    try {
        if (str.equals(new String(str.getBytes(encode), encode))) {
            String s = encode;
            return s;
        }
    } catch (Exception exception) {
    }
    encode = "ISO-8859-1";
    try {
        if (str.equals(new String(str.getBytes(encode), encode))) {
            String s1 = encode;
            return s1;
        }
    } catch (Exception exception1) {
    }
    encode = "UTF-8";
    try {
        if (str.equals(new String(str.getBytes(encode), encode))) {
            String s2 = encode;
            return s2;
        }
    } catch (Exception exception2) {
    }
    encode = "GBK";
    try {
        if (str.equals(new String(str.getBytes(encode), encode))) {
            String s3 = encode;
            return s3;
        }
    } catch (Exception exception3) {
    }
    return "";
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[excel文件导出代码]]></title>
    <link href="http://yoursite.com/blog/2012/10/30/poi-excel/"/>
    <updated>2012-10-30T15:18:00+08:00</updated>
    <id>http://yoursite.com/blog/2012/10/30/poi-excel</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;经常有人问excle文件导出代码实现，现贴出示例代码(struts2,poi)，想看的童鞋请参考：</p>

<p>``` java
 //业务调用，得到要导出的数据</p>

<pre><code>    Page newsPage = ns.getNewsByPage(1, 10, 1, "readCount");
    List&lt;News&gt; news = newsPage.getData();

    //内存中生成excle文件
    HSSFWorkbook wb = new HSSFWorkbook();
    HSSFSheet sheet = wb.createSheet();


   //生成标题，当然，你可以设定格式
    HSSFRow header = sheet.createRow(0);
    header.createCell(0).setCellValue("新闻id");
    header.createCell(1).setCellValue("新闻标题");
    header.createCell(2).setCellValue("新闻内容");


    //生成数据行
    for (int i = 0; i &lt; news.size(); i++) {

        News temp_news = news.get(i);

        HSSFRow row = sheet.createRow(i + 1);

        row.createCell(0).setCellValue(temp_news.getId());
        row.createCell(1).setCellValue(temp_news.getTitle());
        row.createCell(2).setCellValue(temp_news.getContent());

    }
    //得到响应
    HttpServletResponse response = ServletActionContext.getResponse();

    response.setHeader("Content-Disposition","attachment; filename="
            + new String("我的新闻列表.xls".getBytes("GB2312"),"iso-8859-1"));

    OutputStream os = response.getOutputStream();
    //发回响应
    wb.write(os);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
