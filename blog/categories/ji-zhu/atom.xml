<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：技术 | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2013-11-28T09:11:54+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的独立博客再次开放]]></title>
    <link href="http://yanyaner.com/blog/2013/11/26/my-blog/"/>
    <updated>2013-11-26T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/11/26/my-blog</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;有一天，突然看到山子在群里发了他的个人博客地址，感觉还不错，就多问了几句：</p>

<p>```</p>

<pre><code>冰雨 9:14:05 
山子，你的github博客，是怎么搭建的呢
冰雨 9:14:11 
搞得非常不错呢
李山 9:14:49 
就是自己做的静态页面，传到gitHub上了，gitHub  pages可以解析页面的
冰雨 9:15:11 
它支持什么？
冰雨 9:15:18 
html,php?
冰雨 9:15:22 
jsp支持否？
冰雨 9:15:26 
mysql呢？
李山 9:15:36 
只支持静态的页面
冰雨 9:16:02 
你的博客的页面，都是静态的？没有数据库？
李山 9:16:49 
没有的啊
冰雨 9:17:23 
那就是存手工操作，在本地编辑好，发布上去。
冰雨 9:17:32 
它的空间，最大是多少呢？
冰雨 9:17:49 
也没看到有广告，难道是存免费的？
李山 9:17:55 
空间不限制的
李山 9:18:20 
github就是免费的啊，可以随便整
冰雨 9:19:12 
我在博客上给你留言,是保存不上的吧？
李山 9:19:24 
保存的
李山 9:19:49 
评论是用的其他的插件
冰雨 9:20:01 
哦。存在哪的？ 
李山 9:20:48 
这个我是用的多说的插件，是存在多说的服务器上的
李山 9:21:00 
这个插件有好多的
冰雨 9:21:09 
哦，我看到了的。
冰雨 9:21:27 
那你本地，是用git上传的吧
李山 9:21:47 
嗯，做好页面直接传到gitHub上就行了
冰雨 9:23:20 
哦，那还不错
李山 9:24:26 
刘老，你也做一个啊
冰雨 9:26:04 
你的网页模板，用的是那个呢？
冰雨 9:26:27 
应该在本地安装一个cms，然后生成html ,再传上去
冰雨 9:26:33 
这样，是不是更好一些？
李山 9:27:31 
不用的，gitHub支持jekyll模版，可以用markdown做页面传上去后可以自动解析
冰雨 9:29:56 
哦，这么复杂
冰雨 9:30:05 
看来，要向你多学习才是
</code></pre>

<p>```
&emsp;&emsp;我以前的个人博客，是搭建在linode VPS上的，但因为后来的一些原因没再续费，博客也就停了。</p>

<p>&emsp;&emsp;再后来，我的博客都放在了百度空间上，虽然百度空间各种体验都很差，但也只好将就着，忍着。</p>

<p>&emsp;&emsp;当我从山子那了解到github上可以免费托管博客，在网上搜了一下，立即搭建了本地环境（说实话，在windows下搭建octopress还真麻烦，各种出错，还好，都一一解决了），将百度空间上的文章全部转到了新的博客系统上。</p>

<p>&emsp;&emsp;转载几年前的老文章时才发现，近年来写的博客越来越少，而且含金量也越来越低。近期的博客更多的是关注代码、技术，而几年前的更加关注的是项目管理、架构。看来今后还得继续发表些高质量的东西，呵呵。</p>

<p>&emsp;&emsp;学习，生活，工作，是人生的组成部分，哪一部分做不好，人生都将存在遗憾。这个新的博客也将记录更多给与工作、技术无关的内容，更多个人生活的内容。</p>

<p>&emsp;&emsp;最后，欢迎各位，有空多来<a href="http://yanyaner.com">yanyaner.com</a>上看看，发现对你有帮助的东西，也希望多多交流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步步教你用angular.js实现一个基本应用---第五部分]]></title>
    <link href="http://yanyaner.com/blog/2013/09/28/angular-js5/"/>
    <updated>2013-09-28T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/09/28/angular-js5</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;我们再来看页面中的标签。</p>

<p>&emsp;&emsp;首页，<strong>index.html</strong>,在这个页面中，我们：</p>

<p>&emsp;&emsp;1、使用ng-app来指明，整个页面使用的model名称。</p>

<p>&emsp;&emsp;2、ng-view标签，指名所有子页面加载显示的位置。</p>

<p>&emsp;&emsp;3、最后引入我们需要的js文件，大家要注意依赖关系。（jquery-1.7.2.min.js不是必须的，因为angular也可以完成dom操作，只不过书写起来没有jquery简洁）</p>

<!--more-->


<p>``` html index.html</p>

<p>&lt;!DOCTYPE html>
<html ng-app="myApp">
<head></p>

<pre><code>&lt;title&gt;&lt;/title&gt;
&lt;link rel="stylesheet" href="http://yanyaner.com/css/bootstrap.min.css"&gt;
&lt;link rel="stylesheet" href="http://yanyaner.com/css/my.css"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div ng-view&gt;&lt;/div&gt;
</code></pre>

<p></body></p>

<script src="js/lib/jquery/jquery-1.7.2.min.js"></script>


<script src="js/commons.js"  ></script>


<script src="js/lib/angular/angular.js"></script>


<script src="js/services.js"></script>


<script src="js/controllers.js"></script>


<script src="js/app.js"></script>


<p></html>
```</p>

<p>&emsp;&emsp;<strong>main.html</strong>，也是用户列表页面：</p>

<p>``` html main.html</p>

<div class="container" ng-init="getState();pageFun(userService.pno);">
    <div id="welcome"><h3>欢迎<span id="who">{{loginName}}</span>登录成功！<span><a href="#" ng-click="logout()">退出系统</a></span></h3></div>
    <div class="row"><span>用户名称：</span><input type="text"  ng-model="userService.q_name" class="input-medium search-query">
        <button id="btn_query" class="btn" ng-click="pageFun(1)">搜索</button>
    </div>
    <div style="margin-top: 15px;" class="row"><a  ng-href="/to_adduser"  class="btn">新增</a>
        <a class="btn" ng-click="deleteUsers()">批量删除</a></div>
    <div class="row">
        <div class="span12">
            <table class="table">
                <tr>
                    <th>选择</th>
                    <th>用户id</th>
                    <th>登录名</th>
                    <th>姓名</th>
                    <th>出生日期</th>
                    <th>操作</th>
                </tr>
                <tbody id="users">
                <tr ng-repeat="user in users">
                    <td><input value="{{ user._id }}" class="uid_c" type="checkbox"></td>
                    <td>{{ user._id }}</td>
                    <td>{{ user.loginCode }}</td>
                    <td>{{ user.userName }}</td>
                    <td>{{ user.birthDay | date:'yyyy年MM月dd日'}}</td>
                    <td class="row_op">
                        <a href="user/{{ user._id }}">查看</a>
                        <a href="to_modifyuser/{{ user._id }}">修改</a>
                        <a href="#" ng-click="deleteUser(user._id)">删除</a>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div style="margin-top: 15px;" class="row">
        <div id="page_info" class="span4">{{ page.pno }}/{{ page.pages }}  共{{ page.rows }}条记录</div>
        <div class="span5 page offset3">
            <a  ng-click="pageFun(page.f_no)" >首 页</a>
            <a  ng-click="pageFun(page.p_no)">上一页</a>
            <a  ng-click="pageFun(page.n_no)">下一页</a>
            <a  ng-click="pageFun(page.l_no)">末 页</a>
        </div>
    </div>
</div>


<p>```
&emsp;&emsp;在主页面中，分页、查询、新增、删除操作的事件，是通过ng-click进行绑定的。</p>

<p>&emsp;&emsp;再来看看具体的CRUD子页面：</p>

<p>&emsp;&emsp;<strong>add_user.html</strong>,添加用户页面</p>

<p>``` html add_user.html</p>

<div class="container" style="margin-top: 20px;" >
    <div>登录编码：<input type="text" ng-model="user.loginCode"></div>
    <div>登录姓名：<input type="text" ng-model="user.name"></div>
    <div>登录密码：<input type="text" ng-model="user.password"></div>
    <div>出生日期：<input type="text" ng-model="user.birthday"></div>
    <input type="hidden" ng-model="user.pic"  id="picPath"/>
    <div class="alert ">
        照片：
        <form action="../commons/upload"
              method="post"
              enctype="multipart/form-data"
              id="uploadForm" target="other_frame">
            <input type='file' name="photo"/>
            <input type='submit' value="上传" class="btn-large btn-primary"/>
            <input type='hidden' name='cbName' value='parent.showImage'/>
        </form>
        <br/>
        <img src="" id="pic"></div>
    <iframe name="other_frame" style='display: none;' ></iframe>
    <div>
        <input type="button" value="新增"  class="btn" ng-click="addUser()"/>
        <input type="button" value="返回"  class="btn" ng-click="back()"/>
    </div>
</div>


<p>```</p>

<p>&emsp;&emsp;<strong>modify_user.html</strong>，修改用户页面。</p>

<p>``` html modify_user.html</p>

<div class="container" ng-init="loadUser();">
    <div class="alert alert-info">用户名称：<input type="text" ng-model="user.userName"/></div>
    <div class="alert alert-success">出生日期：<input type="text" ng-model="user.birthDay" value="{{ user.birthDay | date:'yyyy-MM-dd'}}"/></div>
    <div class="alert alert-info">登录密码：<input type="password" ng-model="user.password"  placeholder="***"/></div>
    <div class="alert ">  <input type="hidden" ng-model="user.picPath" value="{{ user.picPath }}" id="picPath"/>
        照片：
        <form action="../commons/upload"
                                 method="post"
                                 enctype="multipart/form-data"
                                 id="uploadForm" target="other_frame">
            <input type='file' name="photo"/>
            <input type='submit' value="上传" class="btn-large btn-primary"/>
            <input type='hidden' name='cbName' value='parent.showImage'/>
        </form>
        <br/>
     <img id="pic" src="../{{ user.picPath }}"/></div>
    <iframe name="other_frame" style='display: none;' ></iframe>
    <div>
        <input type="button" value="修改" class="btn" ng-click="updateUser()"/>
        <input type="button" value="返回" class="btn" ng-click="back()" />
    </div>
</div>


<p>```</p>

<p>&emsp;&emsp;查看用户页面，<strong>view_user.html</strong></p>

<p>``` html view_user.html
 <div class="container"  ng-init="loadUser();"></p>

<pre><code>&lt;div class="alert alert-info"&gt;id：&lt;span id="userId"&gt;{{user._id}}&lt;/span&gt;&lt;/div&gt;
&lt;div class="alert alert-success"&gt;用户名称：&lt;span id="userName"&gt;{{user.userName}}&lt;/span&gt;&lt;/div&gt;
&lt;div class="alert "&gt;照片：&lt;img src="../{{user.picPath}}" &gt;&lt;/div&gt;
&lt;div&gt;&lt;input type="button" value="返回" class="btn btn-large" ng-click="back();"/&gt;&lt;/div&gt;
</code></pre>

<p></div>
```</p>

<p>&emsp;&emsp;最后是登录页面，<strong>login.html</strong></p>

<p>``` html login.html</p>

<div class="container">
    <label>用户名2：</label><input name="uname" type="text" ng-model="user.uname"   class="input-xlarge"><br/>
    <label>密码：</label><input   name="pwd" type="password" ng-model="user.pwd" class="input-xlarge"><br/>
    <input type="button" value="登录系统" id="btn_login" class="btn" ng-click="login()">
</div>


<p>```</p>

<p>&emsp;&emsp;angular.js的入门使用简单介绍到这，随着后期的深入，我会再写一些关于这方面的文章，尽请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步步教你用angular.js实现一个基本应用---第四部分]]></title>
    <link href="http://yanyaner.com/blog/2013/09/28/angular-js4/"/>
    <updated>2013-09-28T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/09/28/angular-js4</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;控制器中的代码：</p>

<p>&emsp;&emsp;我一共写了两个控制器，一个是和用户相关的，另一个是登录控制器。</p>

<p>&emsp;&emsp;其中，在页面切换时，需要保存的变量，放到了userService中，因为service是单例的。</p>

<!--more-->


<p>``` js controllers.js</p>

<p>&lsquo;use strict&rsquo;;</p>

<p>/<em> Controllers </em>/</p>

<p>/<em> 用户CRUD相关控制器 </em>/
function userCtrl($rootScope, $scope, $http, $routeParams, $window, $location, $route , userService) {</p>

<p>   $scope.userService = userService;</p>

<p>   $scope.logout = function() {</p>

<pre><code>   window.location.href="/logout";
</code></pre>

<p>   }</p>

<p>   $scope.loadUser = function() {</p>

<pre><code>   $http.get('../main/user/' + $routeParams.uid)
       .success(function(data){
           if (data.code == 0) {
               alert('查询用户失败，原因：' + data.msg);
           } else {
               $scope.user = data.data;
           }
       }) ;
</code></pre>

<p>   }</p>

<pre><code>$scope.deleteUsers=function(){
    var selectedUser = angular.element(".uid_c:checked");
    if (selectedUser.size() == 0) {
        alert("请选择要删除的用户!");
    } else {
        if (confirm("您确定要删除所选择的用户数据吗?")) {
            var ids = "";
            selectedUser.each(function(i){
                if (i == 0) {
                    ids = angular.element(this).val();  //此处或者 this.value也可
                } else {
                    ids = ids + "-" + angular.element(this).val();
                }
            });
            $http.delete("../main/users/" + ids)
                .success(function(result) {
                    alert(result.msg);
                    if (result.code == 1) {
                        $route.reload();
                    }
                }) ;
        }
    }
}

$scope.deleteUser=function(uid){
    if (window.confirm('您确定要删除所选择的记录吗？'))  {
        $http.delete("../main/user/" + uid)
            .success(function(result) {
                alert(result.msg);
                if (result.code == 1) {
                    $route.reload();
                }
            }) ;
    }
}

$scope.addUser = function(){
    $scope.user.pic = angular.element("#picPath").val();
    $http.post("../main/user", $scope.user )
        .success(function(result){
            if (result.code == 1) {
                alert("添加用户成功！");
                $location.url('/user_list');
            } else {
                alert(result.msg);
            }
        });
}

$scope.updateUser = function(){
    //后台需要参数有可能和前台不一致，就需要大家重新构建参数 ,添加请求参数
    $scope.user.pic = angular.element("#picPath").val();
    $scope.user.birthday = $scope.user.birthDay;
    $http.put("../main/user/" + $scope.user._id , $scope.user )
        .success(function(result){
            if (result.code == 1) {
                alert("修改成功！");
                $location.url('/user_list');
            } else {
                alert(result.msg);
            }
    });
}

$scope.pageFun = function(pno) {
    $http.get('main/users/' +  pno ,{params:{q_name:userService.q_name}})
        .success(function(data){
            if (data.code == 0) {
                alert('取用户分页数据失败，原因：' + data.msg);
            } else {
                userService.pno = data.page.pno;
                $scope.page = data.page;
                $scope.users = data.page.data;
            }
        }) ;
};
//$scope.pageFun(1);     //可以通过这种方式加载，但最好用ng-init进行首次加载
$scope.getState = function() {
    if ($rootScope.loginName) {
        //已经执行过getState，不用反复取用户状态
        return;
    }
    $http.get('getState')
        .success(function(data){
            if (data.code == 1) {
                $rootScope.loginName = data.name;
            } else {
                $location.url('/');
            }
        }) ;
}

$scope.back = function(){
    //$window.history.back();
    $location.url('/user_list');
}
$scope.test = function() {
    alert("test:" + $rootScope.allreadyGetState);
}
</code></pre>

<p>}</p>

<p>/<em> 登录系统控制器 </em>/
function loginCtrl($rootScope, $scope, $http, $location) {</p>

<pre><code>   var User = {uname:"0011",pwd:"123"} ;
   //var User = {uname:"",pwd:""} ;
   $scope.user = User;
   $scope.login = function() {
       $http.get('/login',{params:User})
           .success(function(data){
               if (data.code == 0) {
                   alert('登录失败，原因：' + data.msg);
               } else {
                   alert(data.name + '登录成功！');
                   $rootScope.isLogined = true;
                   $location.url('/user_list');
               }
           }) ;
   }
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步步教你用angular.js实现一个基本应用---第三部分]]></title>
    <link href="http://yanyaner.com/blog/2013/09/28/angular-js3/"/>
    <updated>2013-09-28T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/09/28/angular-js3</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;搭建项目结构，这个可以在gitHub上找到很多的seed来参考，我就是这么做的。结构如下，需要注意的是：</p>

<p>&emsp;&emsp;1、所有的js都放到了js目录中</p>

<p>&emsp;&emsp;2、框架包放在js/lib下，主文件包是app.js，</p>

<p>&emsp;&emsp;3、控制器在controller.js中，如果控制器中东西太多，建议按模块再次划分成更多的文件，比如：systemController.js，salemanagerController.js</p>

<p>&emsp;&emsp;4、服务存放在service.js中，其中可以注册多个服务。</p>

<p>&emsp;&emsp;5、自己的一些公共js，可以放在commons.js中。</p>

<p>{% imgcap /uploads/2013/09/1.jpg 项目文件结构 %}</p>

<p>&emsp;&emsp;好了，先来看主页面index.html，这篇文件中</p>

<p>&emsp;&emsp;1、使用ng-app指明，整个系统是在哪个模块作用域下；</p>

<p>&emsp;&emsp;2、ng-view，是所有了页面加载显示的地方。</p>

<p>&emsp;&emsp;3、在最后导入的有使用到的js，angular会重新编译整个页面，并重建dom结构。</p>

<!--more-->


<p>``` html index.html</p>

<p>&lt;!DOCTYPE html>
<html ng-app="myApp">
<head></p>

<pre><code>&lt;title&gt;&lt;/title&gt;
&lt;link rel="stylesheet" href="http://yanyaner.com/css/bootstrap.min.css"&gt;
&lt;link rel="stylesheet" href="http://yanyaner.com/css/my.css"&gt;
</code></pre>

<p></head>
<body></p>

<pre><code> &lt;div ng-view&gt;&lt;/div&gt;
</code></pre>

<p></body></p>

<script src="js/lib/jquery/jquery-1.7.2.min.js"></script>


<script src="js/commons.js"  ></script>


<script src="js/lib/angular/angular.js"></script>


<script src="js/services.js"></script>


<script src="js/controllers.js"></script>


<script src="js/app.js"></script>


<p></html>
```</p>

<p>&emsp;&emsp;再来看app.js内容，这篇文件定义了路由表，大家要注意这些代码：</p>

<p>&emsp;&emsp;1、$locationProvider.html5Mode(true);设置全局变量值；</p>

<p>&emsp;&emsp;2、定义所依赖的模块，比哪：angular.module(&ldquo;myApp&rdquo;,[&lsquo;myApp.service&rsquo;]);，就定义了依赖myApp.service，也就是我们的服务。</p>

<p>&emsp;&emsp;3、run方法，提供初始化代码执行的方式，我在这初始化了一个全局变量。</p>

<p>``` js app.js</p>

<p>&lsquo;use strict&rsquo;;</p>

<p>// Declare app level module which depends on filters, and services
function myRouteConfig($routeProvider,$locationProvider) {</p>

<pre><code>$locationProvider.html5Mode(true);
$routeProvider
    .when("/",{controller:loginCtrl, templateUrl:'login.html'})
    .when("/user_list",{controller:"userCtrl", templateUrl:'main/main.html'})
    .when("/user/:uid",{controller:"userCtrl", templateUrl:'../main/view_user.html'})
    .when("/to_modifyuser/:uid",{controller:"userCtrl", templateUrl:'../main/modify_user.html'})
    .when("/to_adduser",{controller:"userCtrl",templateUrl:'../main/add_user.html'})
    .when("/logout",{controller:"userCtrl"})
    .otherwise({redirectTo:"/"})
;
</code></pre>

<p>}
var app = angular.module(&ldquo;myApp&rdquo;,[&lsquo;myApp.service&rsquo;]);
app.config(myRouteConfig);
app.run(function($rootScope){</p>

<pre><code>//登录成功后的登录名
$rootScope.loginName;
</code></pre>

<p>});</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步步教你用angular.js实现一个基本应用---第二部分]]></title>
    <link href="http://yanyaner.com/blog/2013/09/28/angular-js2/"/>
    <updated>2013-09-28T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/09/28/angular-js2</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;angular.js同时也是一个客户端的MVC框架，它有自己的控制器，可以对客户端的程序结构进行有效规范，比如，我们可以通过$routeProvider，定义整个系统的路由表，示例代码如下：</p>

<p>``` js</p>

<p>$routeProvider</p>

<pre><code>    .when("/",{controller:loginCtrl, templateUrl:'login.html'})
    .when("/user_list",{controller:"userCtrl", templateUrl:'main/main.html'})
</code></pre>

<p>```</p>

<p>&emsp;&emsp;其中，when中的第一个参数为本地路径（注意，仅仅是angular.js在本地的路径，而并非向服务器请求的路径），后面的controller参数定义了控制器的名称，再后面的templateUrl参数定义处理完成后的数据展示页面。</p>

<p>&emsp;&emsp;这是一个标准的<strong>MVC</strong>格式。</p>

<p>&emsp;&emsp;如果和struts等服务器端MVC框架对比来看，你可以这样去理解：</p>

<p>&emsp;&emsp;一、$routeProvider中定义的路由表，相当于你在struts-config.xml中定义的内容。</p>

<p>&emsp;&emsp;二、controller中定义的相当于应用控制器action，在一个controller中，可以定义多个方法，这些方法执行过程中，你可以调用service中的东西，或者直接向服务器发出请求。</p>

<p>&emsp;&emsp;三、数据的共享，通过$scope作用域实现，直接把从服务端得到的数据，放到该作用域中即可。当然，这个$scope作用域仅仅和本次页面相关，如果想在更大作用域中共享数据，可以使用$rootScope，但我更建议大家使用service，原因后面给大家讲。</p>

<p>四、页面跳转后数据的展示，通过ng-repeat,ng-if，{{exp}}等等一系列指令去实现，这类似于java世界中的JSTL，EL。</p>

<p>&emsp;&emsp;五、数据绑定，通过ng-model自动完成，java世界中要由框架去完成这个装配及转换。</p>

<p>&emsp;&emsp;好了，以上仅仅是一个简单的类比，希望对大家理解有所帮助。</p>

<p>&emsp;&emsp;还有一些常用的操作，属于基本功，大家要有所了解。</p>

<p>&emsp;&emsp;<strong>一、通常，angular.js属于单页面应用</strong>，我们会通过ng-view实现把部分的页面内容，加载到这个区域中，如下：</p>

<p>``` html</p>

<div ng-view></div>


<p>```</p>

<!--more-->


<p>&emsp;&emsp;这个单页面大家要知道，本质上来说并不是只有一个html页面，我们指的单页面，是运行时加载到一个页面中，这样做是有好处的，子页面将变得十分小巧，不再 有html,body及加载js,css之类的东西，子页面中将仅仅包含核心内容部分，这个是和传统编程模式的一个区别。</p>

<p>&emsp;&emsp;<strong>二、关于依赖注入</strong></p>

<p>&emsp;&emsp;比如：</p>

<p><code>js
function myRouteConfig($routeProvider,$locationProvider)
</code></p>

<p>&emsp;&emsp;再比如：
<code>js
function userCtrl($rootScope, $scope, $http, $routeParams, $window, $location, $route , userService)
</code></p>

<p>&emsp;&emsp;上面的代码，给大家展现了依赖注入，也就是你要用到某个外部定义的对象，直接写出来就可以在方法中使用了，angular会在方法调用时传入实例。做为应用层面的开发，理解到这点就够了。</p>

<p>&emsp;&emsp;<strong>三、关于服务，工厂，Provider，指令的理解</strong>。</p>

<p>&emsp;&emsp;服务、工厂，Provider都是单例的，也就是说，在一个系统中，仅仅存在一个这样的实例，而你又可以定义多个这样的东西，所以，对于大系统的模块化组织代码，有重要作用。</p>

<p>&emsp;&emsp;服务，最为简单，直接定义出来，就可以注入到其它模块中，比如：</p>

<p>``` js
service.service(&ldquo;userService&rdquo;,function(){</p>

<pre><code>this.pno = 1;
this.q_name="";
this.sayHello = function(){
</code></pre>

<p>});
```</p>

<p>&emsp;&emsp;使用都通过：function userCtrl(userService)这种方式，实现注入。</p>

<p>&emsp;&emsp;也可以这么说，我们可以在service中定义自己的变量，业务方法等，因为是单实例，因此可以封闭和模个模块相关的属性和方法。</p>

<p>&emsp;&emsp;工厂，我理解和服务类似，只不过用于创建更加复杂的对象，工厂在定义时可以声明依赖注入所需要的处部对象。</p>

<p>&emsp;&emsp;指令，定义新的指令，达到复用的目的，类似于jsp标签，我暂时还没有用到这个。</p>

<p>&emsp;&emsp;Provider，有时间再深入研究，目前没有用到。</p>

<p>&emsp;&emsp;好了，下一篇，给大家讲具体的使用。</p>
]]></content>
  </entry>
  
</feed>
