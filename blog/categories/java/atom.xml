<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：java | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2014-07-25T17:29:26+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[spring mvc restful全局异常处理]]></title>
    <link href="http://yanyaner.com/blog/2014/07/25/springmvc-global-exceptionhandler/"/>
    <updated>2014-07-25T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/25/springmvc-global-exceptionhandler</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;在提供restful服务的服务器端，当发生一些我们没有捕获的异常错误时，我们也应该向客户端返回标准统一的数据格式（比如json数据格式），而不应该返回html内容的出错信息。</p>

<p>&emsp;&emsp;在spring mvc中定义全局异常处理类非常的容易，但在传统的MVC交互方式中，我们一般都是返加一个自定义的友好出错页面给客户端。</p>

<p>&emsp;&emsp;回到restful中，我们同样也是采用这种方式，参考代码如下：</p>

<p>``` java GlobalJsonHandlerExceptionResolver.java</p>

<p>package com.lovo.videoplatform.commons;</p>

<p>import java.io.IOException;</p>

<p>import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;</p>

<p>import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerExceptionResolver;
import org.springframework.web.servlet.ModelAndView;</p>

<p>import com.my.ms.framework.commons.JsonMapper;
import com.my.ms.framework.web.dto.RespMessage;
/<em>*
 * 定义全局错误处理器
 * @author ljh
 *
 </em>/
@Component
public class GlobalJsonHandlerExceptionResolver implements</p>

<pre><code>    HandlerExceptionResolver  {

@Resource
private JsonMapper jm;

public static Logger LOG = LoggerFactory.getLogger(GlobalJsonHandlerExceptionResolver.class);

@Override
public ModelAndView resolveException(HttpServletRequest req,
        HttpServletResponse resp, Object handler, Exception ex) {

    resp.setCharacterEncoding("utf-8");

    RespMessage result = new RespMessage();
    result.setCode(RespMessage.FAIL);

    result.setData(ex.getMessage());
    result.setMsg("服务器端运行您的请求出现错误！");

    LOG.warn("Global exception found, Exception is: {}", ex);

    try {
        jm.writeValue(resp.getOutputStream(), result);

    } catch (IOException e) {
        LOG.error("Write exception error: {}", e);
    }

    return null;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;这个类我是通过@Component注册到容器中的，当然你也可以在xml中通过bean配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[客户端无状态参数调用实现]]></title>
    <link href="http://yanyaner.com/blog/2014/07/22/security-filter-client-call/"/>
    <updated>2014-07-22T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/22/security-filter-client-call</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;我在<a href="/blog/2014/07/20/security-filter-sign/">《服务器端无状态参数验证实现）》</a>中给大家贴出了无状态调用中对数据的验证机制服务器端实现代码，那么，客户端如何去进行调用呢？我同样给大家给出一个客户端调用的登录示例。</p>

<p>&emsp;&emsp;首先将客户端的调用信息放入一个app.properties配置文件中以方便管理维护，内容如下。</p>

<p>```
appKey = crm324123123126
appCode = 54dde0994ef4d86cfdf583e6d1384353
callHost = <a href="http://www.mywebsite.com/monitorplatform">http://www.mywebsite.com/monitorplatform</a></p>

<p>```</p>

<p>&emsp;&emsp;客户端登录代码用到了httpClient，实现如下：<!-- more--></p>

<p>``` java
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;</p>

<p>import javax.annotation.Resource;</p>

<p>import org.apache.commons.codec.digest.DigestUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;</p>

<p>import com.lovo.platform.monitor.model.User;
import com.lovo.videoplatform.back.service.IUserLoginService;
import com.lovo.videoplatform.commons.AppConfiger;
import com.lovo.videoplatform.exception.CallApiErrorException;
import com.lovo.videoplatform.exception.LoginFailExceptions;
import com.my.ms.framework.persistence.hibernate.IBaseDao;</p>

<p>/<em>*
 * 用户登录相关业务操作实现
 *
 * @author ljh
 *
 </em>/
@Service
@Transactional(readOnly = false)
public class UserLoginServiceImpl implements IUserLoginService {</p>

<pre><code>public static final Logger LOG = LoggerFactory.getLogger(UserLoginServiceImpl.class);

// 调用监控系统api核心对象
private HttpClient httpclient = new DefaultHttpClient();

@Resource
private IBaseDao hibernateDao;

@Resource
private AppConfiger config;

@Override
@Transactional(readOnly = true)
public User login(String userName, String password) {

    long ts = System.currentTimeMillis();

    Map signParams = new HashMap();
    signParams.put("logincode", userName);
    signParams.put("password", password);
    signParams.put("ts", ""+ts);

    try {

        String url = config.getCallHost() + "/api/" + config.getAppKey() + "/login";

        LOG.info("begin call api url:{}" , url);

        HttpPost request = new HttpPost(url);

        List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
        params.add(new BasicNameValuePair("sign", config.generateSign(signParams)));
        params.add(new BasicNameValuePair("ts", "" + ts));
        params.add(new BasicNameValuePair("logincode", userName));
        params.add(new BasicNameValuePair("password", password));

        HttpEntity reqEntity = new UrlEncodedFormEntity(params, "utf-8");
        request.setEntity(reqEntity);

        HttpResponse resp = httpclient.execute(request);

        if (resp.getStatusLine().getStatusCode() != 200) {
            LOG.error("call login api error, http statusCode is:{}" , resp.getStatusLine().getStatusCode());
            throw new CallApiErrorException("调用监控系统登录api错误，http状态码是：" + resp.getStatusLine().getStatusCode());
        }

        //解析内容
        String content = EntityUtils.toString(resp.getEntity(), "utf-8");
        ObjectMapper om = new ObjectMapper();
        Map result = om.readValue(content, HashMap.class);

        int code = (Integer)result.get("code");
        if (code == 1) {
            Map data = (Map)result.get("data");
            User user = hibernateDao.queryEntityById(User.class, (Integer)data.get("id"));
            return user;
        } 

    } catch (Exception ex) {
        LOG.warn("call login api error, exception is:{}", ex);
        throw new LoginFailExceptions("调用第三方登录api出错！");
    }

    throw new LoginFailExceptions("用户名或密码错，用户登录失败！");
}

//...........其它代码略去
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;上面代码中的AppConfiger，将会从properties中读取配置文件中的信息，同时这个类中也封装了生成数据签名sign的方法，以方便客户端的调用，具体代码如下。：</p>

<p>```
/<em>*
 * 应用程序的一些配置信息
 *
 * @author ljh
 *
 </em>/
@Component
public class AppConfiger {</p>

<pre><code>// 调用目标服务器地址
@Value("#{configProperties['callHost']}")
private String callHost;

// 本应用的code
@Value("#{configProperties['appKey']}")
private String appKey;

// 本应用的编码(生成数字签名时的私有编码串)
@Value("#{configProperties['appCode']}")
private String appCode;

public String getCallHost() {
    return callHost;
}

public String getAppKey() {
    return appKey;
}

public String getAppCode() {
    return appCode;
}

/**
 * 生成签名加密字符串
 * 
 * @param params 调用服务器要传递的参数，不包含sign
 * @return
 */
public String generateSign(Map&lt;String, String&gt; params) {

    StringBuilder sb = new StringBuilder();

    List&lt;String&gt; keys = new ArrayList&lt;String&gt;(params.keySet());
    Collections.sort(keys);

    for (int i = 0; i &lt; keys.size(); i++) {
        String key = keys.get(i);
        String value = params.get(key);

        if (i == keys.size() - 1) {// 拼接时，不包括最后一个&amp;字符
            sb.append(key).append("=").append(value);
        } else {
            sb.append(key).append("=").append(value).append("&amp;");
        }
    }

    return DigestUtils.md5Hex(sb.toString() + this.getAppCode());
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;@Value将读取容器环境中properties读取的信息，在spring的配置文件中，要有类似下面的bean配置，注意其中加载了app.properties文件，这个bean的id要和@Value注解中的名称相匹配哦。</p>

<p>```</p>

<pre><code>&lt;!-- 配置文件信息 --&gt;
&lt;bean id="configProperties"
    class="org.springframework.beans.factory.config.PropertiesFactoryBean"
    lazy-init="false"&gt;
    &lt;property name="locations"&gt;
        &lt;list&gt;
            &lt;value&gt;classpath:database.properties&lt;/value&gt;
            &lt;value&gt;classpath:hibernate-config.properties&lt;/value&gt;
            &lt;value&gt;classpath:app.properties&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;好了，先介绍到此，希望我的这两篇文章能够给你带来帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[服务器端无状态参数验证实现]]></title>
    <link href="http://yanyaner.com/blog/2014/07/20/security-filter-sign/"/>
    <updated>2014-07-20T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/20/security-filter-sign</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;我在<a href="/blog/2014/04/16/security4/">《Java安全那些事之四（无状态安全认证）》</a>中提到了在无状态安全认证中，对数据签名的验证可以考虑通过AOP或filter的方式专门提取到了一个层中去处理，很多人在问我有没有源代码，现在贴出请大家参考。</p>

<p>&emsp;&emsp;当我们有了这个独立的层次，我们在应用控制器中就不再需求做这方面的检测了，着实方便了许多。<!-- more--></p>

<p>``` java ApiSeccurityCheckFilter.java</p>

<p>/<em>*
 * 无状态签名、超时检测过滤器实现
 *
 * @author ljh
 *
 </em>/</p>

<p>@Component
public class ApiSeccurityCheckFilter extends OncePerRequestFilter {</p>

<pre><code>//默认调用超时（单位 ms）
public static final int API_CALL_TIME_OUT = 500;

public static final Logger LOG = LoggerFactory.getLogger(ApiSeccurityCheckFilter.class);


//调用超时（单位 ms）
private int api_call_timeout = API_CALL_TIME_OUT;

@Resource
private IAppManagementService ams;

@Resource
private JsonMapper jm;

@Override
protected void doFilterInternal(HttpServletRequest req,
        HttpServletResponse resp, FilterChain fc)
        throws ServletException, IOException {

    // 取到的形如： /myplatform/api/crm324123123126/login
    String uri = req.getRequestURI();

    int start = uri.lastIndexOf("/api/") + 5;

    String appKey = uri.substring(start, start + 15);


    //（1）检测appKey是否授权
    App app = ams.findAppByKey(appKey);
    if (app == null) {
        if (LOG.isDebugEnabled()) {
            LOG.debug("appKey {} error, app is null!", appKey);
        }
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("app调用未经授权！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（2）进行必要参数的验证
    String client_sign = req.getParameter("sign");
    String client_ts  = req.getParameter("ts");

    if (client_sign == null || "".equals(client_sign.trim()) ||
        client_ts == null || "" .equals(client_ts.trim())
            ) {
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("必须提供sign, ts参数项！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（3）进行数据签字验证
    StringBuilder sb = new StringBuilder();

    List&lt;String&gt; keys = new ArrayList&lt;String&gt;();
    for (Enumeration&lt;String&gt; params = req.getParameterNames(); params.hasMoreElements();) {
        String paramKey = params.nextElement();
        if (paramKey.equalsIgnoreCase("sign")) {
            continue;       }
        keys.add(paramKey);
    }
    Collections.sort(keys);


    for (int i = 0; i &lt; keys.size(); i++) {
        String key = keys.get(i);
        String value = req.getParameter(key);

        if (i == keys.size() - 1) {//拼接时，不包括最后一个&amp;字符
            sb.append(key).append("=").append(value);
        } else {
            sb.append(key).append("=").append(value).append("&amp;");
        }
    }


    String sign = DigestUtils.md5Hex(sb.toString() + app.getAppCode());

    if (! sign.equals(client_sign)) {
        LOG.debug("sign error, uri is {}.", uri);
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("数字签名错误！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（4）方法调用超时检测
    long times = System.currentTimeMillis() - Long.parseLong(client_ts);
    if (times &gt; api_call_timeout) {
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("调用超时！");
        jm.writeValue(resp.getOutputStream(), message);
        LOG.debug("api call timer out, uri is {}, used time {} ms.", uri, times);
        return;
    }

    // （5）继续向后执行
    fc.doFilter(req, resp);


}

public void setApi_call_timeout(int api_call_timeout) {
    this.api_call_timeout = api_call_timeout;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;在spring配置文件中，加入这个过滤器的配置，代码如下：</p>

<p>``` xml spring-aciton.xml</p>

<pre><code>&lt;!-- 第三方应用程序调用api时的检测权限及安全过滤器,名称要和web.xml中的DelegatingFilterProxy指定的targetBeanName名称一致 --&gt;
&lt;bean name="apiSeccurityCheckFilter" class="com.lovo.platform.monitor.filter.ApiSeccurityCheckFilter"&gt;
    &lt;property name="api_call_timeout" value="1000"&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后，在web.xml中配置DelegatingFilterProxy，通过配置url-pattern指定，所有还aip路径的，都经过这个过滤器，也就是说本系统对外界暴露的restapi调用，有了一个统一的安全认证层次。具体代码如下：</p>

<p>``` xml  web.xml
  <filter></p>

<pre><code>&lt;filter-name&gt;apiSeccurityCheckFilter&lt;/filter-name&gt;
&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;
&lt;init-param&gt;
    &lt;param-name&gt;targetBeanName&lt;/param-name&gt;
    &lt;param-value&gt;apiSeccurityCheckFilter&lt;/param-value&gt;
&lt;/init-param&gt;
&lt;init-param&gt;
    &lt;param-name&gt;API_CALL_TIME_OUT&lt;/param-name&gt;
    &lt;param-value&gt;500&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>

<p>  </filter>
  &lt;filter-mapping></p>

<pre><code>&lt;filter-name&gt;apiSeccurityCheckFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;
</code></pre>

<p>  &lt;/filter-mapping></p>

<p>```</p>

<p>&emsp;&emsp;大家要注意的是，targetBeanName中的名称，一定要和spring-aciton.xml中配置的bean的名称一致哦。</p>

<p>&emsp;&emsp;最后解释一下，用到OncePerRequestFilter的原因是，过滤器中要进行业务层方法的调用，使用了OncePerRequestFilter后会非常自然地得到业务对象哈。</p>

<p>&emsp;&emsp;下一篇给出客户端调用示例代码，请大家关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring mvc restful服务器端数据验证实现]]></title>
    <link href="http://yanyaner.com/blog/2014/07/16/spring-restful-validator/"/>
    <updated>2014-07-16T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/16/spring-restful-validator</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;服务器端的数据合法性验证非常有必要而且是必须的，特别是restful api中场景中存在多种类型的客户端，你不能保证每种客户端都已经做好了本地化的数据合法性验证。</p>

<p>&emsp;&emsp;对于业务逻辑来说，我们一般会对新增业务操作以及修改业务操提交上来的数据进行验证，而一般的mvc框架都有对验证功能的封装集成，spring mvc也不利外，但这些集成的验证都和特定的视图标签有密切的联系，比如jsp标签库，而在我所说的restful场景中，服务器上往往不做页面的生成工作，那自然是用到到这些标签了。怎么办呢？只有自己做一些封装和改造了，简单的说，就是我们自己去解析BindingResult中的信息。</p>

<p>&emsp;&emsp;请看我下面封装的通用数据返回类代码，其中sendValidationFaildResponse方法会将验证出来的错误信息返回给客户端：</p>

<p>``` java RespMessage.java
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;</p>

<p>import javax.servlet.http.HttpServletResponse;</p>

<p>import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;</p>

<p>import com.my.ms.framework.commons.JsonMapper;</p>

<p>/<em>*
 * 向客户端返回的统一消息
 * @author ljh
 *
 </em>/
public class RespMessage {</p>

<pre><code>public static final int API_PARAM_ERROR = 10;
public static final int SUCCESS = 1;
public static final int FAIL = 0;
public static final int DATA_VALIDATION_ERROR = -1;


//操作状态码  0：操作失败，1：成功， 其它数据，由客户自定义
//-1:数据验证失败 ， 其它取值含义由客户自定义
//10:api调用出错参数错误（特别是在无状态webservice之类的调用情况下）
private int code = SUCCESS;
//要返回的消息
private String msg;
//返回的数据
private Object data;
//消息版本，保留待用
private String version;


public int getCode() {
    return code;
}
public void setCode(int code) {
    this.code = code;
}
public String getMsg() {
    return msg;
}
public void setMsg(String msg) {
    this.msg = msg;
}
public Object getData() {
    return data;
}
public void setData(Object data) {
    this.data = data;
}


public boolean sendValidationFaildResponse(
        BindingResult result, 
        JsonMapper mapper,
        HttpServletResponse resp) {
    if (result.getFieldErrors().size() &gt; 0) {
        this.code = DATA_VALIDATION_ERROR;
        //这里只取字段类型的错误
        List&lt;FieldError&gt; errors = result.getFieldErrors();
        Map error_map = new HashMap();
        for (FieldError e : errors) {
            error_map.put(e.getField().toString(), e.getDefaultMessage());
        }
        this.data = error_map;
        this.msg = "你提交的数据没有通过验证！";

        try {
            mapper.writeValue(resp.getOutputStream(), this);
        } catch (Exception ex) {
            ex.printStackTrace();
        } 

        return true;

    }

    return false;
}
</code></pre>

<p>}</p>

<p>```
&emsp;&emsp;接下来再来看看添加数据的action代码，这段代码中首先进行了数据合法性的验证：<!-- more--></p>

<p>``` java UserAction.java</p>

<p>@RequestMapping(value=&ldquo;/user&rdquo;, method=RequestMethod.POST)</p>

<pre><code>public void addUser(
        @Valid User user,
        BindingResult result
        ) {

    resp.setCharacterEncoding("utf-8");

    RespMessage respMsg = new RespMessage();

    //进行数据合法性的验证
    if (respMsg.sendValidationFaildResponse(result, jm, resp)) {
        return ;
    }       

    //.... other porcess 其它代码略去
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;实体对象中，添加字段验证注解，如下（这里暂时没有使用国际化）：</p>

<p>``` java User.java</p>

<p>@Entity
@Table(name=&ldquo;t_user&rdquo;)
@JsonFilter(&ldquo;video_user&rdquo;)
public class User implements Serializable {</p>

<pre><code>@Id
@Column(name="pk_id")
@GeneratedValue(strategy=GenerationType.IDENTITY)
private int id;

@Column(name="f_name")
private String name;

@Column(name="f_code")
@NotEmpty(message="编码不能为空！")
private String code;

@Column(name="f_password")
@NotEmpty(message="登录密码不能为空！")
private String password;

//................其它代码略去
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后，将验证相关的bean对象加入到apirng的配置文件中。</p>

<p>``` xml spring-action.xml</p>

<pre><code>&lt;!-- 读取国际化资源配置文件 --&gt;
&lt;bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
    &lt;property name="basename" value="res/appResources"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 添加验证对国际化的支持 --&gt;
&lt;bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt;
    &lt;property name="validationMessageSource" ref="messageSource"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 启用spring mvc注解驱动 --&gt;
&lt;mvc:annotation-driven validator="validator"  /&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;国际化的部分仅仅是为了以后扩展方便，同时需要你在src下建立res目录，并写一个空的appResources.properties文件。</p>

<p>&emsp;&emsp;针对上面的action访问，如果我们不输入必须要填写的字段，我们会得到如下的输出结果：</p>

<p>``` json
{
&ldquo;code&rdquo;:-1,
&ldquo;msg&rdquo;:&ldquo;你提交的数据没有通过验证！&rdquo;,
&ldquo;data&rdquo;:</p>

<pre><code>{
"code":"编码不能为空！",
"password":"登录密码不能为空！"
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;这个json信息，在jquery中可以通过下面的代码解析出错误详细信息，并进行显示：</p>

<p>``` js
success:function(data){</p>

<pre><code>            if (data.code == -1) {
                $.each(data.data,function(key,data){
                    alert(key + ": " + data);
                });
                return;
            }

            //........其它代码略去
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring mvc 表现层测试]]></title>
    <link href="http://yanyaner.com/blog/2014/07/15/spring-mvc-test/"/>
    <updated>2014-07-15T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/15/spring-mvc-test</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;表现层、业务层、持久层是一个经典的分层架构，在构建软件系统时，一般会从持久层开始，逐渐向上层编码、构建，每一层完成编码后必须保证正确后，再写上一层，这就像修房子一样，打牢地基再砌墙。</p>

<p>&emsp;&emsp;另外需提一下，一般公司的项目中对持久层都有通用的封装（比如baseDao），因此，持久层的代码在这种情况下就表现为ORM注解或sql语句块，如果是hibernate注解，在项目启动时就可以发现大部分配置上的错误，如果是mybatis或ibatis依旧可以放到业务层中去测试。因此，我认为持久层不用专门去写测试代码了，我们针对业务层的测试即可发现持久层的问题。</p>

<p>&emsp;&emsp;还有，表现层在采用了restful及json数据返回格式后，前端的交互编码其实可以很早就进行，即和后台编码同步进行，我计划有时间去实现一个这样的模拟系统服务器，在设计人员完成rest api设计后，就可以将api输入这个模拟服务器系统，前端程序员依照rest api就可以和模拟服务器交互了，这样前后台就可以分工同步开发了，效率一定会提升哦。</p>

<p>&emsp;&emsp;言归正传，下面我主要来讲讲服务器端的action测试，因为在这个时候，我们还没有任何界面交互，而仅仅只有一个restful api。如何对action进行测试，在早期的spring版本中还比较困难，网上很多同学都是自己封装，但依然不方便不强大。好消息是从spring 3.2开始，提供了对spring mvc完善的支持，请看下面的这个登录action代码及测试。<!-- more--></p>

<p>``` java LoginAction.java
/<em>*
 * 登录系统
 * @author ljh
 *
 </em>/
@Controller
public class LoginAction {</p>

<pre><code>@Resource
private IUserService userService;

@Resource
private JsonMapper jm;


@RequestMapping(value="/login", method=RequestMethod.GET)
public void loginSystem(
        @Valid User user,
        BindingResult result,
        HttpSession session,
        HttpServletResponse resp
        ) throws Exception {

    resp.setCharacterEncoding("utf-8");

    RespMessage respMsg = new RespMessage();

    if (respMsg.sendValidationFaildResponse(result, jm, resp)) {
        return ;
    }

    try {
        User u = userService.login(user.getCode(), user.getPassword());
        session.setAttribute(IConst.LOGIN_USER_SESSION_KEY, u);
        respMsg.setData(u);

    } catch (Exception ex) {
        respMsg.setCode(RespMessage.FAIL);
        respMsg.setMsg(ex.getMessage());
    }

    jm.writeValue(new FilterProvider()
    .addIncludeProperties("video_user", "id", "name", "classes") 
    .addIncludeProperties("video_classes", "id" ,"name")
    ,resp.getOutputStream(), respMsg);

}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;对上面这个rest方法如何进行测试呢？非常简单，代码如下：</p>

<p>``` java LoginActionTest.java</p>

<p>import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;</p>

<p>import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.<em>;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.</em>;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</p>

<p>@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
@WebAppConfiguration
@ContextConfiguration(value={&ldquo;classpath:config/spring/spring*.xml&rdquo;})
public class LoginActionTest {</p>

<pre><code>@Resource
private WebApplicationContext wac;

private MockMvc mvc;



@Before
public void setup() {
    mvc = MockMvcBuilders.webAppContextSetup(wac).build();
}



@Test
public void testLogin() throws Exception {

    mvc
    .perform(get("/login").param("name", "ljh").param("password", "123"))
    .andExpect(status().isOk()) //状态码200
    .andExpect(content().string("{msg:10}"))
    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
    .andExpect(jsonPath("$.msg").value(10))
    .andDo(print());


}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;上面的代码，有几个地方需要给大家解释：</p>

<p>&emsp;&emsp;<strong>MockMvc</strong>:这个类是一个核心类，测试必须通过这个类来实现。MockMvc如何实例化呢？这行代码：<strong>MockMvcBuilders</strong>.webAppContextSetup(wac).build()即可实例化，其中的wac需要由容器注入，类型是WebApplicationContext。</p>

<p>&emsp;&emsp;有同学在这个地方或许有点疑问，在没有启动tomcat之类容器的情况下，如何能注入<strong>WebApplicationContext</strong>啊？答案就是类顶上书写的<strong>@WebAppConfiguration</strong>注解，细心的同学会发现，本测试类和service中的测试类上面写的注解基本相同，惟独多了@WebAppConfiguration注解，正因为这个注解所起的作用，使用WebApplicationContext可以注入。</p>

<p>&emsp;&emsp;接下来，我们来看真正的测试方法，在测试过程中，我们主要会做三个事情：</p>

<p>&emsp;&emsp;<strong>1、构建请求，然后执行</strong>。</p>

<p>&emsp;&emsp;请求的构建，需要用到MockMvcRequestBuilders类，这个类可以产生get、post、put、delete等各种请求以及填充参数，构建好请求后，通过perform方法提交这个请求。</p>

<p>&emsp;&emsp;<strong>2、验证请求结果和预期是否一切。</strong></p>

<p>&emsp;&emsp;请求的验证通过MockMvcResultMatchers这个类来做，我们可以从很多方面来验证结果和你预期是否一致，比如：状态码，响应内容，响应视图名称，响应类型码等，上例中我们就使用了status、content、contentType等，更详细的东东请大家去翻阅spring api文档吧。</p>

<p>&emsp;&emsp;<strong>3、打印输出请求与响应的结果（这一步可选，不是必须的哦）。</strong></p>

<p>&emsp;&emsp;MockMvcResultHandlers这个类用来对结果进行处理，比如通过print方法打印，spring mvc对测试结果处理的封装目前仅仅提供了打印这个处理，其它的可由我们自己去实现哦。当然，你也可以将输入的json结果copy出来，放入图形化工具中，人工检查是否正确，可使用的gui工具有JsonView.exe，自己可从网上下载到哦。</p>

<p>&emsp;&emsp;当然，上面都是针对的是json restful结果的断言，如果是传统的mvc方式，又该是如何验证呢？请看示例代码，包含了对跳转页面资源的验证以及对作用域中值的验证等功能：</p>

<p>``` java</p>

<pre><code>            .andExpect(status().isOk())
            .andExpect(view().name("main"))
            .andExpect(MockMvcResultMatchers.forwardedUrl("main"))
            .andExpect(forwardedUrl("main"))
            .andExpect(model().attributeExists("user_key"))
</code></pre>

<p>```</p>

<p>&emsp;&emsp;如果你的需求中需要上传文件，又怎么测试呢？不要着急，spring mvc已经为我们考虑到了这些，代码如下：</p>

<p>``` java</p>

<p>mvc.perform(</p>

<pre><code>            fileUpload("/login")
            .file(
                    new MockMultipartFile("photo", "database.properties", MediaType.IMAGE_JPEG_VALUE, FileUtils.readFileToByteArray(
                            new ClassPathResource("database.properties").getFile())))
                .param("code", "001")
                .param("password", "123")

            )
            .andExpect(status().isOk())
            .andDo(print());
</code></pre>

<p>```</p>

<p>&emsp;&emsp;我们自己实例化了一个MockMultipartFile，并指定了一些参数，比如文件字段名，原始文件名，内容类型，文件内容等。有一点要提醒大家的是，在你的Action中，一定要用MultipartFile类型来接收文件参数，而不是用CommonsMultipartFile哦，切记（其实这也是您对依赖倒转原则理解的体现哦）。</p>

<p>&emsp;&emsp;各位，时间关系，先写到这，以后再补充。</p>
]]></content>
  </entry>
  
</feed>
