<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：javaEE | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/javaee/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2014-06-04T14:25:35+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[java安全那些事之六（客户端安全）]]></title>
    <link href="http://yanyaner.com/blog/2014/05/23/security6/"/>
    <updated>2014-05-23T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/05/23/security6</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;这篇文章我想说一下客户端保存密码的安全性问题。目前在客户端保存用户登录密码的场景非常的普遍，尤其是在手机客户端应用中更为常见。下图是一个浏览器端中设计的保存密码界面。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/05/auto_login.jpg' width='' height='' title='保存密码及自动登录界面'><span class='caption-text'>保存密码及自动登录界面</span></span></p>

<p>&emsp;&emsp;图中，用户可以选择保存自己的用户名和密码，如果用户选择了这一项，密码当然是保存在客户端的哦（浏览器中就是cookie）。在保存了上次登录密码的情况下客户端再次进行手动或自动登录时，客户端将取出自动保存的密码提交到服务器。</p>

<p>&emsp;&emsp;我们可以想像到，如果将密码以明文的方式保存到客户端显然是不可取的。对密码进行加密处理后再保存客户端是一个可行的做法，但对密码加密的算法就值得我们去选择，base64肯定是不行的了，DES、RSA都是可以选择的加密方法，因为这些算法是可还原的算法，也就是说服务器收到加密密码后须还原成明文，再执行后续的登录业务。</p>

<p>&emsp;&emsp;交互示意图如下：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/05/seq_auto_login.jpg' width='' height='' title='保存密码登录处理时序'><span class='caption-text'>保存密码登录处理时序</span></span></p>

<p>&emsp;&emsp;简单地给大家解释一下上图中的流程：</p>

<p>&emsp;&emsp;客户端在第一次登录时，如果选择了记录用户名和密码，在第一次登录成功后系统将返回经过加密处理的密码，客户端在得加密密码后进行本地保存（时序2.1为客户端保存服务器端返回的经过加密处理的密码）。</p>

<p>&emsp;&emsp;客户端在第二次登录时提交的是曾经保存的加密密码，服务器得到密码后检测出来是经过加密处理的密码（时序3.1的处理）。</p>

<p>&emsp;&emsp;服务器端进行安全检测（比如本次登录ip和上次不同等方法），如果检测没有通过就进行异常处理，比如返回图片验证码让用户输入或要求用户重新输入密码等（时序3.2即是这个处理）。</p>

<p>&emsp;&emsp;安全检测通过后，系统将解密还原加密的密码（时序3.3的处理），这个过程可能会用到密钥，如果采用的是RSA加密算法，这时可从数据库中取出模和指数生成私钥，以便进行解密处理。</p>

<p>&emsp;&emsp;解密成功后，即可调用正常登录业务逻辑（时序3.4）。</p>

<p>&emsp;&emsp;下图是在浏览器cookies中保存了加密密码的界面截图：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/05/auto_login_cookies.jpg' width='' height='' title='cookies中的内容'><span class='caption-text'>cookies中的内容</span></span></p>

<p>&emsp;&emsp;不多说了，下面给出演示代码，我用的是RSA密码加密算法。首先贴出登录的html代码:<!--more--></p>

<p>``` html</p>

<div class="container">
         <div class="row" style="height: 50px;"></div>
          <div class="row">
              <div class="col-md-6 col-md-offset-2">
                  <form class="form-horizontal" role="form" id="loginForm">
                      <div class="form-group">
                          <label  class="col-sm-4 control-label">登录编码:</label>
                          <div class="col-sm-8">
                              <input value="lovo" type="text" name="name" class="form-control"  placeholder="请输入用户名">
                          </div>
                      </div>
                      <div class="form-group">
                          <label  class="col-sm-4 control-label">登录密码:</label>
                          <div class="col-sm-8">
                              <input value="111" type="password" name="password" id="i_pwd" class="form-control"  placeholder="请输入密码">
                          </div>
                      </div>
                       <div class="form-group">
                          <label  class="col-sm-4 control-label"></label>
                          <div class="col-sm-8">
                              <input value="1" type="checkbox" name="savePwd" id="chk_sp" >保存用户名和密码
                              <input value="1" type="checkbox" name="autoLogin"  id="chk_al">自动登录
                          </div>
                      </div>
                      <div class="form-group">
                          <div class="col-sm-offset-5 ">
                              <button type="button" class="btn btn-lg btn-primary" id="btn_login">登录</button>
                              <button type="reset" class="btn btn-lg col-sm-offset-2">重置</button>
                          </div>
                      </div>
                  </form>

              </div>
          </div>
     </div>


<p>```</p>

<p>&emsp;&emsp;接下来是页面的行为，即js代码：</p>

<p>``` js
<link rel="stylesheet" href="lib/bootstrap/css/bootstrap.min.css">
<link rel="stylesheet" href="lib/bootstrap/css/bootstrap-theme.min.css">
<link rel="stylesheet"  href="css/project.css"></p>

<script type="text/javascript" src="lib/jquery/jquery-1.7.2.min.js"></script>


<script type="text/javascript" src="lib/cookie/jquery.cookie.js"></script>


<script type="text/javascript">

$(function(){
    
    if ($.cookie("pwd")) {
        $("#i_pwd").val($.cookie("pwd"));
        $("#chk_sp").attr("checked", "checked");
    }

    $("#btn_login").click(function(){   
        
        //登录系统调用
        $.ajax({
            url:"login",
            type:"get",
            data:$("#loginForm").serialize(),
            //data:{"name":encodeURI($("input[name='name']").val()),"password":$("input[name='password']").val()},
            dataType:"json",
            success:function(result) {
                if (result.code == 0) {
                    alert(result.msg);
                } else {
                    if (!$.cookie("auto_login")) {
                        alert("恭喜" + result.data.name + "登录成功！");
                    }
                    //进行cookie的设置
                    if ($("#chk_sp").is(":checked")) {
                        $.cookie("pwd",result.data.encyPwd,{expires:result.data.expires});
                    } else {
                        $.cookie("pwd","",{expires:-1});
                    }
                    
                    if ($("#chk_al").is(":checked")) {
                        $.cookie("auto_login","1",{expires:result.data.expires});
                    } else {
                        $.cookie("auto_login","",{expires:-1});
                    }
                    
                    window.location.href = "main/pet_list.html";
                }
            }
            
        });

    })
    
    if ($.cookie("auto_login")) {
        $("#chk_al").attr("checked", "checked");
        $("#btn_login").click();
    }
    
});

</script>


<p>```</p>

<p>&emsp;&emsp;服务器端登录部分的代码：</p>

<p>``` java
@Controller
public class LoginAction {</p>

<pre><code>@Resource
private IMyService myService;

//保存用户名和密码天数
public static int EXPIRES_DAYS = 7;
//加密后的密码后缀
public static String ENCY_PWD_END = "*ENCY*";


/**
 * 登录系统
 */
@RequestMapping(value="/login", method=RequestMethod.GET)
public void login(
        @RequestParam("name") String nickName, 
        @RequestParam("password") String password,
        @RequestParam(value="savePwd",defaultValue="0") int savePassword,
        HttpSession session,
        HttpServletRequest request,
        HttpServletResponse response
        ) throws Exception {

    //nickName = URLDecoder.decode(nickName,"utf-8");
    nickName = new String(nickName.getBytes("iso8859-1"),"utf-8");


    ObjectMapper om = new ObjectMapper();

    ResponseResult result = new ResponseResult();

    try {
        if (password.endsWith(ENCY_PWD_END)) {
            //加密的密码，取掉最后的标识 
            Pet p = myService.getPetByNickName(nickName);
            if (p == null) {
                result.setCode(ResponseResult.FAIL);
                result.setMsg("登录用户不存！");
                om.writeValue(response.getOutputStream(), result);
                return ;
            }

            //check safe
            if (p.getLastLoginIp() != null 
                    &amp;&amp; ! p.getLastLoginIp().equals(request.getRemoteAddr())) {
                //安全检测规则，及安全检测失败的处理，由用户给出实现
            }
            //根据数据库保存的moduls和exponent生成私钥
             RSAPrivateKey rpk = RSAUtil.generatePrivateKey(p.getPrivateModulus(), p.getPrivateExponent());

            //将密码解密为原文处理
            Cipher cipherDecoder = Cipher.getInstance("RSA");
            cipherDecoder.init(Cipher.DECRYPT_MODE, rpk);
            byte[] orgDec = cipherDecoder.doFinal(Hex.decodeHex(password.substring(0,password.length() - ENCY_PWD_END.length()).toCharArray()));

            password = new String(orgDec) ;
        }

        Pet pet = myService.login(nickName, password);

        session.setAttribute(IConst.LOGIN_KEY, pet);

        Map data = new HashMap();
        data.put("name", pet.getNickName());


        //响应中加入cookie信息
        Cookie cookie = new Cookie("pwd", "");

        if (savePassword == 1) {
            //用户需要保存密码

            //生成rsa keyPair
            Map keyPair = RSAUtil.generateKeyPair();
            RSAPublicKey publicKey = (RSAPublicKey)keyPair.get(RSAUtil.PUBLIC_KEY);
            RSAPrivateKey privateKey = (RSAPrivateKey)keyPair.get(RSAUtil.PRIVATE_KEY);

            //下面私钥的模和指数保存至数据库
            pet.setPrivateModulus(privateKey.getModulus().toString());
            pet.setPrivateExponent(privateKey.getPrivateExponent().toString());
            pet.setLastLoginIp(request.getRemoteAddr());

            myService.updatePet(pet);

            Cipher cipherEncoder = Cipher.getInstance("RSA");
            cipherEncoder.init(Cipher.ENCRYPT_MODE, publicKey);
            //加密字串结果
            byte[] strEnc = cipherEncoder.doFinal(password.getBytes());

            String encyPwd = Hex.encodeHexString(strEnc) + ENCY_PWD_END;

            //响应中加入cookie信息
            cookie.setValue(encyPwd);
            cookie.setMaxAge(EXPIRES_DAYS*24*60*60);
            //cookie.seth

            data.put("encyPwd", encyPwd);
            data.put("expires", EXPIRES_DAYS);
        } else {
            //删除cookie
            cookie.setMaxAge(0);    
        }

        result.setData(data);

        response.addCookie(cookie);
        om.writeValue(response.getOutputStream(), result);

    } catch (SecurityException se ) {
        se.printStackTrace();

        result.setCode(ResponseResult.FAIL);
        result.setMsg(se.getMessage());

        om.writeValue(response.getOutputStream(), result);
    }

}
</code></pre>

<p>}</p>

<p>@Entity
@Table(name=&ldquo;t_pet&rdquo;)
@JsonFilter(&ldquo;myPet&rdquo;)
class Pet {</p>

<pre><code>private int id;
private String nickName;
private String password;
private boolean gender;
private Date birthday;


private String privateModulus;
private String privateExponent;
private String lastLoginIp;
//......略
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后贴出RSA工具类，因为上面的登录代码中用到了。</p>

<p>``` java RSAUtil.java
public class RSAUtil {</p>

<pre><code>public static final String PUBLIC_KEY = "public_key";
public static final String PRIVATE_KEY = "private_key";

//生成RSA密钥的位数
public static final int ENC_LENGTH = 512;

public static Map generateKeyPair() {

    KeyPairGenerator keyPairGen;
    try {
        keyPairGen = KeyPairGenerator.getInstance("RSA");
        keyPairGen.initialize(ENC_LENGTH);
        KeyPair keyPair = keyPairGen.generateKeyPair();

        Map keys = new HashMap();
        keys.put(PUBLIC_KEY, keyPair.getPublic());
        keys.put(PRIVATE_KEY, keyPair.getPrivate());

        return keys;

    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
    }


}

/**
 * 使用模和指数生成RSA公钥
 * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA
 * /None/NoPadding】
 * 
 * @param modulus
 *            模
 * @param exponent
 *            指数
 * @return
 */
public static RSAPublicKey generatePublicKey(String modulus, String exponent) {
    try {
        BigInteger b1 = new BigInteger(modulus);
        BigInteger b2 = new BigInteger(exponent);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(b1, b2);
        return (RSAPublicKey) keyFactory.generatePublic(keySpec);
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}

/**
 * 使用模和指数生成RSA私钥
 * 注意：【此代码用了默认补位方式，为RSA/None/PKCS1Padding，不同JDK默认的补位方式可能不同，如Android默认是RSA
 * /None/NoPadding】
 * 
 * @param modulus
 *            模
 * @param exponent
 *            指数
 * @return
 */
public static RSAPrivateKey generatePrivateKey(String modulus,
        String exponent) {
    try {
        BigInteger b1 = new BigInteger(modulus);
        BigInteger b2 = new BigInteger(exponent);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(b1, b2);
        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);
    } catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;上面的代码写得比较乱且粗糙，仅供大家了解我描述的处理步骤哦。如果你要把上面的代码用于生产环境则必须进行重构，可考虑把所有的逻辑都放入login这个业务方法中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java安全那些事之五（客户端安全）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/21/security5/"/>
    <updated>2014-04-21T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/21/security5</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;安全问题的水很深，“乌云”平台上曝光的一些漏洞不凡BAT(百度、阿里、腾讯)等一些大的公司，这些公司一般都有专业的安全团队都会出问题，更何况一些小的公司。本文简单讲解前端的一些安全知识，以引起大家注意。</p>

<p>&emsp;&emsp;前端常见的安全问题有：sql注入，xss以及csrf这几大类，而解决的核心思路就是：不要信任用户提交的任何东西。</p>

<p>&emsp;&emsp;sql注入问题虽然是一个古老的问题，但目前仍然还是有很多系统存在这个漏洞，避免sql注入漏洞说来也是比较简单的，程序开发人员要特别注意的是：不要把用户的输入直接拼装成sql然后执行。java中的主流orm框架如hibernate、ibatis等都考虑到这个问题，如果你用原生jdbc编程则需要预编译你的sql得到PreparedStatement，另外，alibaba的druid数据源中如果开启了wall filter也具备jdbc底层的sql注入防护功能。</p>

<p>&emsp;&emsp;再来看xss，xss是跨站脚本攻击，比如你的一个界面字段中用户输入了有具有执行能力的js代码，如果服务器端不做任何处理就将用户输入保存到数据库中，前端展示又直接将数据库中取出的内容拼在页面中，就会存在xss漏洞。当有其它用户在查看到这段信息时，就有可能把用户的cookie等信息发送到对方指定的服务器上，这真的是太危险了。</p>

<p>&emsp;&emsp;xss的解决办法主要是对客户输入的内容进行过淲处理，也有人叫“消毒”。</p>

<p>&emsp;&emsp;比如下面的一段代码，就实现了简单粗暴式的用户输入消毒。<!--more--></p>

<p>``` java</p>

<pre><code>private static Logger log = LoggerFactory.getLogger("[HtmlCodeUtil]");
private static final String regEx_script = "&lt;[\\s]*?script[^&gt;]*?&gt;[\\s\\S]*?&lt;[\\s]*?\\/[\\s]*?script[\\s]*?&gt;";//定义script的正则表达式{或&lt;script[^&gt;]*?&gt;[\\s\\S]*?&lt;\\/script&gt; }
private static final String regEx_style = "&lt;[\\s]*?style[^&gt;]*?&gt;[\\s\\S]*?&lt;[\\s]*?\\/[\\s]*?style[\\s]*?&gt;";  // 定义style的正则表达式{或&lt;style&gt;]*?&gt;[\s\S]*?&lt;\/style&gt; }
private static final String regEx_html = "&lt;[^&gt;]+&gt;";  // 定义HTML标签的正则表达式
private static Pattern p_script;
private static Pattern p_style;
private static Pattern p_html;

/**
 * 将字符串中的html内容替换成 “”
 * @param inputString
 * @return
 */
public static String html2Text(String inputHtmlString) {

    Matcher m_script;
    Matcher m_style;
    Matcher m_html;

    if (inputHtmlString == null) {
        return "";
    }
    ;

    try {
        m_script = p_script.matcher(inputHtmlString);
        inputHtmlString = m_script.replaceAll("");  // 过滤script标签

        m_style = p_style.matcher(inputHtmlString);
        inputHtmlString = m_style.replaceAll("");  // 过滤style标签

        m_html = p_html.matcher(inputHtmlString);
        inputHtmlString = m_html.replaceAll("");  // 过滤html标签
    } catch (Exception e) {
        log.error("filter html code error, content is:{}", inputHtmlString);
        //清空
        inputHtmlString = "您提交的内容有系统不允许的标签！";
    }

    return inputHtmlString; // 返回文本字符串
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;使用如下测试代码：</p>

<p>```java</p>

<pre><code>public static void main(String[] args) {
    System.out.println(HtmlUtils.htmlEscape("&lt;script&gt;while (true) {alert('aa');};&lt;/script&gt;&lt;p&gt;Hello&lt;/p&gt;"));
}
</code></pre>

<p>```
&emsp;&emsp;但是，上面的消毒代码过于简单粗暴，在一般在项目中我们可以使用开源的工具来帮助我们做过滤消毒的事。<a href="http://code.google.com/p/xssprotect/">xssprotect</a>、<a href="http://josephoconnell.com/java/xss-html-filter/">HTML filtering utility for Java</a>都实现了过滤消毒的功能。</p>

<p>&emsp;&emsp;请大家看看HTML filtering使用的演示代码如下：</p>

<p>```java</p>

<pre><code>    String html = "&lt;script&gt;while (true) {alert('aa');};&lt;/script&gt;&lt;p&gt;Hello&lt;/p&gt;";

    String result  = new HTMLFilter().filter(html);
    System.out.println(result);


    //输出的结果是：while (true) {alert('aa');};Hello
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后一个，也是比较棘手的个是CSRF漏洞攻击，CSRF和XSS不相同，CSRF以用户的身份进行合法的操作的一种攻击方式，也叫做跨站请求伪造。比如：伪造用户的一个合法请求<a href="">http://www.domain.com/addNews.do?title=发布重大新闻啦</a>,将这个地址放入一个超链接的href中，然后再发布到系统中。这个时候，如果一个合法用户登录成功后，无意中点击了这个链接，那么系统就会以他的身份发布一条新闻，而用户可能对自己发布新闻这个行为浑然不知。如果这个链接是一个转账或删除某些数据的操作，那么危险性就显而易见了。</p>

<p>&emsp;&emsp;解决CSRF不能简单地用过滤消毒、不允许发布本站地址的url等方式解决（因为url可以通过另的方式发送给用户），我们需要另想办法。</p>

<p>&emsp;&emsp;一种方案是使用restful风格设计系统api，get请求仅仅做等幂的数据查询，而post、delete、put会对数据进行修改，这样一来就可以防止链接中的CSRF修改数据带来的风险，但这并不能完全保证数据的安全，因为通过js、iframe、表单等方式还是可让伪造的地址以合法的身份运行，但是restful风格的设计确实可以提高CSRF攻击门槛，也是我们在今后所有项目中都必须采用的一种系统对外接口。</p>

<p>&emsp;&emsp;也有人采用检测http referer的方式，如果referer不是本站域名中的，则不予功能的执行，就像很多网站图片防盗链接的做法相同，这种检测referer的方式也可以阻止很大一部分通过QQ、邮件发来的CSRF攻击链接。</p>

<p>&emsp;&emsp;还有一种做法比较好，就是对每个url都带一个服务器端生成的token令牌，一个token用过一次后就失效（记得在struts1中就曾经有防止表单重复提交的功能，原理和我这讲的是相同的），这样可以有效防止CSRF，但同时也增加了系统的复杂性，因为服务器要在会话状态中记住每一个页面每一个操作链接的token，实际项目中可采用专门提取出来一个抽象层来做这事会更好些。</p>

<p>&emsp;&emsp;还是那句话，“道高一尺魔高一丈”，今天看似安全的东西也许明天就出现漏洞，没有绝对的安全，做为企业必须要有安全意识，并随时关注安全方面的资讯及内容。更多xss与csrf的内容请大家参阅<a href="https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/">《总结 XSS 与 CSRF 两种跨站攻击》</a>一文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java安全那些事之四（无状态安全认证）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/16/security4/"/>
    <updated>2014-04-16T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/16/security4</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文简单讲述web系统间安全调用设计方面的一些知识。目前异构系统间常用的调用方式有webservice、基于restful的json等方式，当客户端调用服务器端的服务接口时，服务器一定要对客户端的这次调用进行安全验证，以确保调用者具备相应的资格。</p>

<p>&emsp;&emsp;当客户端和服务器端完成一次调用的过程中，我们主要面临这样的一些威胁：</p>

<p>&emsp;&emsp;1、数据包被截获并得到明文，暴漏用户敏感信息（比如公用wiff环境中的信息安全）。</p>

<p>&emsp;&emsp;2、数据包被截获并篡改关键业务数据，再发送给服务器（比如修改转账数据包中的目的账号或金额等）。</p>

<p>&emsp;&emsp;3、数据包被截获，并反复"回放"（即多次向服务器发送相同的数据包，多次执行业务）。</p>

<p>&emsp;&emsp;4、其它的&hellip;..，以后有时间再继续补充，呵呵</p>

<p>&emsp;&emsp;对于第1条，解决的办法相对比较简单，使用基于SSL的https协议交换数据即可，请大家参阅我的<a href="/blog/2014/04/15/security3/">《java安全那些事之三（RSA及https）》</a>一文。</p>

<p>&emsp;&emsp;对于第2条，我们可以使用hash数据签名来防止数据被更改，想深入了解前请参阅我的<a href="/blog/2014/04/13/security1/">《java安全那些事之一(md5、sha)》</a>一文。</p>

<p>&emsp;&emsp;至于第3条，我们可以在请求中添加时间戳的方式来处理。具体做法是：在发送请求的数中，包含生成本次客户端请求的毫秒，并将此一并加入第2条的hash签名生成中，服务器收到请求后对该时间进行验证，如果超过允许的时间范围，就认为是过期的请求不予处理（当然，更好的做法是在业务层设计某种机制来处理这种重复性将更好）。</p>

<p>&emsp;&emsp;下面我写一个简单的demo，说明其中的交互原理，先看图：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/sign_architect.jpg' width='' height='' title='认证安全调用示例图'><span class='caption-text'>认证安全调用示例图</span></span></p>

<p>&emsp;&emsp;我的demo是一个webservice的例子，如果你是基于restful json的方式，本质上和本例是一样的，请自行类比。我先定义一个ws接口，接口中的sayHello方法是用来向客户问好的，如下：</p>

<p>``` java IMyService.java
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;</p>

<p>@WebService
public interface IMyService {</p>

<pre><code>/**
 * 该方法向某人问好
 * @param firstName 姓
 * @param lastName  名
 * @param appId     调用者id
 * @param timeMs    调用时间ms
 * @param sign      数据签名
 * @return
 */
public @WebResult(name="helloResult")String 
sayHello(@WebParam(name="fname")String firstName,
        @WebParam(name="lname")String lastName,
        @WebParam(name="appId")String appId, 
        @WebParam(name="ts")long timeMs, 
        @WebParam(name="sign")String sign );
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;正如上面的示意图所示，这个接口中除了传入业务需要的fname,lname之外，剩余的3个参数都是和安全验证相关的，appId是应服务方预先分配给我们的id，timeMs是客户发送该请求的时间，最后是数据签名。看看ws的实现类你就清楚了。<!-- more--></p>

<p>``` java MyServiceImpl.java
public class MyServiceImpl implements IMyService {</p>

<pre><code>//超时时间间隔
public static long howLong = 500;

@Override
public String sayHello(String firstName, String lastName, String appId, long time,  String sign) {

    String key = DB.getKey(appId);
    if (key == null) {
        return "对不起，你没有授权！";
    }

    String str_sign = Md5Encrypt.md5(firstName + lastName  + time + appId + key);
    if (! str_sign.equals(sign)) {
        return "数字签名错误！";
    }

    long now = System.currentTimeMillis();

    long dau = now - time;

    if (dau &gt; howLong) {
        return "时间戳验证失败！";
    }

    return "你好，" + firstName + lastName + "!";
}
</code></pre>

<p>}
```</p>

<p>``` java DB.java
/<em>*
 * 该类用来模拟数据库调用
 * @author ljh
 *
 </em>/
public class DB {</p>

<pre><code>private static Map&lt;String, String&gt; db = new HashMap&lt;String, String&gt;();

//保存经过我们授权的用户id及key
static {
    db.put("app001", "3c9909afec25354d551dae21590bb26e3");
    db.put("app002", "7eyBedfger6fg44ydfsd3ssefsdfsdfsd");
}

public static String getKey(String who) {
    return db.get(who);
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;实现类中的几个步骤需要说明：</p>

<p>&emsp;&emsp;1、先在数据库中查询客户是否已授权过，只有通过授权的客户端调用才可以继续。如果该用户授权过，取得该用户的appkey。</p>

<p>&emsp;&emsp;2、将业务参数，appid,ts等字段连接起来，加上appkey后一起做hash签名生成sign，本例中用的md5。</p>

<p>&emsp;&emsp;3、将计算得到的签名和用户上传上来的签名进行比对，以判断数据是否被篡改，如果签名不一致，终止后续执行。</p>

<p>&emsp;&emsp;4、获得当前服务器时间，并取出用户请求参数中的ts时间相减得到时间差，如果时间间隔超时了（这个超时时间要根据具体的环境确定，因为网络间调用本身就有延迟），就认为是无效的请求。</p>

<p>&emsp;&emsp;5、执行真正的业务逻辑。</p>

<p>&emsp;&emsp;6、调用对事后得给客户端发回响应，响应数据也采用相同的规则和方式生成sign，原理和服务器端的验证是一样的，客户端收到这个消息也要进行签名验证。</p>

<p>&emsp;&emsp;在架构设计上，上面的几个步骤中我们可以把1~4步专门提取出来，放到另外的一个逻辑层中进行处理，比如：AOP或filter等方式，同理，第6步也可提取出来专门处理。</p>

<p>&emsp;&emsp;客户端的调用代码，必须按照服务器要求的参数提交，并按同样的规则生成sign。下面是axis调用sayHello的ws的代码。</p>

<p>``` java
public class Client {</p>

<pre><code>public static void main(String[] args) throws Exception {

    String appId = "app001";
    String myKey = "3c9909afec25354d551dae21590bb26e3";

    String url = "http://localhost:8080/web_service_service/ws/helloService";

    Service service =  new Service();
    Call call = (Call) service.createCall();

    call.setTargetEndpointAddress(new URL(url));

    call.setOperationName(new QName("http://service.my.com/", "sayHello"));
    call.addParameter(
            "fname"
            , XMLType.XSD_STRING, ParameterMode.IN);
    call.addParameter(
            "lname"
            , XMLType.XSD_STRING, ParameterMode.IN);
    call.addParameter(
            "appId"
            , XMLType.XSD_STRING, ParameterMode.IN);

    call.addParameter(
            "ts"
            , XMLType.XSD_STRING, ParameterMode.IN);

    call.addParameter(
            "sign"
            , XMLType.XSD_STRING, ParameterMode.IN);

    call.setReturnType(org.apache.axis.encoding.XMLType.XSD_STRING);

    long now = System.currentTimeMillis();

    Object result = call.invoke(new Object[]{"言","娃娃", appId,  now,  Md5Encrypt.md5("言" + "娃娃"  + now + appId +  myKey)});

    System.out.println(result); 

}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;请大家注意call.invoke后面的参数，以及sign的生成规则，这个规则和服务器上的规则是一样的。另外，大家要注意，客户端上传的参数中一定要有appid，以表明自己的身份，appkey只用于生成hash过程中使用，服务器端也使用这个appkey来生成hash，因此，appkey必须要保密，如果appkey被他人获得，那么安全调用也就再无安全了。</p>

<p>&emsp;&emsp;本文中给大家介绍的方法在很多系统中都有广泛的应用，比如在线支持接口，开放平台api调用接口等都是基于这种方式，另外，这种方式的安全认识还有一个巨大的好处：服务器端不需要维护客户端状态，这样一来服务器端集群的伸缩性就变得十分简单了。</p>

<p>&emsp;&emsp;有想了解ws架构设计的同学，可以看我的<a href="/blog/2011/04/11/webservice-architect/">《Webservice架构设计》</a>一文。</p>

<p>&emsp;&emsp;好了，本文先到此结束，后续安全性的文章请大家继续关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java安全那些事之三（RSA及https）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/15/security3/"/>
    <updated>2014-04-15T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/15/security3</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;大家也许看到过有些网站的登录功能都使用的是hppts协议开头的网址，这个https就使用了RSA加密算法，可以有效保护敏感信息在传输过程中的安全性（即使被截获也无法破解）。</p>

<p>&emsp;&emsp;RSA算法属于不对称加密算法，信息发送方和接收方使用不同的密钥（即公钥私钥对）进行通讯，其中的公钥是可以对外公开的，私钥必须保密。信息发送方用公钥对信息进行加密，而信息接收方对信息的解密必须使用私钥，除此别无它法。反之，用私钥加密的信息也只能用公钥才能解密，因此，RSA算法不仅可以用作加密解决方案，也可以做为双方通讯过程中不可抵赖的凭证。示意图见下：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/rsa.jpg' width='' height='' title='RSA加密解密示意图'><span class='caption-text'>RSA加密解密示意图</span></span></p>

<p>&emsp;&emsp;在进行RSA加密解密之前，首先要生成公钥和私钥对。</p>

<p>&emsp;&emsp;我先给大家介绍一种基于JKS（也就是java keystore）的公钥私钥保存方式，我们用下面的命令是生成一个别名是mykey.mm的test.keystore文件，打开keystore文件的密码我输入的是123456。</p>

<p>```
C:\key>keytool -genkey -alias mykey.mm -keyalg RSA -keystore test.keystore
输入keystore密码：
Keystore 密码太短 -至少必须为6个字符
输入keystore密码：
再次输入新密码:
您的名字与姓氏是什么？
  <a href="sc">Unknown</a>：  liu
您的组织单位名称是什么？
  <a href="sc">Unknown</a>：  maxsoft
您的组织名称是什么？
  <a href="sc">Unknown</a>：  maxsoft.com
您所在的城市或区域名称是什么？
  <a href="sc">Unknown</a>：  cd
您所在的州或省份名称是什么？
  <a href="sc">Unknown</a>：  sc
该单位的两字母国家代码是什么
  <a href="sc">Unknown</a>：  cn
CN=liu, OU=maxsoft, O=maxsoft.com, L=cd, ST=sc, C=cn 正确吗？
  <a href="y">否</a>：  y</p>

<p>输入&lt;my.yy>的主密码</p>

<pre><code>    （如果和 keystore 密码相同，按回车）：
</code></pre>

<p>C:\key>
```</p>

<p>&emsp;&emsp;上面的命令会在c:\key下生成一个test.keystore文件，这个文件中包含了公钥和私钥，java中使用test.keystore文件并进行加密解密的调用代码写法如下：</p>

<p>``` java
public static void main(String[] args) throws Exception {</p>

<pre><code>    String alias = "mykey.mm";
    String password = "123456";

    KeyStore store = KeyStore.getInstance("JKS");
    store.load(new FileInputStream("c://key//test.keystore"), password.toCharArray());

    //得到公钥
    PublicKey publickey =  store.getCertificate(alias).getPublicKey();

    //得到私钥
    PrivateKey privateKey = (PrivateKey)store.getKey(alias, password.toCharArray());

    String orgStr = "言娃娃yanyaner.com";

    //加密处理
    Cipher cipherEncoder = Cipher.getInstance("RSA");
    cipherEncoder.init(Cipher.ENCRYPT_MODE, publickey);
    //加密字串结果
    byte[] strEnc = cipherEncoder.doFinal(orgStr.getBytes());
    System.out.println("RSA加密后的内容是：\r\n" + Base64.encode(strEnc));


    //解密处理
    Cipher cipherDecoder = Cipher.getInstance("RSA");
    cipherDecoder.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] orgDec = cipherDecoder.doFinal(strEnc);
    System.out.println("RSA解密后的内容是：\r\n" + new String(orgDec));
</code></pre>

<p>```</p>

<p>&emsp;&emsp;加密过程用到了公钥，而解密用到了私钥。反之亦然，即加密用私钥，解密用公钥。代码输出的结果是：</p>

<p><code>
RSA加密后的内容是：
Mow+hRU2V8rt6lRjT1ydb7Lmdwmb1QeelDRxVh0O8kb6FZXWfs6fVuNMMDn8G7w5gA4mnheM+A/z
OUaU83q1bsXWFni3p+ER9oOy/Wx0rwHGKIYxvqTyrYJgOVnpNrwwa5b2GljWVKdlai3BPgxzY+kk
Oj2IsLcU9OyXmr5cqYdLlC47Vtb++CUGg+6X071cArTw90KYZk2TYSdawvS3BbgzFcA/BHz36vsK
4Q7sjsHY2SG4ITiq8pAM3pXYHLbTvUH4SLBdJTMry1kEGqvgJA3dy63Ut+Rl43hZ+XJZICPPAvSo
xD3Euo/5bhyO1Y8Jbdrj7C4eHADMZ+Zpn7RfGA==
RSA解密后的内容是：
言娃娃yanyaner.com
</code></p>

<p>&emsp;&emsp;接下来，我们使用另外一种公钥私钥保存的方式，我们通过openssl这种使用更为广泛的基于RSA的工具生成加密公钥私钥对。<!-- more--></p>

<p>&emsp;&emsp;在windows下通过openssl来生成私钥，请在cmd中输入下面的命令，这个命令会生成私钥文件rsa_private.key，我们可以指定文件名：</p>

<p><code>
D:\temp\openssl&gt;openssl genrsa -out rsa_private.key 1024
Generating RSA private key, 1024 bit long modulus
....++++++
........++++++
unable to write 'random state'
e is 65537 (0x10001)
</code></p>

<p>&emsp;&emsp;接下来再根据私钥来生成公钥文件rsa_public.key，如下命令：</p>

<p><code>
D:\temp\openssl&gt;openssl rsa -in  rsa_private.key -out rsa_public.key -pubout
writing RSA key
</code></p>

<p>&emsp;&emsp;通过上面的命令，我们就生成了公钥和私钥文件，这时候的私钥还不能直接被java使用，接下来需要对rsa_private.key私钥文件进行PKCS#8编码，如下命令：</p>

<p><code>
D:\temp\openssl&gt;openssl pkcs8 -topk8 -in rsa_private.key -out pkcs8_rsa_private.key -nocrypt
</code></p>

<p>&emsp;&emsp;通过上面三个命令，我们在d:\temp目录下会存在三个文件，如下图：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/ppkey_files.jpg' width='' height='' title='RSA密钥文件'><span class='caption-text'>RSA密钥文件</span></span></p>

<p>&emsp;&emsp;好了，可以写java代码了。</p>

<p>``` java
/**</p>

<pre><code> * 得到公钥对象
 * @param publicKeyFile
 * @return
 * @throws Exception
 */
public static RSAPublicKey getRSAPublicKey(String publicKeyFile) throws Exception {
    X509EncodedKeySpec keySpec= new X509EncodedKeySpec(readKeysAsByteArray(publicKeyFile));  
    KeyFactory keyFactory= KeyFactory.getInstance("RSA");  
    return (RSAPublicKey) keyFactory.generatePublic(keySpec);  
}

/**
 * 得到私钥对象
 * @param priveKeyFile
 * @return
 * @throws Exception
 */
public static RSAPrivateKey getRSAPrivateKey(String priveKeyFile) throws Exception {
    PKCS8EncodedKeySpec keySpec= new PKCS8EncodedKeySpec(readKeysAsByteArray(priveKeyFile));  
    KeyFactory keyFactory= KeyFactory.getInstance("RSA");  
    return  (RSAPrivateKey) keyFactory.generatePrivate(keySpec); 
}


/**
 * 读取密钥文件为byte数组
 * @param fileName
 * @return
 * @throws Exception
 */
public static byte[] readKeysAsByteArray(String fileName) throws Exception {

    BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)));

    String line = "";
    StringBuilder sb = new StringBuilder();
    while ((line = reader.readLine()) != null) {
        if ( ! line.startsWith("-----")) {
            sb.append(line).append("\r");
        } 
    }

    BASE64Decoder base64Decoder= new BASE64Decoder();

    return  base64Decoder.decodeBuffer(sb.toString());
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;需要解释的是，上面代码中的readKeysAsByteArray方法，是用来读取key文件的，因为key文件中的多余行我们要去掉，比如，下面就是一个私钥文件内容，文件头和尾都有多余的信息：</p>

<p>```</p>

<p>&mdash;&mdash;-BEGIN PRIVATE KEY&mdash;&mdash;&ndash;
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANmxTOBVBVrl25Ge
sCD3b57dxK7LLK2RiSrBvdoaBK/g5mVV5RggG3GI8cCC4gDv2oGWNdwbNJiGZreZ
Knm4G0y5Pq86tuJO6vmYKrD0cEZlp0uh9b2cAeP3ry+87VwpIFnpaiXCzB6xhEb1
2FvP8hbs/K7iHkLbysUB7F/XUbRPAgMBAAECgYEAj84lB6iCghqH4nlexlhOXzcG
v6Ut3XbfkuQrY1F+uSSrblPApCBJoMWjVdXgMFhCEwrEh6NdKkjWwAApZADv3pXj
m/LXQYwRaKExJtTdl38ujSfL/tN5vSaMqmnnDa6IMc0AfjjWHDuX5Jurqi47l8Rh
yF4gSvXTfsAwD8ZT6XECQQD3I8orEj4fAAIKF4KvmHREl9yVKr+iqaT7q4q5C94i
Gs/RyN421NiR9ns5+R3ooJ+mBufMsUTLQFvPgmcB+VfXAkEA4X8/owQ50xlB3lSC
dHotY4rE7N3gCeLxN+FpzxK+6lZjelxjsQ0wFKMrvLjQFZWcDrLcCOFE3ldCJGOS
+3CYSQJALnR0yRnZwXv/5iO7NgSjPk2JciSh9xKKZ6A8KEJ509FUZSur0YS63N0H
FsOkAplGyS+dHNXph4cmeuAZOr7C6wJBAIC5x3Yj326mqHdm/uHHLUn52djuAAsk
xlcEEwbmyJ21mywqua5EvQHK9BjT19W6hk/NwtY+4rWaUmO7hBiNeiECQDhAAYha
huZwqLVB/UUMdqxJreEee5q+SyaAn+aHLWCq0vYQ9DEU72vAhvgnQQ0oTLPkQ5od
NBCD4J/2OGQOIH8=
&mdash;&mdash;-END PRIVATE KEY&mdash;&mdash;&ndash;</p>

<p>```</p>

<p>&emsp;&emsp;信息发送方、接收方的代码，大家可以参照下面的示例代码写出：</p>

<p>``` java
public static void main(String[] args) throws Exception {</p>

<pre><code>    RSAPublicKey publickey = getRSAPublicKey("D:/temp/openssl/rsa_public.key");
    RSAPrivateKey privateKey = getRSAPrivateKey("D:/temp/openssl/pkcs8_rsa_private.key");

    String orgStr = "言娃娃-yanyaner.com";

    //加密处理
    Cipher cipherEncoder = Cipher.getInstance("RSA");
    cipherEncoder.init(Cipher.ENCRYPT_MODE, publickey);

    //加密字串结果
    byte[] strEnc = cipherEncoder.doFinal(orgStr.getBytes());

    System.out.println("加密后的内容是：\r\n" + Base64.encode(strEnc));


    //解密处理
    Cipher cipherDecoder = Cipher.getInstance("RSA");
    cipherDecoder.init(Cipher.DECRYPT_MODE, privateKey);

    byte[] orgDec = cipherDecoder.doFinal(strEnc);
    System.out.println("解密后的内容是：\r\n" + new String(orgDec));

}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最终输出结果是：</p>

<p>```</p>

<p>加密后的内容是：
dzxXcllos3pROKeWGShl3uu0KQdRrJiYHhUGqcHT6DkPRW71cYFITj0XlwkIjaWGw8CyJbc5r/AR
qwtuVFN/IybI/kUdfuAVrmDuIVn86rlkAEVbZTel8WOoUlRmlyflhbYUk0SeflcKdFgVELk5WVZ+
J/DGn1kJ23KcIXbC1YM=</p>

<p>解密后的内容是：
言娃娃-yanyaner.com</p>

<p>```</p>

<p>&emsp;&emsp;通过阅读上面的调用代码，我想大家对RSA加密算法已经有了一些认识，在这些代码中我们发现，RSA的私钥的存放必须要得到很好的保护，如果私钥被他人得到，那么双方的通讯的内容也就公开了。有些童鞋在架构设计时也会考虑将密钥分段存放，这样的话没有任何一个人可以得到完整的密钥，在应用计算时再从各个地方得到分段并组装在一起，这样的安全性就比较高了。</p>

<p>&emsp;&emsp;最后，我给大家简单介绍一下tomcat(其实nginx这些服务器的https配置与之类似，明白了原理后，就是配置文件的写法不一样而已)中的基于RSA的https（https是在数据链路层进行通讯加密，这个协议用到了rsa,md5,des等一些加密算法，算是设计精妙）配置内容。配置tomcat的https支持hppts，首先也是要建立RSA证书，同样是基于JKS的，如下命令即可：</p>

<p>```
D:\temp\tomcat-cer>keytool -genkey -alias mytomcat -keyalg RSA -keystore tomcat.keystore
输入密钥库口令:
再次输入新口令:
您的名字与姓氏是什么?
您的组织单位名称是什么?
您的组织名称是什么?
您所在的城市或区域名称是什么?
您所在的省/市/自治区名称是什么?
该单位的双字母国家/地区代码是什么?
CN=liu, OU=maxsoft, O=org, L=cd, ST=sc, C=cn是否正确?
输入 <mytomcat> 的密钥口令</p>

<pre><code>    (如果和密钥库口令相同, 按回车):
</code></pre>

<p>```</p>

<p>&emsp;&emsp;接下来修改tomcat 的 server.xml中Connector部分的配置：</p>

<p>``` xml server.xml
&lt;Connector protocol=&ldquo;org.apache.coyote.http11.Http11Protocol&rdquo;</p>

<pre><code>           port="8443"  SSLEnabled="true"
           maxThreads="150" scheme="https" secure="true"
           clientAuth="false" sslProtocol="TLS" 
           keystoreFile="D:/temp/tomcat-cer/tomcat.keystore"
           keystorePass="123456"
           /&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;要注意的是，我将文件中的protocol由protocol=&ldquo;HTTP/1.1&rdquo; 改为了protocol=&ldquo;org.apache.coyote.http11.Http11Protocol"，因为我的tomcat6是6.0.36，会报No Certificate file specified or invalid file format错误，高版本的tomcat默认AprLifecycleListener是高为on的，你在配置文件中可以看到这个开关SSLEngine="on&rdquo; ，只有修改后才可以正确运行。</p>

<p>&emsp;&emsp;进入浏览器访问你的项目，会发现https已经生效。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/browser_ssl_warning.jpg' width='' height='' title='浏览器中https警告'><span class='caption-text'>浏览器中https警告</span></span></p>

<p>&emsp;&emsp;如果你不想让浏览器出现这样的警告，那么你就得到第三方认证的证书机构去申请密钥了，而不能像上面一样通过命令行自己生成密钥，因为我们生成的密钥浏览器认为有风险而不被信任(当然如果用户通过添加例外，浏览器仍然可以继续访问这个https的网站)。</p>

<p>&emsp;&emsp;另外大家要注意的是，rsa算法比较耗费时间，效率低下，而且对要加密的内容长度上也有限制，因此一般可用来对密码等长度较短的明文加密。因此，在https通讯过程中，只有在通讯开始的握手过程中会使用rsa以交换对称加密密钥，在后期的数据通讯中都是采用的DES对称加密算法。</p>

<p>&emsp;&emsp;关于RSA的介绍先到此，下篇文章接着讲一些架构级的安全认证设计知识，请大家关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java安全那些事之二（base64,des）]]></title>
    <link href="http://yanyaner.com/blog/2014/04/14/security2/"/>
    <updated>2014-04-14T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/04/14/security2</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;和Hash的不可逆相比，还有一些算法是可逆的，也就是数据在发送方经过加密后，再传输至接收方，接收方对收到的信息后进行解密得到明文。</p>

<p>&emsp;&emsp;我们先来看可逆算法中最简单的一种：Base64，请先看代码。</p>

<p><code>java
String b64result = new String(Base64.encodeBase64("刘江华".getBytes()));
System.out.println("base64加密后密文是：" + b64result);
String orgStr = new String(Base64.decodeBase64(b64result.getBytes()));
System.out.println("base64解密为明文是：" + orgStr);
</code></p>

<p>&emsp;&emsp;上面代码的输出是：</p>

<p><code>
base64加密后密文是：5YiY5rGf5Y2O
base64解密为明文是：刘江华
</code></p>

<p>&emsp;&emsp;由此可见，base64加密算法会把明文加密后变成我们看不明白的密文，但我们也可以通过base64算法很快解密得到明文，这也就是说，如果信息在传输过程中被第三方截获，对方又知道你采用的是base64算法，那么你的密文也就无秘密可言。</p>

<p>&emsp;&emsp;既然如此，是不是说base64就完全无用了呢？当然不是！如果我们仔细观察会发现，该算法输出的内容都是数字和字母之类的ascii可显示字符，而无论你的输入是中文还是特殊字符。这一特点对于信息传输过程中，明文中包含特殊字符而可能产生乱码的情况非常有用。比如：对要传输的内容进行base64编码，再通过http协议传输到接收方，接收方再按base64解码得到明文。base64还有其它的一些用处，比方说将byte[] 转换为可显示字符等等，我不再多说。base64运行示意图如下：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/base64.jpg' width='' height='' title='base64加密解密示意图'><span class='caption-text'>base64加密解密示意图</span></span></p>

<p>&emsp;&emsp;接下来，我们再来看看另外一种加密强度更好的方法：DES加密算法。DES属于对称加密算法，信息发送者通过一个私钥来加密信息后再传输，而信息接收者也使用同样的一个私钥完成信息的解密。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/des.jpg' width='' height='' title='des加密解密示意图'><span class='caption-text'>des加密解密示意图</span></span></p>

<p>&emsp;&emsp;之所以称DES为对称加密算法，主要原因是信息发送方和信息接收方使用的是相同的密钥，上图中的private key就是。代码写出来就是下面这样的：<!-- more--></p>

<p>``` java</p>

<pre><code>/**
 * des加密示例代码
 * @param orgData
 * @param privateKey
 * @return
 * @throws Exception
 */
public static byte[] desEncode(byte[] orgData, String privateKey) throws Exception {

    KeyGenerator kgenerator = KeyGenerator.getInstance("DES");
    kgenerator.init(new SecureRandom(privateKey.getBytes()));

    Cipher cipher = Cipher.getInstance("DES");
    cipher.init(Cipher.ENCRYPT_MODE, kgenerator.generateKey());

    return cipher.doFinal(orgData);
}

/**
 * des解密示例代码
 * @param passedData
 * @param privateKey
 * @return
 * @throws Exception
 */
public static byte[] desDecode(byte[] passedData, String privateKey) throws Exception {

    KeyGenerator kgenerator = KeyGenerator.getInstance("DES");
    kgenerator.init(new SecureRandom(privateKey.getBytes()));

    Cipher cipher = Cipher.getInstance("DES");
    cipher.init(Cipher.DECRYPT_MODE, kgenerator.generateKey());

    return cipher.doFinal(passedData);
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;上面的加密和解密方法中，均传入了一个desPrivateKey，这个key是两方共用的，调用示例代码如下，其中的desPrivateKey是随机生成的一个私钥，两方共同持有。</p>

<p>``` java</p>

<pre><code>    String orgStr = "hello,刘江华";

    String desPrivateKey = "3c9909afec25354d551dae21590bb26e3";

    byte[] en_bytes = desEncode(orgStr.getBytes(), desPrivateKey);

    System.out.println("DES加密后的内容是：" + new BASE64Encoder().encode(en_bytes));

    byte[] de_bytes = desDecode(en_bytes, desPrivateKey);
    System.out.println("DES解密后的内容是：" + new String(de_bytes));
</code></pre>

<p>```</p>

<p>&emsp;&emsp;代码执行后的输出如下：</p>

<p><code>
DES加密后的内容是：VExT39v/M504pQY/L+d84w==
DES解密后的内容是：hello,刘江华
</code></p>

<p>&emsp;&emsp;由此我们可以得出结论，DES算法的关键在于私钥的安全保管，如果信息发送方和接收方中的任何一个泄露了私钥，双方的通讯过程也就无法保密了，因此，密钥的保密是一个关键。</p>

<p>&emsp;&emsp;下一篇文章，我继续给大家讲解RSA算法及其应用，RSA这是一种非对称加密算法，请大家随时关注我的博客。</p>
]]></content>
  </entry>
  
</feed>
