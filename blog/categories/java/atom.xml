<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：java | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2014-07-20T17:06:22+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[服务器端无状态参数验证实现]]></title>
    <link href="http://yanyaner.com/blog/2014/07/20/security-filter-sign/"/>
    <updated>2014-07-20T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/20/security-filter-sign</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;我在<a href="/blog/2014/04/16/security4/">《Java安全那些事之四（无状态安全认证）》</a>中提到了在无状态安全认证中，对数据签名的验证可以考虑通过AOP或filter的方式专门提取到了一个层中去处理，很多人在问我有没有源代码，现在贴出请大家参考。</p>

<p>&emsp;&emsp;当我们有了这个独立的层次，我们在应用控制器中就不再需求做这方面的检测了，着实方便了许多。<!-- more--></p>

<p>``` java ApiSeccurityCheckFilter.java</p>

<p>/<em>*
 * 无状态签名、超时检测过滤器实现
 *
 * @author ljh
 *
 </em>/</p>

<p>@Component
public class ApiSeccurityCheckFilter extends OncePerRequestFilter {</p>

<pre><code>//默认调用超时（单位 ms）
public static final int API_CALL_TIME_OUT = 500;

public static final Logger LOG = LoggerFactory.getLogger(ApiSeccurityCheckFilter.class);


//调用超时（单位 ms）
private int api_call_timeout = API_CALL_TIME_OUT;

@Resource
private IAppManagementService ams;

@Resource
private JsonMapper jm;

@Override
protected void doFilterInternal(HttpServletRequest req,
        HttpServletResponse resp, FilterChain fc)
        throws ServletException, IOException {

    // 取到的形如： /myplatform/api/crm324123123126/login
    String uri = req.getRequestURI();

    int start = uri.lastIndexOf("/api/") + 5;

    String appKey = uri.substring(start, start + 15);


    //（1）检测appKey是否授权
    App app = ams.findAppByKey(appKey);
    if (app == null) {
        if (LOG.isDebugEnabled()) {
            LOG.debug("appKey {} error, app is null!", appKey);
        }
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("app调用未经授权！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（2）进行必要参数的验证
    String client_sign = req.getParameter("sign");
    String client_ts  = req.getParameter("ts");

    if (client_sign == null || "".equals(client_sign.trim()) ||
        client_ts == null || "" .equals(client_ts.trim())
            ) {
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("必须提供sign, ts参数项！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（3）进行数据签字验证
    StringBuilder sb = new StringBuilder();

    List&lt;String&gt; keys = new ArrayList&lt;String&gt;();
    for (Enumeration&lt;String&gt; params = req.getParameterNames(); params.hasMoreElements();) {
        String paramKey = params.nextElement();
        if (paramKey.equalsIgnoreCase("sign")) {
            continue;       }
        keys.add(paramKey);
    }
    Collections.sort(keys);


    for (int i = 0; i &lt; keys.size(); i++) {
        String key = keys.get(i);
        String value = req.getParameter(key);

        if (i == keys.size() - 1) {//拼接时，不包括最后一个&amp;字符
            sb.append(key).append("=").append(value);
        } else {
            sb.append(key).append("=").append(value).append("&amp;");
        }
    }


    String sign = DigestUtils.md5Hex(sb.toString() + app.getAppCode());

    if (! sign.equals(client_sign)) {
        LOG.debug("sign error, uri is {}.", uri);
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("数字签名错误！");
        jm.writeValue(resp.getOutputStream(), message);
        return;
    }

    //（4）方法调用超时检测
    long times = System.currentTimeMillis() - Long.parseLong(client_ts);
    if (times &gt; api_call_timeout) {
        RespMessage message = new RespMessage();
        message.setCode(RespMessage.API_PARAM_ERROR);
        message.setMsg("调用超时！");
        jm.writeValue(resp.getOutputStream(), message);
        LOG.debug("api call timer out, uri is {}, used time {} ms.", uri, times);
        return;
    }

    // （5）继续向后执行
    fc.doFilter(req, resp);


}

public void setApi_call_timeout(int api_call_timeout) {
    this.api_call_timeout = api_call_timeout;
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;在spring配置文件中，加入这个过滤器的配置，代码如下：</p>

<p>``` xml spring-aciton.xml</p>

<pre><code>&lt;!-- 第三方应用程序调用api时的检测权限及安全过滤器,名称要和web.xml中的DelegatingFilterProxy指定的targetBeanName名称一致 --&gt;
&lt;bean name="apiSeccurityCheckFilter" class="com.lovo.platform.monitor.filter.ApiSeccurityCheckFilter"&gt;
    &lt;property name="api_call_timeout" value="1000"&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后，在web.xml中配置DelegatingFilterProxy，通过配置url-pattern指定，所有还aip路径的，都经过这个过滤器，也就是说本系统对外界暴露的restapi调用，有了一个统一的安全认证层次。具体代码如下：</p>

<p>``` xml  web.xml
  <filter></p>

<pre><code>&lt;filter-name&gt;apiSeccurityCheckFilter&lt;/filter-name&gt;
&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;
&lt;init-param&gt;
    &lt;param-name&gt;targetBeanName&lt;/param-name&gt;
    &lt;param-value&gt;apiSeccurityCheckFilter&lt;/param-value&gt;
&lt;/init-param&gt;
&lt;init-param&gt;
    &lt;param-name&gt;API_CALL_TIME_OUT&lt;/param-name&gt;
    &lt;param-value&gt;500&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>

<p>  </filter>
  &lt;filter-mapping></p>

<pre><code>&lt;filter-name&gt;apiSeccurityCheckFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;
</code></pre>

<p>  &lt;/filter-mapping></p>

<p>```</p>

<p>&emsp;&emsp;大家要注意的是，targetBeanName中的名称，一定要和spring-aciton.xml中配置的bean的名称一致哦。</p>

<p>&emsp;&emsp;最后解释一下，用到OncePerRequestFilter的原因是，过滤器中要进行业务层方法的调用，使用了OncePerRequestFilter后会非常自然地得到业务对象哈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring mvc restful服务器端数据验证实现]]></title>
    <link href="http://yanyaner.com/blog/2014/07/16/spring-restful-validator/"/>
    <updated>2014-07-16T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/16/spring-restful-validator</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;服务器端的数据合法性验证非常有必要而且是必须的，特别是restful api中场景中存在多种类型的客户端，你不能保证每种客户端都已经做好了本地化的数据合法性验证。</p>

<p>&emsp;&emsp;对于业务逻辑来说，我们一般会对新增业务操作以及修改业务操提交上来的数据进行验证，而一般的mvc框架都有对验证功能的封装集成，spring mvc也不利外，但这些集成的验证都和特定的视图标签有密切的联系，比如jsp标签库，而在我所说的restful场景中，服务器上往往不做页面的生成工作，那自然是用到到这些标签了。怎么办呢？只有自己做一些封装和改造了，简单的说，就是我们自己去解析BindingResult中的信息。</p>

<p>&emsp;&emsp;请看我下面封装的通用数据返回类代码，其中sendValidationFaildResponse方法会将验证出来的错误信息返回给客户端：</p>

<p>``` java RespMessage.java
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;</p>

<p>import javax.servlet.http.HttpServletResponse;</p>

<p>import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;</p>

<p>import com.my.ms.framework.commons.JsonMapper;</p>

<p>/<em>*
 * 向客户端返回的统一消息
 * @author ljh
 *
 </em>/
public class RespMessage {</p>

<pre><code>public static final int API_PARAM_ERROR = 10;
public static final int SUCCESS = 1;
public static final int FAIL = 0;
public static final int DATA_VALIDATION_ERROR = -1;


//操作状态码  0：操作失败，1：成功， 其它数据，由客户自定义
//-1:数据验证失败 ， 其它取值含义由客户自定义
//10:api调用出错参数错误（特别是在无状态webservice之类的调用情况下）
private int code = SUCCESS;
//要返回的消息
private String msg;
//返回的数据
private Object data;
//消息版本，保留待用
private String version;


public int getCode() {
    return code;
}
public void setCode(int code) {
    this.code = code;
}
public String getMsg() {
    return msg;
}
public void setMsg(String msg) {
    this.msg = msg;
}
public Object getData() {
    return data;
}
public void setData(Object data) {
    this.data = data;
}


public boolean sendValidationFaildResponse(
        BindingResult result, 
        JsonMapper mapper,
        HttpServletResponse resp) {
    if (result.getFieldErrors().size() &gt; 0) {
        this.code = DATA_VALIDATION_ERROR;
        //这里只取字段类型的错误
        List&lt;FieldError&gt; errors = result.getFieldErrors();
        Map error_map = new HashMap();
        for (FieldError e : errors) {
            error_map.put(e.getField().toString(), e.getDefaultMessage());
        }
        this.data = error_map;
        this.msg = "你提交的数据没有通过验证！";

        try {
            mapper.writeValue(resp.getOutputStream(), this);
        } catch (Exception ex) {
            ex.printStackTrace();
        } 

        return true;

    }

    return false;
}
</code></pre>

<p>}</p>

<p>```
&emsp;&emsp;接下来再来看看添加数据的action代码，这段代码中首先进行了数据合法性的验证：<!-- more--></p>

<p>``` java UserAction.java</p>

<p>@RequestMapping(value=&ldquo;/user&rdquo;, method=RequestMethod.POST)</p>

<pre><code>public void addUser(
        @Valid User user,
        BindingResult result
        ) {

    resp.setCharacterEncoding("utf-8");

    RespMessage respMsg = new RespMessage();

    //进行数据合法性的验证
    if (respMsg.sendValidationFaildResponse(result, jm, resp)) {
        return ;
    }       

    //.... other porcess 其它代码略去
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;实体对象中，添加字段验证注解，如下（这里暂时没有使用国际化）：</p>

<p>``` java User.java</p>

<p>@Entity
@Table(name=&ldquo;t_user&rdquo;)
@JsonFilter(&ldquo;video_user&rdquo;)
public class User implements Serializable {</p>

<pre><code>@Id
@Column(name="pk_id")
@GeneratedValue(strategy=GenerationType.IDENTITY)
private int id;

@Column(name="f_name")
private String name;

@Column(name="f_code")
@NotEmpty(message="编码不能为空！")
private String code;

@Column(name="f_password")
@NotEmpty(message="登录密码不能为空！")
private String password;

//................其它代码略去
</code></pre>

<p>```</p>

<p>&emsp;&emsp;最后，将验证相关的bean对象加入到apirng的配置文件中。</p>

<p>``` xml spring-action.xml</p>

<pre><code>&lt;!-- 读取国际化资源配置文件 --&gt;
&lt;bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
    &lt;property name="basename" value="res/appResources"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 添加验证对国际化的支持 --&gt;
&lt;bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"&gt;
    &lt;property name="validationMessageSource" ref="messageSource"&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;!-- 启用spring mvc注解驱动 --&gt;
&lt;mvc:annotation-driven validator="validator"  /&gt;
</code></pre>

<p>```</p>

<p>&emsp;&emsp;国际化的部分仅仅是为了以后扩展方便，同时需要你在src下建立res目录，并写一个空的appResources.properties文件。</p>

<p>&emsp;&emsp;针对上面的action访问，如果我们不输入必须要填写的字段，我们会得到如下的输出结果：</p>

<p>``` json
{
&ldquo;code&rdquo;:-1,
&ldquo;msg&rdquo;:&ldquo;你提交的数据没有通过验证！&rdquo;,
&ldquo;data&rdquo;:</p>

<pre><code>{
"code":"编码不能为空！",
"password":"登录密码不能为空！"
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;这个json信息，在jquery中可以通过下面的代码解析出错误详细信息，并进行显示：</p>

<p>``` js
success:function(data){</p>

<pre><code>            if (data.code == -1) {
                $.each(data.data,function(key,data){
                    alert(key + ": " + data);
                });
                return;
            }

            //........其它代码略去
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spring mvc 表现层测试]]></title>
    <link href="http://yanyaner.com/blog/2014/07/15/spring-mvc-test/"/>
    <updated>2014-07-15T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/07/15/spring-mvc-test</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;表现层、业务层、持久层是一个经典的分层架构，在构建软件系统时，一般会从持久层开始，逐渐向上层编码、构建，每一层完成编码后必须保证正确后，再写上一层，这就像修房子一样，打牢地基再砌墙。</p>

<p>&emsp;&emsp;另外需提一下，一般公司的项目中对持久层都有通用的封装（比如baseDao），因此，持久层的代码在这种情况下就表现为ORM注解或sql语句块，如果是hibernate注解，在项目启动时就可以发现大部分配置上的错误，如果是mybatis或ibatis依旧可以放到业务层中去测试。因此，我认为持久层不用专门去写测试代码了，我们针对业务层的测试即可发现持久层的问题。</p>

<p>&emsp;&emsp;还有，表现层在采用了restful及json数据返回格式后，前端的交互编码其实可以很早就进行，即和后台编码同步进行，我计划有时间去实现一个这样的模拟系统服务器，在设计人员完成rest api设计后，就可以将api输入这个模拟服务器系统，前端程序员依照rest api就可以和模拟服务器交互了，这样前后台就可以分工同步开发了，效率一定会提升哦。</p>

<p>&emsp;&emsp;言归正传，下面我主要来讲讲服务器端的action测试，因为在这个时候，我们还没有任何界面交互，而仅仅只有一个restful api。如何对action进行测试，在早期的spring版本中还比较困难，网上很多同学都是自己封装，但依然不方便不强大。好消息是从spring 3.2开始，提供了对spring mvc完善的支持，请看下面的这个登录action代码及测试。<!-- more--></p>

<p>``` java LoginAction.java
/<em>*
 * 登录系统
 * @author ljh
 *
 </em>/
@Controller
public class LoginAction {</p>

<pre><code>@Resource
private IUserService userService;

@Resource
private JsonMapper jm;


@RequestMapping(value="/login", method=RequestMethod.GET)
public void loginSystem(
        @Valid User user,
        BindingResult result,
        HttpSession session,
        HttpServletResponse resp
        ) throws Exception {

    resp.setCharacterEncoding("utf-8");

    RespMessage respMsg = new RespMessage();

    if (respMsg.sendValidationFaildResponse(result, jm, resp)) {
        return ;
    }

    try {
        User u = userService.login(user.getCode(), user.getPassword());
        session.setAttribute(IConst.LOGIN_USER_SESSION_KEY, u);
        respMsg.setData(u);

    } catch (Exception ex) {
        respMsg.setCode(RespMessage.FAIL);
        respMsg.setMsg(ex.getMessage());
    }

    jm.writeValue(new FilterProvider()
    .addIncludeProperties("video_user", "id", "name", "classes") 
    .addIncludeProperties("video_classes", "id" ,"name")
    ,resp.getOutputStream(), respMsg);

}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;对上面这个rest方法如何进行测试呢？非常简单，代码如下：</p>

<p>``` java LoginActionTest.java</p>

<p>import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.WebApplicationContext;</p>

<p>import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.<em>;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.</em>;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</p>

<p>@RunWith(SpringJUnit4ClassRunner.class)
@Transactional
@WebAppConfiguration
@ContextConfiguration(value={&ldquo;classpath:config/spring/spring*.xml&rdquo;})
public class LoginActionTest {</p>

<pre><code>@Resource
private WebApplicationContext wac;

private MockMvc mvc;



@Before
public void setup() {
    mvc = MockMvcBuilders.webAppContextSetup(wac).build();
}



@Test
public void testLogin() throws Exception {

    mvc
    .perform(get("/login").param("name", "ljh").param("password", "123"))
    .andExpect(status().isOk()) //状态码200
    .andExpect(content().string("{msg:10}"))
    .andExpect(content().contentType(MediaType.APPLICATION_JSON))
    .andExpect(jsonPath("$.msg").value(10))
    .andDo(print());


}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;上面的代码，有几个地方需要给大家解释：</p>

<p>&emsp;&emsp;<strong>MockMvc</strong>:这个类是一个核心类，测试必须通过这个类来实现。MockMvc如何实例化呢？这行代码：<strong>MockMvcBuilders</strong>.webAppContextSetup(wac).build()即可实例化，其中的wac需要由容器注入，类型是WebApplicationContext。</p>

<p>&emsp;&emsp;有同学在这个地方或许有点疑问，在没有启动tomcat之类容器的情况下，如何能注入<strong>WebApplicationContext</strong>啊？答案就是类顶上书写的<strong>@WebAppConfiguration</strong>注解，细心的同学会发现，本测试类和service中的测试类上面写的注解基本相同，惟独多了@WebAppConfiguration注解，正因为这个注解所起的作用，使用WebApplicationContext可以注入。</p>

<p>&emsp;&emsp;接下来，我们来看真正的测试方法，在测试过程中，我们主要会做三个事情：</p>

<p>&emsp;&emsp;<strong>1、构建请求，然后执行</strong>。</p>

<p>&emsp;&emsp;请求的构建，需要用到MockMvcRequestBuilders类，这个类可以产生get、post、put、delete等各种请求以及填充参数，构建好请求后，通过perform方法提交这个请求。</p>

<p>&emsp;&emsp;<strong>2、验证请求结果和预期是否一切。</strong></p>

<p>&emsp;&emsp;请求的验证通过MockMvcResultMatchers这个类来做，我们可以从很多方面来验证结果和你预期是否一致，比如：状态码，响应内容，响应视图名称，响应类型码等，上例中我们就使用了status、content、contentType等，更详细的东东请大家去翻阅spring api文档吧。</p>

<p>&emsp;&emsp;<strong>3、打印输出请求与响应的结果（这一步可选，不是必须的哦）。</strong></p>

<p>&emsp;&emsp;MockMvcResultHandlers这个类用来对结果进行处理，比如通过print方法打印，spring mvc对测试结果处理的封装目前仅仅提供了打印这个处理，其它的可由我们自己去实现哦。当然，你也可以将输入的json结果copy出来，放入图形化工具中，人工检查是否正确，可使用的gui工具有JsonView.exe，自己可从网上下载到哦。</p>

<p>&emsp;&emsp;当然，上面都是针对的是json restful结果的断言，如果是传统的mvc方式，又该是如何验证呢？请看示例代码，包含了对跳转页面资源的验证以及对作用域中值的验证等功能：</p>

<p>``` java</p>

<pre><code>            .andExpect(status().isOk())
            .andExpect(view().name("main"))
            .andExpect(MockMvcResultMatchers.forwardedUrl("main"))
            .andExpect(forwardedUrl("main"))
            .andExpect(model().attributeExists("user_key"))
</code></pre>

<p>```</p>

<p>&emsp;&emsp;如果你的需求中需要上传文件，又怎么测试呢？不要着急，spring mvc已经为我们考虑到了这些，代码如下：</p>

<p>``` java</p>

<p>mvc.perform(</p>

<pre><code>            fileUpload("/login")
            .file(
                    new MockMultipartFile("photo", "database.properties", MediaType.IMAGE_JPEG_VALUE, FileUtils.readFileToByteArray(
                            new ClassPathResource("database.properties").getFile())))
                .param("code", "001")
                .param("password", "123")

            )
            .andExpect(status().isOk())
            .andDo(print());
</code></pre>

<p>```</p>

<p>&emsp;&emsp;我们自己实例化了一个MockMultipartFile，并指定了一些参数，比如文件字段名，原始文件名，内容类型，文件内容等。有一点要提醒大家的是，在你的Action中，一定要用MultipartFile类型来接收文件参数，而不是用CommonsMultipartFile哦，切记（其实这也是您对依赖倒转原则理解的体现哦）。</p>

<p>&emsp;&emsp;各位，时间关系，先写到这，以后再补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式文件系统fastdfs解析之二(配置)]]></title>
    <link href="http://yanyaner.com/blog/2014/06/03/fastDFS-config/"/>
    <updated>2014-06-03T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/06/03/fastDFS-config</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;我计划在两台服务器上安装fdfs，ip分别是:192.168.68.133（1号服务器）, 192.168.68.136（2号服务器），fdfs在两台服务器上的安装部署图如下。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/05/fdfs_deploy.jpg' width='' height='' title='fastdfs部署示意图'><span class='caption-text'>fastdfs部署示意图</span></span></p>

<p>&emsp;&emsp;1号服务器上安装tracker实例一个，storage实例2个，分别位于group1,group2两个不同的组中；2号服务器上也安装tracker实例一个，storage实例1个，这个storage和1号服务器中的其中一个storage位于同一个组中。下面给大家贴出具体配置。</p>

<p>&emsp;&emsp;1号服务器中，我们先： vim /usr/local/fastdfs/conf/storage_ids.conf</p>

<p>```</p>

<h1><id>  &lt;group_name>  &lt;ip_or_hostname></h1>

<p>100001   group1  192.168.68.133
100002   group2  192.168.68.133
100003   group1  192.168.68.136
```</p>

<p>&emsp;&emsp;在这个文件中为所有存储服务器指定id, 这样可以免更换ip带来的影响，也就是说当服务器ip发生改变后只需要更改这个文件中的ip地址即可。</p>

<p>&emsp;&emsp;编辑tracker.conf，vim /usr/local/fastdfs/conf/tracker.conf配置文件，以下仅仅列出我改过的或者我认为需要给大家说明的配置项，没有贴出的均保持配置文件中的默认值。</p>

<p>```</p>

<h1>the tracker server port</h1>

<p>port=22122</p>

<h1>the base path to store data and log files</h1>

<p>base_path=/var/fastdfs/tracker</p>

<h1>the method of selecting group to upload files</h1>

<h1>0: round robin</h1>

<h1>1: specify group</h1>

<h1>2: load balance, select the max free space group to upload file</h1>

<p>store_lookup=2</p>

<h1>which group to upload file</h1>

<h1>when store_lookup set to 1, must set store_group to the group name</h1>

<p>store_group=group2</p>

<h1>unix group name to run this program,</h1>

<h1>not set (empty) means run by the group of current user</h1>

<p>run_by_group=</p>

<h1>unix username to run this program,</h1>

<h1>not set (empty) means run by current user</h1>

<p>run_by_user=</p>

<h1>if use storage ID instead of IP address</h1>

<h1>default value is false</h1>

<h1>since V4.00</h1>

<p>use_storage_id = true</p>

<h1>the max time of storage sync a file</h1>

<h1>default value is 300 seconds</h1>

<h1>since V2.00</h1>

<p>storage_sync_file_max_time = 300</p>

<p>```</p>

<p>&emsp;&emsp;现对上面列出的一些配置项进行解释：</p>

<p>&emsp;&emsp;<strong>port</strong>：tracker服务器的端口号，如果一台服务器上要运行多个tracker实例就需要更改此端口号以避免冲突。</p>

<p>&emsp;&emsp;<strong>base_path</strong>：tracker自身配置信息以及日志信息保存的位置，这个目录本不会占用太大的空间，但日志文件会随着使用而慢慢变大。</p>

<p>&emsp;&emsp;<strong>store_lookup</strong>：负载分配机制，2表示选择存储空间最大的组来保存文件。</p>

<p>&emsp;&emsp;<strong>run_by_group，run_by_user</strong>：指定运行tracker的用户组及用户，这是为了保存系统的安全，我们一般会为fdfs新建组及用户。</p>

<p>&emsp;&emsp;<strong>use_storage_id</strong>：使用存储服务器id替代ip地址，我们刚才编辑的storage_ids.conf中指定了每个实例的id。</p>

<p>&emsp;&emsp;<strong>storage_sync_file_max_time</strong>：同一组中的不同storate进行文件同步的时间，默认是5分钟内完成同步，你可以根据实际情况把这个值改小（改变这个值后可以观察到文件同步的效果，这个值不要设置得太小以避免造成系统同步网络压力）。</p>

<p>&emsp;&emsp;接下来我们配置本台服务器上的storage实例，先配置storage1.conf实例，这个实例位于group1中。</p>

<p>&emsp;&emsp;vim /usr/local/fastdfs/conf/storage1.conf，同样限于篇幅，我仅仅贴出重要配置项，其它的使用默认值。<!-- more--></p>

<p>```</p>

<h1>the name of the group this storage server belongs to</h1>

<p>group_name=group1</p>

<h1>the storage server port</h1>

<p>port=23001</p>

<h1>the base path to store data and log files</h1>

<p>base_path=/var/fastdfs/storage1</p>

<h1>store_path#, based 0, if store_path0 not exists, it&rsquo;s value is base_path</h1>

<h1>the paths must be exist</h1>

<p>store_path0=/var/fastdfs/store_group1_path0</p>

<h1>tracker_server can ocur more than once, and tracker_server format is</h1>

<h1>&ldquo;host:port&rdquo;, host can be hostname or ip address</h1>

<p>tracker_server=192.168.68.133:22122
tracker_server=192.168.68.136:22122</p>

<p>run_by_group=
run_by_user=</p>

<p>```
&emsp;&emsp;现在对上面的配置项进行解释：</p>

<p>&emsp;&emsp;<strong>group_name</strong>：本storage实例所属的组名称。</p>

<p>&emsp;&emsp;<strong>port</strong>：storage的端口号，同一组的storage实例必须采用同样的端口号，这就是说同一组中的storage实例必须部署在不同学的机器上，因为同一台机器上的端口号不能相同。</p>

<p>&emsp;&emsp;<strong>base_path</strong>：本storage的配置数据及运行日志文件存放的位置，和tracker中的base_path含义相同。</p>

<p>&emsp;&emsp;<strong>store_path0</strong>：真正的用户上传文件保存的位置目录，fastDfs会在该目录下新建许多子目录，在第一次启动实例时会进行这个操作。store_path可以有多个，一般可以分配成单独的磁盘挂载点。</p>

<p>&emsp;&emsp;<strong>tracker_server</strong>：指定本storaged的信息会注册到哪些tracker中去，故这里的tracker_server可以配置多个。</p>

<p>&emsp;&emsp;<strong>run_by_group、run_by_user</strong>与tracker中的含义相同，不再细说。</p>

<p>&emsp;&emsp;接下来，我们再来看本服务器上的另一个storage实例，这个实例是运行在group2中的，端口号与上面配置的那个storage是不同的，请看配置关键项：</p>

<p>```</p>

<h1>the name of the group this storage server belongs to</h1>

<p>group_name=group2</p>

<h1>the storage server port</h1>

<p>port=23002</p>

<p>base_path=/var/fastdfs/storage2</p>

<h1>store_path#, based 0, if store_path0 not exists, it&rsquo;s value is base_path</h1>

<h1>the paths must be exist</h1>

<p>store_path0=/var/fastdfs/store_group2_path0</p>

<h1>tracker_server can ocur more than once, and tracker_server format is</h1>

<h1>&ldquo;host:port&rdquo;, host can be hostname or ip address</h1>

<p>tracker_server=192.168.68.133:22122</p>

<p>```</p>

<p>&emsp;&emsp;上面配置文件中的内容和storage1.conf中的类似，只不过group_name、port不相同，两个文件的保存路径也是不同的，经过这些配置后，我们就可以启动服务实例了。</p>

<p>&emsp;&emsp;先来启动tracker实例，先编辑启动脚本文，vim /etc/init.d/fdfs_trackerd。</p>

<p>``` sh fdfs_trackerd</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>fdfs_trackerd Starts fdfs_trackerd</h1>

<p>#
#</p>

<h1>chkconfig: 2345 99 01</h1>

<h1>description: FastDFS tracker server</h1>

<h3>BEGIN INIT INFO</h3>

<h1>Provides: $fdfs_trackerd</h1>

<h3>END INIT INFO</h3>

<h1>Source function library.</h1>

<p>. /etc/init.d/functions
FastDfs=&lsquo;/usr/local/fastdfs&rsquo;
CONF=&ldquo;$FastDfs/conf/tracker.conf&rdquo;
if [ ! -f $CONF ]; then
  echo &ldquo;file $CONF does not exist!&rdquo;
  exit 2
fi
PRG=&ldquo;$FastDfs/bin/fdfs_trackerd&rdquo;
if [ ! -f $PRG ]; then
  echo &ldquo;file $PRG does not exist!&rdquo;
  exit 2
fi
Stop=&ldquo;$FastDfs/bin/stop.sh&rdquo;
if [ ! -f $Stop ]; then
  echo &ldquo;file $Stop does not exist!&rdquo;
  exit 2
fi
Restart=&ldquo;$FastDfs/bin/restart.sh&rdquo;
if [ ! -f $Restart ]; then
  echo &ldquo;file $Restart does not exist!&rdquo;
  exit 2
fi
RETVAL=0
start() {</p>

<pre><code>echo -n $"Starting FastDFS tracker server: "
$PRG $CONF &amp;
RETVAL=$?
echo
return $RETVAL
</code></pre>

<p>}
stop() {</p>

<pre><code>echo -n $"Stop FastDFS tracker server: "
$Stop $PRG $CONF
RETVAL=$?
return $RETVAL
</code></pre>

<p>}
rhstatus() {</p>

<pre><code>status fdfs_trackerd
</code></pre>

<p>}
restart() {</p>

<pre><code>    $Restart $PRG $CONF &amp;
</code></pre>

<p>}
case &ldquo;$1&rdquo; in
  start)</p>

<pre><code>start
;;
</code></pre>

<p>  stop)</p>

<pre><code>stop
;;
</code></pre>

<p>  status)</p>

<pre><code>rhstatus
;;
</code></pre>

<p>  restart|reload)</p>

<pre><code>restart
;;
</code></pre>

<p>  condrestart)</p>

<pre><code>restart
;;
</code></pre>

<p>  *)</p>

<pre><code>echo $"Usage: $0 {start|stop|status|restart|condrestart}"
exit 1
</code></pre>

<p>esac
exit $?
```</p>

<p>&emsp;&emsp;这篇启动脚本中，主要修改的地方是FastDfs及CONF变量参数，这两个用来指定tracker配置文件所在的位置。</p>

<p>&emsp;&emsp;完成编辑后，使用命令：sudo /etc/init.d/fdfs_trackerd start，即可完成服务器的启动，如果启动成功你可通过netstat -lnpt查看到tracker的端口号。</p>

<p>&emsp;&emsp;接下来，将fdfs_storaged拷贝为fdfs_storaged1，用于启动storage1实例，要修改的地方也是FastDfs及CONF参数，这两个参数用来指定storage1.conf文件的在的目录及配置文件的名称。</p>

<p>``` sh fdfs_storaged1</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>fdfs_storaged Starts fdfs_storaged</h1>

<p>#
#</p>

<h1>chkconfig: 2345 99 01</h1>

<h1>description: FastDFS storage server</h1>

<h3>BEGIN INIT INFO</h3>

<h1>Provides: $fdfs_storaged</h1>

<h3>END INIT INFO</h3>

<h1>Source function library.</h1>

<p>. /etc/init.d/functions
FastDfs=&lsquo;/usr/local/fastdfs&rsquo;
CONF=&ldquo;$FastDfs/conf/storage1.conf&rdquo;
if [ ! -f $CONF ]; then
  echo &ldquo;file $CONF does not exist!&rdquo;
  exit 2
fi
PRG=&ldquo;$FastDfs/bin/fdfs_storaged&rdquo;
if [ ! -f $PRG ]; then
  echo &ldquo;file $PRG does not exist!&rdquo;
  exit 2
fi
Stop=&ldquo;$FastDfs/bin/stop.sh&rdquo;
if [ ! -f $Stop ]; then
  echo &ldquo;file $Stop does not exist!&rdquo;
  exit 2
fi
Restart=&ldquo;$FastDfs/bin/restart.sh&rdquo;
if [ ! -f $Restart ]; then
  echo &ldquo;file $Restart does not exist!&rdquo;
  exit 2
fi
RETVAL=0
start() {</p>

<pre><code>echo -n $"Starting FastDFS storage server: "
$PRG $CONF &amp;
RETVAL=$?
echo
return $RETVAL
</code></pre>

<p>}
stop() {</p>

<pre><code>echo -n $"Stop FastDFS storage server: "
$Stop $PRG $CONF
RETVAL=$?
return $RETVAL
</code></pre>

<p>}
rhstatus() {</p>

<pre><code>status fdfs_storaged
</code></pre>

<p>}
restart() {</p>

<pre><code>    $Restart $PRG $CONF &amp;
</code></pre>

<p>}
case &ldquo;$1&rdquo; in
  start)</p>

<pre><code>start
;;
</code></pre>

<p>  stop)</p>

<pre><code>stop
;;
</code></pre>

<p>  status)</p>

<pre><code>rhstatus
;;
</code></pre>

<p>  restart|reload)</p>

<pre><code>restart
;;
</code></pre>

<p>  condrestart)</p>

<pre><code>restart
;;
</code></pre>

<p>  *)</p>

<pre><code>echo $"Usage: $0 {start|stop|status|restart|condrestart}"
exit 1
</code></pre>

<p>esac</p>

<p>exit $?
```</p>

<p>&emsp;&emsp;好，该来启动storaged1实例了，命令： sudo /etc/init.d/fdfs_storaged1 start，如果是第一次启动会观察到创建存储目录的过程。</p>

<p>&emsp;&emsp;启动storaged2实例的过程和storaged1相同，先编辑fdfs_storaged2文件，再fdfs_storaged2 start即完成。</p>

<p>&emsp;&emsp;当1号服务器上的fdfs全部服务都成功启动后，我们可以看到如下目录结构会建立起来。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/05/fdfs_dir_struct.jpg' width='' height='' title='fastdfs目录结构'><span class='caption-text'>fastdfs目录结构</span></span></p>

<p>&emsp;&emsp;至此，1号服务器上的所有配置及服务启动工作已经完成。2号服务器的配置及服务实例启动与1号服务器基本相同，惟一需要大家要注意的是group的名称，port端口号等，要和1号服务器相“呼应”，同时，我们在2号服务器上也配置了一个tracker实例以保证高可用性。</p>

<p>&emsp;&emsp;好了，fastDFS的配置先告一段落，下一篇我们来聊聊客户端对fastDFS的调用，除了java客户端外，还包括tengine-2.0.1服务器上访问插件的配置(2014-7-15:不写了，以后有空再说，大家在使用时，最后在网上找带连接池功能的fastDFS驱动)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式文件系统fastdfs解析之一(安装)]]></title>
    <link href="http://yanyaner.com/blog/2014/05/30/fastDFS-setup/"/>
    <updated>2014-05-30T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2014/05/30/fastDFS-setup</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;fastdfs是一个轻量级的分布式文件系统服务，它在互联网项目中有比较广泛的用途，类似的还有tfs等，但fastdfs和hadoop这些又不相同，hadoop是分布式存储计算框架，比较重量级，而fastdfs针对的是海量的小文件。</p>

<p>&emsp;&emsp;项目中经常会有这样一些应用场景，比如：文件服务器需要存储海量的用户文件并且对外提供用户的访问操作；文件服务器需要高可用性和高性能；文件服务器需要实现负载均衡；文件服务器可实时扩容等等，这些需求在Fastdfs中有实现，因此它可以满足大部的项目需求。</p>

<p>&emsp;&emsp;先给大家简单介绍一下fastdfs的原理，下面这张图有助于大家了解分布式文件系统的原理（hadoop之类的分布式体系与之有相似之处）。</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2014/04/seq_fastdfs.jpg' width='' height='' title='fastdfs调用时序图'><span class='caption-text'>fastdfs调用时序图</span></span></p>

<p>&emsp;&emsp;上面这张图中客户端针对文件服务系统的调用，首先得通过tracker服务器，这个服务器充当了调度者的作用。客户端可以是任何的程序客户端，比如java客户端、php客户端、nginx插件客户端等。</p>

<p>&emsp;&emsp;在客户端调用之前先得启动tracker server，然后再分别启动各个storage server，每个storage server启动后会注册自己的信息到指定的tracker server中（其实，tracker server服务器也可以有多个，从高可用性方面考虑我们一般会启动多个tracker server实例）。</p>

<p>&emsp;&emsp;storage server负责具体文件的存储。storage server按照分组的方式来保存文件的，比如group1,group2等。一个组中可以有多台服务器，同一个组里的所有服务器中保存的文件内容都是相同的，因为同一个组中的服务器之间会相互自动同步文件，这样就实现了冗余备份及负载均衡的功能（负载均衡由tracker server调试的哦）。</p>

<p>&emsp;&emsp;不同组中的storage server之间是独立的，当系统存储容量不够时，通过添加新服务器并分配到新的组中，tracker server发现新的服务器后会自动调度以实现后续客户文件的写入位置。</p>

<p>&emsp;&emsp;上图中，客户通过询问tracker server得到可用的storage server（tracker server会通过负载均衡及各个storage的存储可用容量大小算法决定，当然这个也可以在配置文件中指定），客户端得到storage server后进行相应的文件操作，同组服务器间会根据操作的结果进行文件同步（时序9，10是同步操作）。</p>

<p>&emsp;&emsp;好了，原理先说到这。下面，我将给大家简单介绍FastDfs的安装及使用，以及一些注意事项。</p>

<p>&emsp;&emsp;我的服务器是ubuntu server，我计划安装在两台服务器上，ip分别是:192.168.68.133, 192.168.68.136，暂时简称为1号服务器，2号服务器。</p>

<p>&emsp;&emsp;一号服务器上，将安装一个tracker server实例，一个位于group1中的storage server实例，一个位于group2中storage server实例。</p>

<p>&emsp;&emsp;二号服务器上，也将安装一个tracker server实例，一个位于group1中的storage server实例。需要大家注意的是，fastdfs中一台服务器上可以安装多个组，但一个组中的多个storade server必须安装在不同的服务器上，并且同组中的storage server的服务端口必须一致，否则无法实现文件同步。</p>

<p>&emsp;&emsp;我先在一号服务器192.168.68.133上安装fastdfs。首先要准备安装环境，不同的linux发行版本可能会有所不同，我用的服务器版本是ubuntu 12.04 server，以下的操作均以这个版本的ubuntu服务器为例。<!--more--></p>

<p><code>
vim /etc/profile
export LANGUAGE="en_US.UTF-8"
export LANG=en_US:zh_CN.UTF-8
export LC_ALL=C
</code>
&emsp;&emsp;接下来让语言环境配置参数立即生效：</p>

<p><code>
source /etc/profile
</code>
&emsp;&emsp;再接着，安装fastdfs编译依赖包，大家要注意的是少一个依赖都不行，我先前安装时缺少了libevent-dev，致使安装不成功但安装过程又不报错，花费了大量的时间。</p>

<p>```
aptitude install libevent
apt-get install libevent-dev</p>

<p>sudo apt-get update
sudo aptitude install build-essential m4</p>

<p>sudo ln -s /lib/lsb/init-functions  /etc/init.d/functions</p>

<p>```</p>

<p>&emsp;&emsp;好了，环境准备好了后就到<a href="https://code.google.com/p/fastdfs">fastdfs官网</a>上去下载安装包吧，地址<a href="https://code.google.com/p/fastdfs/downloads/list">https://code.google.com/p/fastdfs/downloads/list</a>，我下载的是
FastDFS_v4.06.tar.gz ，如果你想要安装最新版本，请用svn去下载最新的5.x版本。</p>

<p><code>
tar -zxvf FastDFS_v4.06.tar.gz
cd FastDFS
</code>
&emsp;&emsp;这样就进入了源代码目录，我们先要对安装的目录做一个规划(4.06版本默认的安装目录似乎不太合理)，我将fastdfs的所有文件都安装到/usr/local/fastdfs中，配置文件存放在/usr/local/fastdfs/conf下，这就需要我们修改源代码目录下的make.sh，下面是一些要修改的地方：</p>

<p><code>
vim make.sh
</code></p>

<p>&emsp;&emsp;需要对：</p>

<ol>
<li><p> TARGET_PREFIX，TARGET_CONF_PATH进行修改;</p></li>
<li><p> 需要对libpthread.so、libpthread.a的路径进行修改，这和ubuntu有关，其它linux发行版本并不需要改这个(你可以用find / -name &lsquo;libpthread.so&rsquo;  ，以及ind / -name &lsquo;libpthread.a&rsquo;  找到这两文件在系统中的位置)；</p></li>
<li><p> 另外要对mkdir,cp操作的几个路径进行修改为我们配置文件所在的路径。</p></li>
</ol>


<p>&emsp;&emsp;我贴出make.sh修改过的地方，请大家自行对照：</p>

<p>```
TARGET_PREFIX=/usr/local/fastdfs
TARGET_CONF_PATH=/usr/local/fastdfs/conf</p>

<p>if [ -f /usr/lib/i386-linux-gnu/libpthread.so ] || [ -f /usr/local/lib/libpthread.so ] || [ -f /lib64/libpthread.so ] || [ -f /usr/lib64/libpthread.so ] || [ -f /usr/lib/i386-linux-gnu/libpthread.a ] || [ -f /usr/local/lib/libpthread.a ] || [ -f /lib64/libpthread.a ] || [ -f /usr/lib64/libpthread.a ]; then
&hellip;&hellip;&hellip;&hellip;
&hellip;&hellip;&hellip;&hellip;</p>

<p>if [ &ldquo;$uname&rdquo; = &ldquo;Linux&rdquo; ]; then</p>

<pre><code>if [ "$WITH_LINUX_SERVICE" = "1" ]; then
  if [ ! -d /usr/local/fastdfs/conf ]; then
    mkdir -p /usr/local/fastdfs/conf
    cp -f conf/tracker.conf /usr/local/fastdfs/conf/
    cp -f conf/storage.conf /usr/local/fastdfs/conf/
    cp -f conf/client.conf /usr/local/fastdfs/conf/
    cp -f conf/http.conf /usr/local/fastdfs/conf/
    cp -f conf/mime.types /usr/local/fastdfs/conf/
  fi
</code></pre>

<p>&hellip;&hellip;&hellip;&hellip;</p>

<p>```</p>

<p>&emsp;&emsp;下面开始安装吧，如下命令：</p>

<p><code>
sudo make;
sudo make install;
sudo make clean;
</code>
&emsp;&emsp;不同的linux发行版本可能存在依赖包没有安装而报错，具体情况需要根据出错信息具体解决，我试过redhead,freebsd,openSuse,centos几个系统，都是要进行一些环境的配置才可以安装成功。</p>

<p>&emsp;&emsp;下一篇文章我将按照文章开头的服务器规划进行具体的配置，请大家关注。</p>
]]></content>
  </entry>
  
</feed>
