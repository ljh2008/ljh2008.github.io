<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[☺分类☺：nodejs | 刘江华的博客]]></title>
  <link href="http://yanyaner.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://yanyaner.com/"/>
  <updated>2014-07-22T10:58:51+08:00</updated>
  <id>http://yanyaner.com/</id>
  <author>
    <name><![CDATA[冰雨]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node.js中基本于express、mongodb的CRUD]]></title>
    <link href="http://yanyaner.com/blog/2013/08/15/nodejs-express-mongodb-crud/"/>
    <updated>2013-08-15T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/08/15/nodejs-express-mongodb-crud</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;需求还是基于前面的演示程序，只不过，我们把mysql换成了mongodb，因此，我们把以前的orm2插件更换成mongoose插件。</p>

<p>&emsp;&emsp;首先得下载mongodb文件，并启动服务器，这个过程大家可以参考我前面的spring data操作mongodb的文章。</p>

<p>&emsp;&emsp;在node.js项目中，我们需要先定义对象结构，建议大家把系统所有的对象结构定义到一个文件中，如果系统过大，可考虑按功能模块定义到多个文件中，我把对象结构定义到一个文件中，models.js，代码如下：</p>

<p>``` js models.js
/<em>*
 * 定义所有的对象结构，并通过exports向外导出.
 * User: ljh
 * Date: 13-8-13
 * Time: 下午4:44
 </em>/
var mongoose = require(&lsquo;mongoose&rsquo;);</p>

<p>//连接是如何管理的，是否在这连接，有待深入研究？？？
mongoose.connect(&lsquo;mongodb://localhost/mydb&rsquo;);</p>

<p>var Schema  = mongoose.Schema;
//定义对象结构
var userSchema = new Schema({</p>

<pre><code>loginCode:{type:String},
userName:{type:String},
password:{type:String},
picPath:{type:String},
birthDay:{type:Date}
</code></pre>

<p>});</p>

<p>//定义集合,其中myUser是数据集的名称
exports.User =  mongoose.model(&ldquo;myUser&rdquo;, userSchema);</p>

<p>```</p>

<p>&emsp;&emsp;系统中需要操作user的地方，都需要引入models.js文件，例如：</p>

<p>``` js</p>

<p>var models  =  require(&ldquo;../commons/models&rdquo;);
var User = models.User;</p>

<p>```</p>

<p>&emsp;&emsp;下面是userAction.js中的核心CRUD代码，相对于orm2的api函数，mongoose的函数设计更为简洁、强大。</p>

<!--more-->


<p>``` js userAction.js</p>

<p>//首页
exports.index = function(req, res){</p>

<pre><code>//无缓存，应尽量避免以这种方式发回文件
res.sendfile("public\\login.html");
</code></pre>

<p>};</p>

<p>//添加用户
exports.addUser = function(req, res) {</p>

<pre><code>var picPath = req.body.pic;
if (!picPath || picPath.trim()=="") {
    picPath = "upload/photo.jpg";
}
var user = new User({
    userName:req.body.name,
    loginCode:req.body.loginCode,
    birthDay:req.body.birthday,
    password:req.body.password,
    picPath:picPath
});
user.save(function(err, u) {
    if (err) {
        var result = {'code':0,'msg':'添加用户失败：' + err};
        res.json(result);
    }  else {
        var result = {'code':1,'msg':'添加用户成功！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//批量删除用户 (uids为id字串，用-拼接，比如：1-3-4-5 )
exports.deleteUsers = function(req, res) {</p>

<pre><code>User.remove({ _id: { $in: req.params.uids.split("-")}}, function (err) {
    if (err) {
        var result = {'code':0,'msg':'批量删除用户失败：' + err};
        res.json(result);
    }  else {
        var result = {'code':1,'msg':'批量删除用户成功！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//删除用户
exports.deleteUser = function(req, res) {</p>

<pre><code>User.remove({_id:req.params.uid}, function(err) {
    if (err) {
        var result = {'code':0,'msg':'删除用户失败：' + err};
        res.json(result);
    }  else {
        var result = {'code':1,'msg':'删除用户成功！'};
        res.json(result);
    }
}) ;
</code></pre>

<p>}</p>

<p>//修改用户
exports.modifyUser = function(req, res) {</p>

<pre><code>console.log("uid:" + req.params.uid);
User.findById(req.params.uid, function(err, user){
    if (err) {
        commonsFun.handleError(err,"修改用户时查询用户失败！", res);
        return;
    }

    if (user) {
        user.userName = req.body.userName;
        if (req.body.password  &amp;&amp; req.body.password != "***" &amp;&amp; req.body.password.trim() != "") {
            user.password = req.body.password;
        }
        user.birthDay =  req.body.birthday;
        user.picPath = req.body.pic;
        console.log(user);
        user.save(function(err){
          if (err) {
              var result = {'code':0,'msg':'修改用户失败：' + err};
              res.json(result);
          }  else {
              var result = {'code':1,'msg':'修改用户成功！'};
              res.json(result);
          }
        });
    } else {
        var result = {'code':0,'msg':'要修改的用户可能不存在！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//根据id查询用户
exports.getUserById = function(req, res) {</p>

<pre><code>var uid =  req.params.uid;
var result = {'code':0,'msg':'查询用户失败！'};

User.findById(uid, "_id loginCode userName picPath birthDay" ,function(err, user){
   if (err) {
       commonsFun.handleError(err,"查询用户失败！", res);
       return;
   }
    if (user) {
        var result = {'code':1,'data':user};
        res.json(result);
    } else {
        res.json(result);
    }
})
</code></pre>

<p>}</p>

<p>//显示用户分页列表
exports.user_list = function(req, res){</p>

<pre><code>var pno =  req.params.pno;
var queryName = req.query.q_name;
var pageSize = 3;
var queryParm = {};
//进行多条件的拼装
if (queryName &amp;&amp; queryName.trim() != "") {
     //如果用户输入了姓名
    queryParm.userName = new RegExp(queryName);
}
User.find(queryParm).count(function(err, userCount){
     if (err) {
         commonsFun.handleError(err, '取用户分页数据失败！' , res);
         return;
     };
     if (userCount &gt; 0 ) {
         //查到了数据
         User.find(queryParm)
             .limit(pageSize)
             .skip((pno - 1)*pageSize)
             .select("_id loginCode userName picPath birthDay")
             .sort("loginCode")
             .exec(function(err, users) {
                 if (err) {
                     commonsFun.handleError(err, '取用户分页数据失败！' , res);
                     return;
                 };
                 var p = new Page(pno, pageSize, userCount, users);
                 var result = {'code':1,'page':p};
                 res.json(result);
             });
     } else {
         //没有查到数据
         var p = new Page(pno, pageSize, 0, []);
         var result = {'code':1,'page':p};
         res.json(result);
     }
});
</code></pre>

<p>};</p>

<p>//得到登录用户状态
exports.getState = function(req, res){</p>

<pre><code>var user = req.session.user_key;
var  resultJson ;
if (user) {
    resultJson = {code:1,name:user.userName};
}  else {
    resultJson =  {code:0,msg:'对不起，您没有登录！'};
}
res.json(resultJson);
</code></pre>

<p>};</p>

<p>//退出系统（这个方法应该返回json，我这仅仅为演示，直接返回登录页面了）
exports.logout = function(req, res){</p>

<pre><code>req.session.user_key = null;
res.redirect("/")
</code></pre>

<p>}</p>

<p>//登录系统
exports.login = function(req, res){</p>

<pre><code>//express中得到参数req.body.uname或req.query.uname，其中，req.body可支持post,delete,put等方式
console.log("user login, name is:" + req.query.uname + ",pwd is:" + req.query.pwd);

var loginUser;

User.findOne({loginCode:req.query.uname},function(err, user) {
    if (err) {commonsFun.handleError(err)};
    if (user &amp;&amp; user.password == req.query.pwd) {
        req.session.user_key = user;
        res.send(JSON.stringify({code:1,name:user.userName}));
        return ;
    }
    res.send(JSON.stringify({code:0,msg:'用户名或密码错误，请核对！'}));
});
</code></pre>

<p>};</p>

<p>```</p>

<p>&emsp;&emsp;基本代码和之前的orm2中基本类似，前台的html及js代码，没有做改动，大家在使用mongoose时，应注意下面一些常用的操作：</p>

<p>&emsp;&emsp;<strong>1、建立表空间，其中myUser是表空间名称</strong></p>

<p>``` js</p>

<p>var User =  mongoose.model(&ldquo;myUser&rdquo;, userSchema);</p>

<p>```</p>

<p>&emsp;&emsp;userSchema是对象结构，通过如下方式定义：</p>

<p>``` js</p>

<p>var userSchema = new Schema({</p>

<p>  userName:{type:String},</p>

<p>  birthDay:{type:Date}</p>

<p>});</p>

<p>```</p>

<p>&emsp;&emsp;但也可以这样定义：</p>

<p>``` js</p>

<p>var User = mongoose.model(&ldquo;myUser&rdquo;,{userName:{type:String},birthDay:{type:Date}});</p>

<p>```</p>

<p>&emsp;&emsp;建立大家采用单独定义的方式，以增强可维护性。</p>

<p>&emsp;&emsp;<strong>2、关于查询</strong></p>

<p>&emsp;&emsp;A、查单对象</p>

<p>``` js</p>

<p>User.findOne({userName:&lsquo;张三&rsquo;})</p>

<p>   .exec(function(err, user){</p>

<p>&hellip;.
```</p>

<p>&emsp;&emsp;或者根据id来查询：</p>

<p>``` js</p>

<p>User.findById(&ldquo;52089d9a10986c140b000001&rdquo;, &ldquo;_id loginCode userName picPath birthDay&rdquo; ，function(err, user){&hellip;.</p>

<p>```</p>

<p>&emsp;&emsp;其中，第二个参数是需要的对象属性，这比起orm2来说，方便了许多。</p>

<p>&emsp;&emsp;你也可以对查询出来的对象直接操作，findByIdAndUpdate，findByIdAndRemove都可以做这样的操作。</p>

<p>&emsp;&emsp;<strong>B、条件查询</strong></p>

<p>``` js</p>

<p>User.find({password:&ldquo;123&rdquo;,userName:&ldquo;张三&rdquo;}).exec&hellip;.</p>

<p>```</p>

<p>&emsp;&emsp;上面的代码，是按给出的条件查询数据。</p>

<p>&emsp;&emsp;当然，你也可以用另一种方式来实现，比如：</p>

<p>``` js</p>

<p>.where(&ldquo;userName&rdquo;).equals(&ldquo;张三2&rdquo;)</p>

<p>```</p>

<p>&emsp;&emsp;如果想使用模糊查询，或其它更复杂的条件查询，可以使用正则，示例代码如下：</p>

<p>``` js</p>

<p>User.find({userName:new RegExp(&ldquo;^&rdquo; + reg_str)})</p>

<p>```</p>

<p>&emsp;&emsp;如果不需要条件拼接，可以简单写成如下：</p>

<p>``` js</p>

<p>User.find({userName:{ $regex: /张/ },picPath:{$regex:/18/} })</p>

<p>```</p>

<p>&emsp;&emsp;在正则中：/^表示以什么开头，$/表示以什么结尾</p>

<p>&emsp;&emsp;mongoose中提供的另一个正则方法，我没有测试出效果，知道的同学可以告诉我一声：</p>

<p>&emsp;&emsp;.regex({userName:{$regex: /^张.*/ }})，这可怎么也运行不出来数据呢？呵呵</p>

<p>&emsp;&emsp;<strong>C、排序、分页、统计</strong></p>

<p>&emsp;&emsp;排序：</p>

<p>``` js
.sort({userName:&ldquo;desc&rdquo;})，可以添加多个字段，asc为升序。</p>

<p>```</p>

<p>&emsp;&emsp;分页：</p>

<p><code>js
.skip(100).limit(20)，其中skip的下标从0开始。
</code></p>

<p>&emsp;&emsp;统计总记录条数：</p>

<p><code>js
count(function(err, rowCounts){})
</code></p>

<p>&emsp;&emsp;详细实现，请大家参考上面的用户分页实现代码。</p>

<p>&emsp;&emsp;<strong>D、只需要部分属性</strong></p>

<p>&emsp;&emsp;如果只需要部分属性，返回给前端，我们可以使用的两种方式，第一种是根据前端需要的字段手工构造这样的对象，另一种是在查询的时候，指定所需要的字段。比如：.select(&ldquo;userName birthDay __v&rdquo;)，或都某些查询函数可以指定所需要的属性。</p>

<p>&emsp;&emsp;<strong>3、新增、修改、删除</strong></p>

<p>&emsp;&emsp;新增：</p>

<p>``` js
var user = new User({</p>

<pre><code>    userName:req.body.name
});
</code></pre>

<p>user.save(function(err, u)</p>

<p>```</p>

<p>&emsp;&emsp;修改：</p>

<p>``` js</p>

<p>User.update({password:&ldquo;123&rdquo;},{password:&ldquo;888&rdquo;},{ multi: true },function(err, counts){</p>

<pre><code>if (!err) {
    console.log("modify success, rows:" + counts) ;
}  else {
    console.log(err);
}
</code></pre>

<p>});
```</p>

<p>&emsp;&emsp;请注意如果要进行批量操作，设置multi为ture，否则，只会对第一条数据进行操作。</p>

<p>&emsp;&emsp;查是，对一个对象实例进行update，mongoose会报错，_id don&rsquo;t allow modify，原因是什么我没有深入研究，如果遇到这样的错误，大家可直接用save保存即可，具体请参阅上面的修改用户代码。</p>

<p>&emsp;&emsp;删除按api操作即可，没有太多要讲的。</p>

<p>&emsp;&emsp;<strong>4、对象关系的保存</strong></p>

<p>&emsp;&emsp;有两种设计方案：</p>

<p>&emsp;&emsp;A、将对象直接保存到聚合根对象中</p>

<p>&emsp;&emsp;B、采用类似于关于数据库中的外键方式保存</p>

<p>&emsp;&emsp;我更偏向于第二种方案，这样做似乎更有利于查询的构建，当然，如果子对象是一个值对象，就可以用第一种方案了。示例代码如下，客户一对多订单：</p>

<p>&emsp;&emsp;A方案是这样定义的：</p>

<p>``` js</p>

<p>var customerSchema = new Schema({</p>

<pre><code>name:String,
gender:Boolean,
orders:[{
    orderNo:String,
    price:Number,
    amount:Number,
    customer:{type:Schema.Types.ObjectId, ref:"customer"}
}]
</code></pre>

<p>});
var Customer =  mongoose.model(&ldquo;customer&rdquo;,customerSchema);</p>

<p>```</p>

<p>&emsp;&emsp;<strong>B方案定义：</strong></p>

<p>``` js
var customerSchema = new Schema({</p>

<pre><code>name:String,
gender:Boolean,
orders:[{type:Schema.Types.ObjectId, ref:"order"}]
</code></pre>

<p>});</p>

<p>var orderSchema = new Schema({</p>

<pre><code>orderNo:String,
price:Number,
amount:Number,
customer:{type:Schema.Types.ObjectId, ref:"customer"}
</code></pre>

<p>});</p>

<p>var Customer =  mongoose.model(&ldquo;customer&rdquo;,customerSchema);
var Order =  mongoose.model(&ldquo;order&rdquo;,orderSchema);
```</p>

<p>&emsp;&emsp;然而，在B方案中，当对象关系发生变化后，需要我们手工去更改属性，并保存，这点比起java世界中的hibernate要逊色很多。</p>

<p>&emsp;&emsp;如果在查询时，把关联对象也实例化，要用到populate，比如：</p>

<p>``` js</p>

<p>Order.findOne({&ldquo;customer&rdquo;:&ldquo;5209e14f38b0a28003000001&rdquo;})</p>

<pre><code>.populate("customer", "name gender").exec...
</code></pre>

<p>```</p>

<p>&emsp;&emsp;<strong>5、关于乐观锁</strong></p>

<p>&emsp;&emsp;mongoose会自动为每一个对象生成__v字段，用来保存版本号，但实际操作时，并没有发现对版本号字段进行自动累加，知道的同学请告诉我，目前只有暂时用下面的办法去做：</p>

<p>&emsp;&emsp;关于version锁：</p>

<p>``` js
User.findById(&ldquo;52089d9a10986c140b000001&rdquo;,function(err, user){</p>

<pre><code>user.password = "222";
user.increment();
user.save(function(err){
    console.log("save ok!");
});
console.log(user);
</code></pre>

<p>});</p>

<p>```
&emsp;&emsp;注意user.increment()那句代码，这而似乎只有手工去增加，但不知道后面在update的时候，是否会做为where条件加上去。</p>

<p>&emsp;&emsp;最全的api，大家请去<a href="http://mongoosejs.com/docs/api.html">http://mongoosejs.com/docs/api.html</a>查看，好了，这一版本的demo先到些，下一版本，我将把前台的展示更换为angularjs。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js中基本于expresss、mysql的CRUD之六（过滤器及分页代码）]]></title>
    <link href="http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud6/"/>
    <updated>2013-08-09T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud6</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;定义一个登录验证函数：</p>

<p>``` js</p>

<p>/<em>*
 * Created with JetBrains WebStorm.
 * User: ljh
 * Date: 13-8-9
 * Time: 上午9:06
 * 登录验证过滤器
 </em>/
exports.authorize = function(req, res, next) {</p>

<pre><code>if (! req.session.user_key) {
    res.redirect("to_login");
} else {
    next();
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;在需求登录验证的url中，调用些函数，例如：</p>

<p>``` js
app.post(&lsquo;/main/user&rsquo;, filter.authorize, user.addUser);</p>

<p>```</p>

<!--more-->


<p>&emsp;&emsp;最后，贴出一个通用的分页对象,page.js</p>

<p>``` js page.js</p>

<p>/<em>*
 * 分页对象
 </em>/
global.Page = function(pno, pageSize, rows, data) {</p>

<pre><code>this.pno = pno;
this.pageSize = pageSize;
this.rows = rows;
this.data = data;

//首页页号
this.f_no = 1;
//上一页页号
this.p_no = 1;
if (pno - 1 &gt; 0 ) {this.p_no = pno - 1};

//末页页号
if (rows % pageSize == 0 )
    {this.l_no = rows / pageSize}
else
    {this.l_no = parseInt(rows / pageSize) + 1}

//下一页页号
if ((parseInt(pno) + parseInt(1)) &gt;= this.l_no)  {
    this.n_no =  this.l_no;
} else {
    this.n_no =  parseInt(pno) + parseInt(1);
}

this.pages =  this.l_no;


return this;
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;使用这个对象的参考代码：</p>

<p>``` js</p>

<p>//显示用户列表
exports.user_list = function(req, res){</p>

<pre><code>var pno =  req.params.pno;
var queryName = req.query.q_name;
var pageSize = 3;
var queryParm = {};
//进行多条件的拼装
if (queryName &amp;&amp; queryName.trim() != "") {
     //如果用户输入了姓名
    queryParm.f_name = orm.like("%" + queryName + "%");
}
 req.models.user.find(queryParm)
     .limit(pageSize)
     .offset((pno - 1)*pageSize)
    // .only("pk_id","f_name","f_login_code","f_birthday")   //不需要密码字段
     .run(function(err, users){
     if (err) {
         console.log(err);
         res.json({code:0,msg:'取用户分页数据失败！'});
     } else {
         req.models.user.find(queryParm).count(function(err, userCount){
             var p = new Page(pno, pageSize, userCount, users);
             var result = {'code':1,'page':p};
             res.json(result);
         });
     }
 });
</code></pre>

<p>};</p>

<p>```</p>

<p>&emsp;&emsp;这版crud演示就介绍到这，下一版本，将把前端全部替换为angular.js，再下一版本将把数据库更换为mongodb。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js中基本于expresss、mysql的CRUD之五（代码实现）]]></title>
    <link href="http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud5/"/>
    <updated>2013-08-09T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud5</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;页面的展示，jade做为高性能的一个动态页面引擎，在代码的简洁性上也有很大的优势：</p>

<p>&emsp;&emsp;先来看user_list.jade的代码：</p>

<p>``` html user_list.jade
doctype 5
html</p>

<pre><code>head
    title= title
    link(rel='stylesheet', href='../css/bootstrap.min.css')
    script(src='../js/jquery-1.7.2.min.js')
    script(src='../js/user.js')
    style
     #welcome{color:green}
     #who{color:gold}
     .row_op a{margin-left: 20px;cursor:pointer}
     .page a {margin-left: 15px;cursor:pointer}
body
    div.container
        #welcome
         h3 欢迎
          span(id='who')
          登录成功！
          span
           a(href='../logout')退出系统
        div.row
         span 用户名称：
         input(type='text',id='queryWhat',class='input-medium search-query')
         button(class='btn',id='btn_query')搜索
        div(class='row',style='margin-top: 15px;')
         input(type='button',value='新增',class='btn',id='btn_to_add')
         input(type='button',value='批量删除',class='btn',id='btn_deletes')
        div.row
         div.span8
          table.table
           &lt;tr&gt;&lt;th&gt;选择&lt;/th&gt;&lt;th&gt;用户id&lt;/th&gt;&lt;th&gt;登录名&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;出生日期&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;
           tbody(id='users')
        div(class='row',style='margin-top: 15px;')
         div#page_info.span4
         div.span8.page
          a.fp 首页
          a.pp 上一页
          a.np 下一页
          a.lp 末页
</code></pre>

<p>```</p>

<!--more-->


<p>&emsp;&emsp;上面的代码只需要写标签的开始部分，结尾的配对将由服务器自动完成，标签的嵌套包含，用空格缩进完成（一定要注意是空格而不是tab）。</p>

<p>&emsp;&emsp;再来看login.jade，同样的比较简单，但建立大家在书与的时候，还是把js文件单独提取到外部文件中。</p>

<p>``` html login.jade
doctype 5
html
  head</p>

<pre><code>title= title
link(rel='stylesheet', href='http://yanyaner.com/css/bootstrap.min.css')
script(src='js/jquery-1.7.2.min.js')
script
  $(function(){
   $('#btn_login').click(function(){
    $.ajax({
     url:'login',
     type:'get',
     data:{uname:$('input[name=uname]').val(),pwd:$('input[name=pwd]').val()},
     cache:false,
     dataType:'json',
     success:function(data){
      if (data.code==0){
       alert('登录失败，原因：' + data.msg);
      }else{
       alert(data.name + '登录成功！');
       window.location.href='main/to_user_list';
      }
     }
    });
   });
  });
</code></pre>

<p>  body
   div.container</p>

<pre><code>label 用户名：
input(name='uname',type='text',value='001').input-xlarge
&lt;br/&gt;
label 密码：
input(name='pwd',type='password',value='123').input-xlarge
&lt;br/&gt;
input(type='button',value='登录系统').btn#btn_login
</code></pre>

<p>```</p>

<p>&emsp;&emsp;user.js，前台ajax操作部分的核心代码：</p>

<p>``` js user.js</p>

<p>$(function(){</p>

<pre><code>$.ajax({
    url:'../getState',
    type:'get',
    dataType:'json',
    success:function(result){
        if (result.code == 1) {
            $('#who').html(result.name);
        } else {
            alert(result.msg);
            window.location.href='../to_login';
        }
    }
});

getUserByPage(1);

$(".page a").click(function(){
    getUserByPage($(this).attr('pno'));
});
$("#btn_query").click(function(){
    getUserByPage(1);
});
$("#btn_to_add").click(function(){
    window.location.href = 'add_user.html';
});
$(".del_user").live("click",function(){
    if (window.confirm('您确定要删除所选择的记录吗？'))  {
        $.ajax({
            url:"../main/user/" + $(this).attr('uid'),
            type:'delete',
            dataType:'json',
            cache:false,
            success:function(result) {
                alert(result.msg);
                if (result.code == 1) {
                    window.location.href = "to_user_list";
                }
            }
        });
    }
    return false;
});

$("#btn_deletes").click(function(){
    var selectedUser = $('.uid_c:checked');
    if (selectedUser.size() == 0) {
        alert("请选择要删除的用户!");
    } else {
        if (confirm("您确定要删除所选择的用户数据吗?")) {
            //获取选中的id
            var ids = "";
            selectedUser.each(function(i){
                if (i == 0) {
                    ids = $(this).val();
                } else {
                    ids = ids + "-" + $(this).val();
                }
            });
            $.ajax({
                url:"../main/users/" + ids,
                type:"delete",
                //data:{'ids':ids},
                dataType:'json',
                success:function(result){
                    if (result.code == 1) {
                        alert("批量删除成功");
                        window.location.href = "to_user_list";
                    } else {
                        alert("批量删失败！");
                    }
                }
            });
        }
    }
});
</code></pre>

<p>});
function getUserByPage(pno){</p>

<pre><code>$.ajax({
    url:'users/'+ pno,
    type:'get',
    data:{q_name:$('#queryWhat').val()},
    dataType:'json',
    success:function(result){
        if (result.code == 1) {
            var html = "";
            $(result.page.data).each(function(){
                html = html + "&lt;tr&gt;&lt;td&gt;&lt;input type='checkbox' value='"+this.pk_id+"' class='uid_c' /&gt;&lt;/td&gt;&lt;td&gt;"
                    +this.pk_id+"&lt;/td&gt;&lt;td&gt;"+this.f_login_code+"&lt;/td&gt;&lt;td&gt;"+this.f_name+"&lt;/td&gt;&lt;td&gt;"
                    +this.f_birthday.substring(0,10)+"&lt;/td&gt;&lt;td class='row_op'&gt;&lt;a href='view_user.html?uid="+this.pk_id
                    +"' &gt;查看&lt;/a&gt;&lt;a href='modify_user.html?uid="+this.pk_id+"' &gt;修改&lt;/a&gt;&lt;a href='' uid='"
                    +this.pk_id+"' class='del_user'&gt;删除&lt;/a&gt;&lt;/tr&gt;"
            });
            $("#users").html(html);
            $("#page_info").text(result.page.pno+"/"+result.page.pages+",共"+result.page.rows+"条记录");
            $(".fp").attr('pno',result.page.f_no);
            $(".pp").attr('pno',result.page.p_no);
            $(".np").attr('pno',result.page.n_no);
            $(".lp").attr('pno',result.page.l_no);
        } else {
            alert(result.msg);
        }
    }
});
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;如果上面的代码换成AngularJS，一定会简单很多，当然，这是我的其它博文中要给大家讲解的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js中基本于expresss、mysql的CRUD之四（代码实现）]]></title>
    <link href="http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud4/"/>
    <updated>2013-08-09T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud4</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;路由中的代码：</p>

<p><span class='caption-wrapper'><img class='caption' src='/uploads/2013/08/8.jpg' width='' height='' title='路由中的代码目录结构图'><span class='caption-text'>路由中的代码目录结构图</span></span></p>

<p>&emsp;&emsp;userAction.js中封装了用户相关的操作，取名为Action结尾，只是从ssh转型的命名习惯，直接上代码，并有注释：</p>

<!--more-->


<p>``` js userAction.js</p>

<p>/<em>
 * User operations
 </em>/
var path = require(&lsquo;path&rsquo;),</p>

<pre><code>fs = require('fs-extra'),
uuid = require('node-uuid'),
Seq = require('seq'),
orm = require("orm");
//引及分页全局定义对象
require("../commons/page");
</code></pre>

<p>//首页
exports.index = function(req, res){</p>

<pre><code>res.render('login');
</code></pre>

<p>};</p>

<p>//添加用户
exports.addUser = function(req, res) {</p>

<pre><code>var picPath = req.body.pic;
if (!picPath || picPath.trim()=="") {
    picPath = "upload/photo.jpg";
}
req.models.user.create([{
    f_name:req.body.name,
    f_login_code:req.body.loginCode,
    f_birthday:req.body.birthday,
    f_pwd:req.body.password,
    pic:picPath
}], function(err, items) {
    if (err) {
        var result = {'code':0,'msg':'添加用户失败：' + err};
        res.json(result);
    }  else {
        var result = {'code':1,'msg':'添加用户成功！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//批量删除用户 (uids为id字串，用-拼接，比如：1-3-4-5 )
exports.deleteUsers = function(req, res) {</p>

<pre><code>req.models.user.find({pk_id:req.params.uids.split("-")}).remove(function(err){
    if (err) {
        var result = {'code':0,'msg':'批量删除用户失败：' + err};
        res.json(result);
    }  else {
        var result = {'code':1,'msg':'批量删除用户成功！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//删除用户
exports.deleteUser = function(req, res) {</p>

<pre><code>req.models.user.get(req.params.uid, function(err, user){
   user.remove(function(err){
       if (err) {
           var result = {'code':0,'msg':'删除用户失败：' + err};
           res.json(result);
       }  else {
           var result = {'code':1,'msg':'删除用户成功！'};
           res.json(result);
       }
   });
});
</code></pre>

<p>}</p>

<p>//修改用户
exports.modifyUser = function(req, res) {</p>

<pre><code>req.models.user.get(req.params.uid, function(err, user){
    if (err) {
        res.json(result);
        return;
    }
    if (user) {
        user.f_name = req.body.userName;
        user.f_pwd = req.body.password;
        user.f_birthday =  req.body.birthday;
        user.pic = req.body.pic;
        user.save(function(err){
          if (err) {
              var result = {'code':0,'msg':'修改用户失败：' + err};
              res.json(result);
          }  else {
              var result = {'code':1,'msg':'修改用户成功！'};
              res.json(result);
          }
        });
    } else {
        var result = {'code':0,'msg':'要修改的用户可能不存在！'};
        res.json(result);
    }
});
</code></pre>

<p>}</p>

<p>//根据id查询用户
exports.getUserById = function(req, res) {</p>

<pre><code>var uid =  req.params.uid;
var result = {'code':0,'msg':'查询用户失败！'};
req.models.user.get(uid, function(err, user){
      if (err) {
          res.json(result);
          return;
      }
      if (user) {
          var result = {'code':1,'data':user};
          res.json(result);
      } else {
          res.json(result);
      }
});
</code></pre>

<p>}</p>

<p>//显示用户列表
exports.user_list = function(req, res){</p>

<pre><code>var pno =  req.params.pno;
var queryName = req.query.q_name;
var pageSize = 3;
var queryParm = {};
//进行多条件的拼装
if (queryName &amp;&amp; queryName.trim() != "") {
     //如果用户输入了姓名
    queryParm.f_name = orm.like("%" + queryName + "%");
}
 req.models.user.find(queryParm)
     .limit(pageSize)
     .offset((pno - 1)*pageSize)
    // .only("pk_id","f_name","f_login_code","f_birthday")   //不需要密码字段
     .run(function(err, users){
     if (err) {
         console.log(err);
         res.json({code:0,msg:'取用户分页数据失败！'});
     } else {
         req.models.user.find(queryParm).count(function(err, userCount){
             var p = new Page(pno, pageSize, userCount, users);
             var result = {'code':1,'page':p};
             res.json(result);
         });
     }
 });
</code></pre>

<p>};</p>

<p>//得到登录用户状态
exports.getState = function(req, res){</p>

<pre><code>var user = req.session.user_key;
var  resultJson ;
if (user) {
    resultJson = {code:1,name:user.f_name};
    //resultJson = JSON.stringify({code:1,name:user.f_name});
}  else {
    resultJson =  {code:0,msg:'对不起，您没有登录！'};
    //resultJson = JSON.stringify({code:0,msg:'对不起，您没有登录！'});
}
res.json(resultJson);
</code></pre>

<p>};</p>

<p>//用户注册，可上传照片
exports.reg = function(req, res) {</p>

<pre><code>var files = req.files;

var dir = path.resolve(__dirname, "..", "public", "upload") ;
var filename = uuid.v4()+path.extname(files.photo.name);
if (files.photo.size &gt; 0 ) {
    fs.copy(files.photo.path, dir + '\\' + filename, function(err){
        if (err) {
            console.error(err);
            //返回出错页面
            //res.render('reg/reg_success', { regName: req.body.uname,photo:'upload/default.jpeg'  });
        }
        else {
            console.log("copy file success!");
            res.render('reg/reg_success', { regName: req.body.uname,photo:'upload/' + filename  });
        }
    });
} else {
    //返回默认图片
    res.render('reg/reg_success', { regName: req.body.uname,photo:'upload/default.jpeg'  });
}
</code></pre>

<p>}</p>

<p>//退出系统
exports.logout = function(req, res){</p>

<pre><code>req.session.user_key = null;
res.render('login');
</code></pre>

<p>}</p>

<p>//登录系统
exports.login=function(req, res){</p>

<pre><code>//express中得到参数req.body.uname或req.query.uname，其中，req.body可支持post,delete,put等方式
console.log("user login, name is:" + req.query.uname + ",pwd is:" + req.query.pwd);

var loginUser;

Seq()
    .seq(function(){
        req.models.user.find({ f_login_code: req.query.uname,f_pwd:req.query.pwd }).run(this);
    }).seq(function(users){
        //在此仅假设用户登录编码和名称有重复的情况
        for (var i = 0; i&lt; users.length; i++) {
            if (i == 0) {
                //只处理一个
                loginUser = users[i];
                break;
            }
        }
        this.next();
    }).seq(function(){
        var resultJson;
        if (loginUser) {
            resultJson = JSON.stringify({code:1,name:loginUser.f_name});
            //保存登录用户状态信息至session中
            //var s = req.session;
            req.session.user_key = loginUser;
        } else {
            resultJson = JSON.stringify({code:0,msg:'用户名或密码错误，请核对！'});
        }
        //发回登录json字串
        res.send(resultJson);
    });
</code></pre>

<p>};</p>

<p>```</p>

<p>&emsp;&emsp;uploadFileAction.js是一个通用的文件上传action，专门用于ajax的文件上专使用，代码如下：</p>

<p>``` js uploadFileAction.js</p>

<p>var path = require(&lsquo;path&rsquo;),</p>

<pre><code>fs = require('fs-extra'),
uuid = require('node-uuid');
</code></pre>

<p>//上传文件，可上传照片
exports.uploadFile = function(req, res) {</p>

<pre><code>var files = req.files;
//回调函数名
var callbackFunctionName = req.body.cbName;
console.log(callbackFunctionName);
var dir = path.resolve(__dirname, "..", "public", "upload") ;
var filename = uuid.v4()+path.extname(files.photo.name);
if (files.photo.size &gt; 0 ) {
    fs.copy(files.photo.path, dir + '\\' + filename, function(err){
        if (err) {
            console.error(err);
            res.send("&lt;script&gt;"+callbackFunctionName + "(0,'upload/error.jpg');&lt;/script&gt;");
        }
        else {
            console.log("copy file success!");
            res.send("&lt;script&gt;"+callbackFunctionName + "(1,'upload/" + filename + "');&lt;/script&gt;");
        }
    });
} else {
    //返回默认图片
    res.send("&lt;script&gt;"+callbackFunctionName + "(0,'upload/error.jpg');&lt;/script&gt;");
}
</code></pre>

<p>}</p>

<p>```</p>

<p>&emsp;&emsp;从上面两个文件的代码实现中，我们可以发现，node.js的代码写java代码相比，实现同样的功能，代码查将更简洁、更少。但有一些要点，我需要给大家指出，这也是我花了一定时间和精力才得到的：</p>

<p>&emsp;&emsp;<strong>1、请求参数的获取：</strong></p>

<p>``` js
req.body.参数名</p>

<p>req.query.参数名</p>

<p>```</p>

<p>&emsp;&emsp;这两种方式中，body是支持post,delete,put等方式，功能更为强大。</p>

<p>&emsp;&emsp;<strong>2、路径参数的获取</strong></p>

<p>``` js
req.params.参数占位符名，其中参数占位符名必须和路由表中的名称一致，比如：</p>

<p>req.params.uid对应路由表中的app.get(&lsquo;/main/user/:uid&rsquo;, filter.authorize, user.getUserById);
```</p>

<p>&emsp;&emsp;<strong>3、session的访问</strong></p>

<p><code>js
req.session.自定义key;
</code></p>

<p>&emsp;&emsp;比如：</p>

<p><code>js
req.session.user_key = loginUser;
</code></p>

<p>&emsp;&emsp;获取时：</p>

<p><code>js
var u = req.session.user_key
</code></p>

<p>&emsp;&emsp;<strong>4、页面的跳转</strong></p>

<p>``` js
res.render，参数为路转的表现层页面文件路径，以及放在作用域中的参数，这些参数可以在页面模板中取到。比如：</p>

<p>res.render(&lsquo;reg/reg_success&rsquo;, { regName: req.body.uname,photo:&lsquo;upload/&rsquo; + filename  });</p>

<p>```</p>

<p>&emsp;&emsp;而jade中的代码是：</p>

<p>```
 body
   div.container</p>

<pre><code>p.alert 注册成功
p.alert.alert-info 注册用户名是：#{regName}
p.alert.alert-info 照片是
 img(src='#{photo}')
</code></pre>

<p>```</p>

<p>&emsp;&emsp;这样，就得到了regName以及photo参数了。</p>

<p>&emsp;&emsp;<strong>5、页面重定向</strong></p>

<p><code>js
res.redirect('你的url地址')
</code></p>

<p>&emsp;&emsp;注意是response的方法。</p>

<p>&emsp;&emsp;<strong>6、自定义响应</strong></p>

<p>&emsp;&emsp;写数据方式1：</p>

<p>``` js
res.write(&ldquo;<h1>ok!</h1>&rdquo;);</p>

<p>res.end();
```</p>

<p>&emsp;&emsp;写数据方式2：</p>

<p><code>js
res.send("&lt;h1&gt;ok!&lt;/h1&gt;");
</code></p>

<p>&emsp;&emsp;<strong>7、json数据的输出</strong></p>

<p>&emsp;&emsp;可以用第6条的方式输出，比如：</p>

<p>``` js
resultJson = JSON.stringify({code:0,msg:&lsquo;用户名或密码错误，请核对！&rsquo;});</p>

<p>res.send(resultJson);
```</p>

<p>&emsp;&emsp;也可以用json方法输出：</p>

<p><code>js
 var p = new Page(pno, pageSize, userCount, users);
 var result = {'code':1,'page':p};
 res.json(result);
</code></p>

<p>&emsp;&emsp;对于如果控制输入对象中的哪几个字段至json，我还没有找到方法，知道的同学请告知我。</p>

<p>&emsp;&emsp;<strong>8、同步</strong></p>

<p>&emsp;&emsp;Seq，请看上面的登录代码中我写的演示。当然，一般简单的操作，你可将代码直接写到回调中即可。</p>

<p>&emsp;&emsp;最后，说点关于orm2的东西</p>

<p>&emsp;&emsp;<strong>1、分页查询</strong></p>

<p>``` js
req.models.user.find(queryParm)</p>

<pre><code>     .limit(pageSize)
     .offset((pno - 1)*pageSize)
</code></pre>

<p>```</p>

<p>&emsp;&emsp;这是orm2的分页，但是要注意 .only(&ldquo;pk_id&rdquo;,&ldquo;f_name&rdquo;,&ldquo;f_login_code&rdquo;,&ldquo;f_birthday&rdquo;)，可以指定需要哪些字段，但这个设置是全局的，会影响到其它查询，所以最后不要用only。</p>

<p>&emsp;&emsp;2、多条件的自动拼装，将更加的简单：</p>

<p>``` js
var queryParm = {};</p>

<pre><code>//进行多条件的拼装
if (queryName &amp;&amp; queryName.trim() != "") {
     //如果用户输入了姓名
    queryParm.f_name = orm.like("%" + queryName + "%");
}
</code></pre>

<p>```</p>

<p>&emsp;&emsp;orm2更详细的用法，请大家参考：<a href="https://github.com/dresende/node-orm2">https://github.com/dresende/node-orm2</a></p>

<p>&emsp;&emsp;如果你需要事务，需要用到orm-transaction包，需要通过npm来安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js中基本于expresss、mysql的CRUD之三（代码实现）]]></title>
    <link href="http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud3/"/>
    <updated>2013-08-09T15:18:00+08:00</updated>
    <id>http://yanyaner.com/blog/2013/08/09/nodejs-express-mysql-crud3</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;app.js，程序入口所在。</p>

<p>&emsp;&emsp;<strong>先引入依赖的文件</strong>：</p>

<p>``` js</p>

<p>var express = require(&lsquo;express&rsquo;)
  , user = require(&lsquo;./routes/userAction&rsquo;)
  , fileUpload = require(&lsquo;./routes/uploadFileAction&rsquo;)
  , filter = require(&lsquo;./commons/filter&rsquo;)
  , http = require(&lsquo;http&rsquo;)
  , path = require(&lsquo;path&rsquo;)
  ,orm = require(&ldquo;orm&rdquo;);</p>

<p>var app = express();</p>

<p>```</p>

<p>&emsp;&emsp;<strong>定义数据库连接信息</strong>：</p>

<p>``` js</p>

<p>var opts = {</p>

<pre><code>database : "t88",
protocol : "mysql",
host     : "127.0.0.1",
port     : 3306,
user     : "root",
password : "",
query    : {
    pool     : true,
    debug    : true
}
</code></pre>

<p>}
```</p>

<p>&emsp;&emsp;<strong>定义实体对象</strong>：</p>

<!--more-->


<p>``` js</p>

<p>app.use(orm.express(opts,{</p>

<pre><code>  define:function(db, models) {
      models.user = db.define('t_user',
          {
              f_login_code    : String,
              f_name    : String,
              f_pwd  : { type: 'text'},
              f_birthday:{type:'date'},
              pic:String
          },
          {
              id : 'pk_id'
          });
  }
</code></pre>

<p>}));</p>

<p>```</p>

<p>&emsp;&emsp;其中，t_user是表名，pk_id是主键。</p>

<p>&emsp;&emsp;<strong>再定义整个系统的环境</strong>，比如：视图引擎，启用对session的支持，路由的支持等。</p>

<p>``` js</p>

<p>// all environments
app.set(&lsquo;port&rsquo;, process.env.PORT || 3000);
app.set(&lsquo;views&rsquo;, <strong>dirname + &lsquo;/views&rsquo;);
app.set(&lsquo;view engine&rsquo;, &lsquo;jade&rsquo;);
app.use(express.favicon());
app.use(express.logger(&lsquo;dev&rsquo;));
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.cookieParser(&lsquo;your secret here&rsquo;));
app.use(express.session());
app.use(app.router);
app.use(express.static(path.join(</strong>dirname, &lsquo;public&rsquo;)));</p>

<p>```</p>

<p>&emsp;&emsp;<strong>定义整个系统的路由表</strong>，这个相当于ssh中的struts-config.xml，但下面的写法更加的简洁，并且完美支持restful：</p>

<p>``` js</p>

<p>app.get(&lsquo;/&rsquo;, user.index);
//分页查询用户数据
app.get(&lsquo;/main/users/:pno&rsquo;, filter.authorize, user.user_list);
//根据id查询用户
app.get(&lsquo;/main/user/:uid&rsquo;, filter.authorize, user.getUserById);
//修改用户
app.put(&lsquo;/main/user/:uid&rsquo;, filter.authorize, user.modifyUser);
//删除用户
app.delete(&lsquo;/main/user/:uid&rsquo;, filter.authorize, user.deleteUser);
//批量删除用户
app.delete(&lsquo;/main/users/:uids&rsquo;, filter.authorize, user.deleteUsers);
//添加用户
app.post(&lsquo;/main/user&rsquo;, filter.authorize, user.addUser);</p>

<p>app.get(&lsquo;/to_reg&rsquo;, function(req,rsp){rsp.render(&lsquo;reg/reg&rsquo;);});
app.post(&lsquo;/reg&rsquo;, filter.authorize, user.reg);</p>

<p>app.get(&lsquo;/to_login&rsquo;, function(req,rsp){rsp.render(&lsquo;login&rsquo;);});
app.get(&lsquo;/login&rsquo;,user.login);
app.get(&lsquo;/logout&rsquo;, filter.authorize, user.logout);</p>

<p>app.get(&lsquo;/main/to_user_list&rsquo;, filter.authorize,  function(req, res){res.render(&lsquo;main/user_list&rsquo;);});
app.get(&lsquo;/getState&rsquo;, user.getState);</p>

<p>app.post(&lsquo;/commons/upload&rsquo;, filter.authorize, fileUpload.uploadFile);</p>

<p>```</p>

<p>&emsp;&emsp;路由表中要注意这样几个问题：</p>

<p>&emsp;&emsp;1、app中的get,post,delete,put方法，即表示请求的提交方式。</p>

<p>&emsp;&emsp;2、每一个方法中，第一个参数是请求路径，后面是一个或多个可执行的函数，系统会自动传入request,response,chain等几个参数。</p>

<p>&emsp;&emsp;3、路径变量使用冒号点位符格式书写，比如：'/main/user/:uid'，可以表示/main/user/10的请求。</p>

<p>&emsp;&emsp;4、简单的路由跳转功能，可直接书写function，复杂的，可写到一个routes目录中，以保证路由表的简洁。</p>

<p>&emsp;&emsp;最后，<strong>启动服务器</strong>，端口号可自己改，默认是3000：</p>

<p>``` js</p>

<p>http.createServer(app).listen(app.get(&lsquo;port&rsquo;), function(){
  console.log(&lsquo;Express server listening on port &rsquo; + app.get(&lsquo;port&rsquo;));
});</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
